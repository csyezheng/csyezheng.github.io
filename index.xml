<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ye Zheng&#39;s Blog</title>
    <link>http://csyezheng.github.io/</link>
    <description>Recent content on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Sep 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://csyezheng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://csyezheng.github.io/about/</link>
      <pubDate>Mon, 25 Sep 2017 21:38:52 +0800</pubDate>
      
      <guid>http://csyezheng.github.io/about/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;m graduated from the Hebei GEO University with a degree in marketing, because I thought computers were cool from an early age, so I chose programmers as my future employment direction in my third year of college. In the third year of college, I learned some front-end knowledge, and in the fourth year of college I learned some C ++ related knowledge. After graduating, I naturally found a job related to programming.&lt;/p&gt;
&lt;p&gt;In the first company, I was mainly engaged in web crawling. I was responsible for scraping various financial data including stock exchanges, performing data cleaning, and completing an announcement classification system during the period. I worked as a data development engineer in the second company, and solved development problems such as real-time data forwarding, reception, and storage. I worked as a back-end development engineer at a third company and built the entire edx-based online learning system.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Machine Learning Crash Course Courses</title>
      <link>http://csyezheng.github.io/post/machine-learning/crash-course/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/machine-learning/crash-course/</guid>
      
        <description>&lt;h1 id=&#34;machine-learning-crash-course-courses&#34;&gt;Machine Learning Crash Course Courses&lt;/h1&gt;
&lt;h2 id=&#34;ml-concepts&#34;&gt;ML Concepts&lt;/h2&gt;
&lt;h4 id=&#34;introduction-to-ml&#34;&gt;Introduction to ML&lt;/h4&gt;
&lt;p&gt;First, it gives you a tool to reduce the time you spend programming.&lt;/p&gt;
&lt;p&gt;Second, it will allow you to customize your products, making them better for specific groups of people.&lt;/p&gt;
&lt;p&gt;Third, machine learning lets you solve problems that you, as a programmer, have no idea how to do by hand.&lt;/p&gt;
&lt;p&gt;machine learning &lt;strong&gt;changes the way you think about a problem&lt;/strong&gt;. Software engineers are trained to think logically and mathematically; we use assertions to prove properties of our program are correct.  With machine learning, the focus shifts from a mathematical science to a natural science: we&amp;rsquo;re making observations about an uncertain world, running experiments, and using statistics, not logic, to analyze the results of the experiment. The ability to think like a scientist  will expand your horizons and open up new areas that you couldn&amp;rsquo;t explore without it.&lt;/p&gt;
&lt;h4 id=&#34;framing-框架处理&#34;&gt;Framing (框架处理)&lt;/h4&gt;
&lt;p&gt;What is (supervised) machine learning? Concisely put, it is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ML systems learn how to combine input to produce useful predictions on never-before-seen data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;labels-标签&#34;&gt;Labels (标签)&lt;/h6&gt;
&lt;p&gt;A &lt;strong&gt;label&lt;/strong&gt; is the thing we&amp;rsquo;re predicting—the &lt;code&gt;y&lt;/code&gt; variable in simple linear regression.&lt;/p&gt;
&lt;h6 id=&#34;features-特征&#34;&gt;Features (特征)&lt;/h6&gt;
&lt;p&gt;A &lt;strong&gt;feature&lt;/strong&gt; is an input variable—the &lt;code&gt;x&lt;/code&gt; variable in simple linear regression. A simple machine learning project might use a single feature, while a more sophisticated machine learning project could use millions of features.&lt;/p&gt;
&lt;h6 id=&#34;examples-样本&#34;&gt;Examples (样本)&lt;/h6&gt;
&lt;p&gt;An &lt;strong&gt;example&lt;/strong&gt; is a particular instance of data, &lt;strong&gt;x&lt;/strong&gt;. (We put &lt;strong&gt;x&lt;/strong&gt; in boldface to indicate that it is a vector.) We break examples into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;labeled examples&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;labeled example&lt;/strong&gt; includes both feature(s) and the label.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unlabeled examples&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;unlabeled example&lt;/strong&gt; contains features but not the label.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;models-模型&#34;&gt;Models (模型)&lt;/h6&gt;
&lt;p&gt;A model defines the relationship between features and label.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Training&lt;/strong&gt; means creating or &lt;strong&gt;learning&lt;/strong&gt; the model. That is, you show the model labeled examples and enable the model to gradually learn the relationships between features and label.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inference&lt;/strong&gt; means applying the trained model to unlabeled examples. That is, you use the trained model to make useful predictions (&lt;code&gt;y&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;regression-vs-classification-回归与分类&#34;&gt;Regression vs. classification (回归与分类)&lt;/h6&gt;
&lt;p&gt;A &lt;strong&gt;regression&lt;/strong&gt; model predicts continuous values.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;classification&lt;/strong&gt; model predicts discrete values (离散值).&lt;/p&gt;
&lt;h4 id=&#34;descending-into-ml&#34;&gt;Descending into ML&lt;/h4&gt;
&lt;h6 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h6&gt;
&lt;p&gt;$$
y&amp;rsquo; = b + w_1x_1 + w_2x_2 + w_3x_3
$$&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$y′$ is the predicted &lt;strong&gt;label&lt;/strong&gt; (a desired output).&lt;/li&gt;
&lt;li&gt;$b$ is the &lt;strong&gt;bias&lt;/strong&gt; (the y-intercept), sometimes referred to as $w_0$.&lt;/li&gt;
&lt;li&gt;$w1$ is the &lt;strong&gt;weight&lt;/strong&gt; of &lt;strong&gt;feature&lt;/strong&gt; 1. Weight is the same concept as the &amp;ldquo;slope&amp;rdquo; m in the traditional equation of a line.&lt;/li&gt;
&lt;li&gt;$x_1$ is a &lt;strong&gt;feature&lt;/strong&gt; (a known input).&lt;/li&gt;
&lt;li&gt;a more sophisticated model might rely on multiple features, each having a separate weight ($w_1$, $w_2$, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;training-and-loss&#34;&gt;Training and Loss&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;Training&lt;/strong&gt; a model simply means learning (determining) good values for all the weights and the bias from labeled examples. In supervised learning, a machine learning algorithm builds a model by examining many examples and attempting to find a model that &lt;strong&gt;minimizes loss&lt;/strong&gt;; this process is called &lt;strong&gt;empirical risk minimization&lt;/strong&gt; (&lt;strong&gt;经验风险最小化&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loss is the penalty for a bad prediction&lt;/strong&gt;. That is, &lt;strong&gt;loss&lt;/strong&gt; is a number &lt;strong&gt;indicating how bad the model&amp;rsquo;s prediction was on a single example&lt;/strong&gt;. If the model&amp;rsquo;s prediction is perfect, the loss is zero; otherwise, the loss is greater. The goal of training a model is to find a set of weights and biases that have &lt;em&gt;low&lt;/em&gt; loss, on average, across all examples.&lt;/p&gt;
&lt;p&gt;You might be wondering whether you could &lt;strong&gt;create a mathematical function—a loss function—that would aggregate the individual losses in a meaningful fashion.&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;squared-loss-a-popular-loss-function&#34;&gt;Squared loss: a popular loss function&lt;/h6&gt;
&lt;p&gt;The linear regression models we&amp;rsquo;ll examine here use a loss function called &lt;strong&gt;squared loss&lt;/strong&gt; (also known as &lt;strong&gt;L2 loss&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mean square error&lt;/strong&gt; (&lt;strong&gt;MSE&lt;/strong&gt;) is the average squared loss per example over the whole dataset. To calculate MSE, sum up all the squared losses for individual examples and then divide by the number of examples:
$$
MSE = \frac{1}{N}\sum_{(x,y)\in{D}} (y - prediction(x))^2
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(x,y)$ is an example in which&lt;/li&gt;
&lt;li&gt;$x$ is the set of features (for example, chirps/minute, age, gender) that the model uses to make predictions.&lt;/li&gt;
&lt;li&gt;$y$ is the example&amp;rsquo;s label (for example, temperature).&lt;/li&gt;
&lt;li&gt;$prediction(x)$ is a function of the &lt;strong&gt;weights&lt;/strong&gt; and &lt;strong&gt;bias&lt;/strong&gt; in combination with the set of &lt;strong&gt;features&lt;/strong&gt; x.&lt;/li&gt;
&lt;li&gt;$D$ is a data set containing many labeled examples, which are $(x,y)$ pairs.&lt;/li&gt;
&lt;li&gt;$N$ is the number of examples in $D$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reducing-loss-降低损失&#34;&gt;Reducing Loss (降低损失)&lt;/h4&gt;
&lt;h6 id=&#34;an-iterative-approach-迭代方法&#34;&gt;An Iterative Approach (迭代方法)&lt;/h6&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.cn/machine-learning/crash-course/images/GradientDescentDiagram.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;A Machine Learning model is trained by starting with an initial guess for the weights and bias and iteratively adjusting those guesses until learning the weights and bias with the lowest possible loss.&lt;/p&gt;
&lt;p&gt;Usually, you iterate until overall loss stops changing or at least changes extremely slowly. When that happens, we say that the model has &lt;strong&gt;converged&lt;/strong&gt; (&lt;strong&gt;收敛&lt;/strong&gt;).&lt;/p&gt;
&lt;h6 id=&#34;gradient-descent-梯度下降法&#34;&gt;Gradient Descent (梯度下降法)&lt;/h6&gt;
&lt;p&gt;For the kind of regression problems we&amp;rsquo;ve been examining, the resulting plot of loss vs. $w_1$ will always be &lt;strong&gt;convex&lt;/strong&gt; (凸形). In other words, the plot will always be bowl-shaped, &lt;strong&gt;Convex problems have only one minimum&lt;/strong&gt;; that is, only one place where the slope is exactly 0. That minimum is where the loss function converges.&lt;/p&gt;
&lt;p&gt;Calculating the loss function for every conceivable value of $w_{1}$ **over the entire data set would be an inefficient way** of finding the convergence point. Let&amp;rsquo;s examine a better mechanism—very popular in machine learning—called **gradient descent**.&lt;/p&gt;
&lt;p&gt;The first stage in gradient descent is to pick a starting value (a starting point) for $w_{1}$. **The starting point doesn&amp;rsquo;t matter much**; therefore, many algorithms simply set $w_{1}$ to 0 or pick a random value.&lt;/p&gt;
&lt;p&gt;The gradient descent algorithm then calculates the gradient of the loss curve at the starting point. the gradient of the loss is equal to the &lt;strong&gt;derivative&lt;/strong&gt; (&lt;strong&gt;slope&lt;/strong&gt;) of the curve, and tells you which way is &amp;ldquo;warmer&amp;rdquo; or &amp;ldquo;colder.&amp;rdquo; When there are multiple weights, the &lt;strong&gt;gradient&lt;/strong&gt; is a &lt;strong&gt;vector&lt;/strong&gt; of &lt;strong&gt;partial derivatives&lt;/strong&gt; with respect to the weights.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that a gradient is a vector&lt;/strong&gt;, so it has both of the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a direction&lt;/li&gt;
&lt;li&gt;a magnitude (大小)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.cn/machine-learning/crash-course/images/GradientDescentGradientStep.svg?dcb_=0.336975579495699&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;learning-rate-学习速率&#34;&gt;Learning Rate (学习速率)&lt;/h6&gt;
&lt;p&gt;As noted, the gradient vector has both a direction and a magnitude. Gradient descent algorithms multiply the gradient by a scalar known as the &lt;strong&gt;learning rate&lt;/strong&gt; (also sometimes called &lt;strong&gt;step size&lt;/strong&gt;) to determine the next point. For example, if the gradient magnitude is 2.5 and the learning rate is 0.01, then the gradient descent algorithm will pick the next point 0.025 away from the previous point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyperparameters&lt;/strong&gt; are the knobs that programmers tweak in machine learning algorithms. Most machine learning programmers spend a fair amount of time tuning the learning rate.&lt;/p&gt;
&lt;p&gt;If you pick a learning rate that is &lt;strong&gt;too small&lt;/strong&gt;, learning will take too long, Conversely, if you specify a learning rate that is &lt;strong&gt;too large&lt;/strong&gt;, the next point will perpetually bounce haphazardly across the bottom of the well like a quantum mechanics experiment gone horribly wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The ideal learning rate:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ideal learning rate in one-dimension is 1f(x)″ (the inverse of the second derivative of f(x) at x).&lt;/li&gt;
&lt;li&gt;The ideal learning rate for 2 or more dimensions is the inverse of the &lt;a href=&#34;https://wikipedia.org/wiki/Hessian_matrix&#34;&gt;Hessian&lt;/a&gt; (matrix of second partial derivatives).&lt;/li&gt;
&lt;li&gt;The story for general convex functions is more complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;stochastic-gradient-descent-随机梯度下降法&#34;&gt;Stochastic Gradient Descent (随机梯度下降法)&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;batch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In gradient descent, a &lt;strong&gt;batch&lt;/strong&gt; is the total number of examples you use to calculate the gradient in a single iteration.&lt;/p&gt;
&lt;p&gt;A large data set with randomly sampled examples probably contains &lt;strong&gt;redundant&lt;/strong&gt; data. In fact, redundancy becomes more likely as the batch size grows. Some redundancy can be useful to &lt;strong&gt;smooth&lt;/strong&gt; out noisy gradients, but enormous batches tend not to carry much more predictive value than large batches.&lt;/p&gt;
&lt;p&gt;By choosing examples at random from our data set, we could estimate (albeit, noisily) a big average from a much smaller one. &lt;strong&gt;Stochastic gradient descent&lt;/strong&gt; (&lt;strong&gt;SGD&lt;/strong&gt;) takes this idea to the extreme&amp;ndash;it uses &lt;strong&gt;only a single example (a batch size of 1) per iteration&lt;/strong&gt;. Given enough iterations, SGD works but is very noisy. The term &amp;ldquo;stochastic&amp;rdquo; indicates that the one example comprising each batch is chosen at random.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mini-batch stochastic gradient descent&lt;/strong&gt; (&lt;strong&gt;mini-batch SGD&lt;/strong&gt;) is a compromise between full-batch iteration and SGD. A mini-batch is typically between 10 and 1,000 examples, chosen at random. Mini-batch SGD reduces the amount of noise in SGD but is still more efficient than full-batch.&lt;/p&gt;
&lt;h4 id=&#34;first-steps-with-tf&#34;&gt;First Steps with TF&lt;/h4&gt;
&lt;p&gt;Programming Exercises&lt;/p&gt;
&lt;p&gt;If you are unfamiliar with NumPy or pandas, please begin by doing the following two Colab exercises:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/eng-edu/blob/master/ml/cc/exercises/numpy_ultraquick_tutorial.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=numpy_tf2-colab&amp;amp;hl=en&#34;&gt;NumPy Ultraquick Tutorial&lt;/a&gt; Colab exercise, which provides all the NumPy information you need for this course.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/eng-edu/blob/master/ml/cc/exercises/pandas_dataframe_ultraquick_tutorial.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=pandas_tf2-colab&amp;amp;hl=en&#34;&gt;pandas UltraQuick Tutorial&lt;/a&gt; Colab exercise, which provides all the pandas information you need for this course.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After gaining competency in NumPy and pandas, do the following two Colab exercises to explore linear regression and hyperparameter tuning in tf.keras:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/eng-edu/blob/master/ml/cc/exercises/linear_regression_with_synthetic_data.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=linear_regression_synthetic_tf2-colab&amp;amp;hl=en&#34;&gt;Linear Regression with Synthetic Data&lt;/a&gt; Colab exercise, which explores linear regression with a toy dataset.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/eng-edu/blob/master/ml/cc/exercises/linear_regression_with_a_real_dataset.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=linear_regression_real_tf2-colab&amp;amp;hl=en&#34;&gt;Linear Regression with a Real Dataset&lt;/a&gt; Colab exercise, which guides you through the kinds of analysis you should do on a real dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;generalization-泛化&#34;&gt;Generalization (泛化)&lt;/h4&gt;
&lt;p&gt;Video Lecture
Peril of Overfitting&lt;/p&gt;
&lt;h4 id=&#34;training-and-test-sets&#34;&gt;Training and Test Sets&lt;/h4&gt;
&lt;p&gt;Video Lecture
Splitting Data
Playground Exercise&lt;/p&gt;
&lt;h4 id=&#34;validation-set&#34;&gt;Validation Set&lt;/h4&gt;
&lt;p&gt;Check Your Intuition
Video Lecture
Another Partition
Programming Exercise&lt;/p&gt;
&lt;h4 id=&#34;representation-表示法&#34;&gt;Representation (表示法)&lt;/h4&gt;
&lt;p&gt;Video Lecture
Feature Engineering
Qualities of Good Features
Cleaning Data&lt;/p&gt;
&lt;h4 id=&#34;feature-crosses-特征组合&#34;&gt;Feature Crosses (特征组合)&lt;/h4&gt;
&lt;p&gt;Video Lecture
Encoding Nonlinearity
Crossing One-Hot Vectors
Playground Exercises
Programming Exercise&lt;/p&gt;
&lt;p&gt;Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;regularization-simplicity-正则化简单性&#34;&gt;Regularization: Simplicity (正则化：简单性)&lt;/h4&gt;
&lt;p&gt;Playground Exercise: Overcrossing?
Video Lecture
L2 Regularization
Lambda
Playground Exercise: L2 Regularization
Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;logistic-regression&#34;&gt;Logistic Regression&lt;/h4&gt;
&lt;p&gt;Video Lecture
Calculating a Probability
Loss and Regularization&lt;/p&gt;
&lt;h4 id=&#34;classification&#34;&gt;Classification&lt;/h4&gt;
&lt;p&gt;Video Lecture
Thresholding
True vs. False; Positive vs. Negative
Accuracy
Precision and Recall
Check Your Understanding: Accuracy, Precision, Recall
ROC Curve and AUC
Check Your Understanding: ROC and AUC
Prediction Bias
Programming Exercise&lt;/p&gt;
&lt;h4 id=&#34;regularization-sparsity-正则化稀疏性&#34;&gt;Regularization: Sparsity (正则化：稀疏性)&lt;/h4&gt;
&lt;p&gt;Video Lecture
L1 Regularization
Playground Exercise
Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;neural-networks&#34;&gt;Neural Networks&lt;/h4&gt;
&lt;p&gt;Video Lecture
Structure
Playground Exercises
Programming Exercise&lt;/p&gt;
&lt;h4 id=&#34;training-neural-nets&#34;&gt;Training Neural Nets&lt;/h4&gt;
&lt;p&gt;Video Lecture
Best Practices&lt;/p&gt;
&lt;h4 id=&#34;multi-class-neural-nets&#34;&gt;Multi-Class Neural Nets&lt;/h4&gt;
&lt;p&gt;Video Lecture
One vs. All
Softmax
Programming Exercise&lt;/p&gt;
&lt;h4 id=&#34;embeddings-嵌入&#34;&gt;Embeddings (嵌入)&lt;/h4&gt;
&lt;p&gt;Video Lecture
Motivation from Collaborative Filtering
Categorical Input Data
Translating to a Lower-Dimensional Space
Obtaining Embeddings&lt;/p&gt;
&lt;h2 id=&#34;ml-engineering&#34;&gt;ML Engineering&lt;/h2&gt;
&lt;h4 id=&#34;production-ml-systems&#34;&gt;Production ML Systems&lt;/h4&gt;
&lt;h4 id=&#34;static-vs-dynamic-training&#34;&gt;Static vs. Dynamic Training&lt;/h4&gt;
&lt;p&gt;Video Lecture
Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;static-vs-dynamic-inference&#34;&gt;Static vs. Dynamic Inference&lt;/h4&gt;
&lt;p&gt;Video Lecture
Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;data-dependencies&#34;&gt;Data Dependencies&lt;/h4&gt;
&lt;p&gt;Video Lecture
Check Your Understanding&lt;/p&gt;
&lt;h4 id=&#34;fairness&#34;&gt;Fairness&lt;/h4&gt;
&lt;p&gt;Video Lecture
Types of Bias
Identifying Bias
Evaluating for Bias
Programming Exercise
Check Your Understanding&lt;/p&gt;
&lt;h2 id=&#34;ml-systems-in-the-real-world&#34;&gt;ML Systems in the Real World&lt;/h2&gt;
&lt;h4 id=&#34;cancer-prediction&#34;&gt;Cancer Prediction&lt;/h4&gt;
&lt;h4 id=&#34;literature&#34;&gt;Literature&lt;/h4&gt;
&lt;h4 id=&#34;guidelines&#34;&gt;Guidelines&lt;/h4&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;h4 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>Few shot learning</title>
      <link>http://csyezheng.github.io/post/machine-learning/few-shot-learning/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/machine-learning/few-shot-learning/</guid>
      
        <description>&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AnthonyMRios/multi-label-zero-shot&#34;&gt;https://github.com/AnthonyMRios/multi-label-zero-shot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/D18-1352.pdf&#34;&gt;Few-Shot and Zero-Shot Multi-Label Learning for Structured Label Spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uknowledge.uky.edu/cgi/viewcontent.cgi?article=1076&amp;amp;context=cs_etds&#34;&gt;Deep Neural Networks for Multi-Label Text Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YujiaBao/Distributional-Signatures&#34;&gt;https://github.com/YujiaBao/Distributional-Signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://paperswithcode.com/paper/few-shot-text-classification-with-induction&#34;&gt;Induction Networks for Few-Shot Text Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laohur/LearnToCompareText&#34;&gt;https://github.com/laohur/LearnToCompareText&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Learning Path for Machine Learning</title>
      <link>http://csyezheng.github.io/post/machine-learning/learn-ml/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/machine-learning/learn-ml/</guid>
      
        <description>&lt;h1 id=&#34;learning-path-for-machine-learning&#34;&gt;Learning Path for Machine Learning&lt;/h1&gt;
&lt;h2 id=&#34;ml-theory&#34;&gt;ML theory&lt;/h2&gt;
&lt;p&gt;Coding skills&lt;/p&gt;
&lt;p&gt;Math and stats&lt;/p&gt;
&lt;p&gt;Build your own projects&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/machine-learning/crash-course&#34;&gt;Google Developers Machine Learning Crash Course&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Wireshark</title>
      <link>http://csyezheng.github.io/post/any-path/wireshark/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/any-path/wireshark/</guid>
      
        <description>&lt;pre&gt;&lt;code&gt;$ tshark -r all.pcapng.gz -i http==1 -O http -T fields -e http.request.method -e http.request.uri -e http.request.line -e http.response.line &amp;gt; dump.txt
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Scraping with Scrapy and Django Integration</title>
      <link>http://csyezheng.github.io/post/back-end/scrapy-with-django/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/back-end/scrapy-with-django/</guid>
      
        <description>&lt;h2 id=&#34;installing-dependencies-optional&#34;&gt;Installing Dependencies (Optional)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python -m pip install --user virtualenv
$ python -m pip install --user virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv
source $HOME/.local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ mkvirtualenv stock-screener
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;pip install django djangorestframework markdown django-filter Scrapy scrapyd python-scrapyd-api scrapy-djangoitem proxybroker celery redis django-celery-results django-celery-beat
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;creating-a-django-project&#34;&gt;Creating a Django Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ django-admin startproject stock_screener
$ cd stock_screener

$ mkdir stock_screener/apps/basic_info
$ django-admin startapp basic_info stock_screener/apps/basic_info

$ mkdir stock_screener/apps/northbound
$ django-admin startapp northbound stock_screener/apps/northbound

$ mkdir stock_screener/apps/financial_metrics
$ django-admin startapp financial_metrics stock_screener/apps/financial_metrics

$ mkdir stock_screener/apps/quotes
$ django-admin startapp quotes stock_screener/apps/quotes

$ mkdir stock_screener/apps/jobs
$ django-admin startapp jobs stock_screener/apps/jobs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cannot add backslash suffix when run startapp command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    ...
    &#39;rest_framework&#39;,
    &#39;stock_screener.apps.basic_info&#39;,
    &#39;stock_screener.apps.northbound&#39;,
    &#39;stock_screener.apps.financial_metrics&#39;,
]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python manage.py migrate
$ python manage.py createsuperuser --email admin@example.com --username admin
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/basic_info/models.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from django.db import models

class StockList(models.Model):
    category = models.CharField(max_length=255)
    code = models.CharField(max_length=255, primary_key=True)
    name = models.CharField(max_length=255)
    listing_date = models.DateField()
    establish_date = models.DateField()
    industry = models.CharField(max_length=255)
    main_business = models.TextField()

    class Meta:
        ordering = [&#39;code&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python manage.py makemigrations basic_info
$ python manage.py migrate basic_info
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/northbound/models.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from django.db import models

class NetFlow(models.Model):
    code = models.CharField(max_length=255, primary_key=True)
    name = models.CharField(max_length=255)
    inflow = models.FloatField()
    change_pct = models.FloatField()
    five_inflow = models.FloatField()
    five_change = models.FloatField()
    twenty_inflow = models.FloatField()
    twenty_change = models.FloatField()
    sixty_inflow = models.FloatField()
    sixty_change = models.FloatField()
    cost = models.FloatField()
    profit_percent = models.FloatField()
    market_code = models.IntegerField()
    shares = models.IntegerField()

    class Meta:
        ordering = [&#39;inflow&#39;]


class ShareHolding(models.Model):
    # concept code
    code = models.CharField(max_length=255, primary_key=True)
    # concept name
    name = models.CharField(max_length=255)
    inflow = models.FloatField()
    change_pct = models.FloatField()
    five_inflow = models.FloatField()
    five_change = models.FloatField()
    twenty_inflow = models.FloatField()
    twenty_change = models.FloatField()
    sixty_inflow = models.FloatField()
    sixty_change = models.FloatField()

    class Meta:
        ordering = [&#39;inflow&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python manage.py makemigrations northbound
$ python manage.py migrate northbound
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/northbound/views.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/northbound/urls.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from django.urls import path
from stock_screener.apps.northbound import views

urlpatterns = [
    path(&#39;netflow/&#39;, views.netflow_list),
    path(&#39;netflow_concept/&#39;, views.netflow_concept_list),
]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/urls.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    include(&#39;&#39;, include(&#39;northbound.urls&#39;)),
]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/northbound/admin.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from stock_screener.apps.northbound.models import NetFlow, NetFlowConcept

for model in (NetFlow, NetFlowConcept):
    admin.site.register(model)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;scrapy-settings-set-up&#34;&gt;Scrapy settings set up&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ vim stock_screener/settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# integrate scrapy with django START

import os
from os.path import abspath, dirname, join
from sys import path

PROJECT_ROOT = abspath(dirname(__file__))
root = lambda *x: abspath(join(abspath(PROJECT_ROOT), *x))
SCRAPER_ROOT = root(&#39;apps/scraper&#39;)
path.append(SCRAPER_ROOT)

os.environ.setdefault(&#39;SCRAPY_SETTINGS_MODULE&#39;, &#39;scraper.settings&#39;)

# integrate scrapy with django DONE
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;creating-the-scrapy-project&#34;&gt;Creating the Scrapy Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ cd stock_screener/apps/
$ scrapy startproject scraper
$ cd scraper
$ scrapy genspider northbound &amp;lt;domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;django-settings-set-up&#34;&gt;Django settings set up&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ vim scraper/settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# DJANGO INTEGRATION START

import os
from os.path import abspath, dirname, join
from sys import path

here = lambda *x: join(abspath(dirname(__file__)), *x)
PROJECT_ROOT = here(&#39;../../../../&#39;)     #  directory path of stock_screener
path.append(abspath(PROJECT_ROOT))
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;stock_screener.settings&#39;

# This is required only if Django Version &amp;gt; 1.8
# # https://docs.djangoproject.com/en/2.2/ref/applications/#troubleshooting
import django
django.setup()

# DJANGO INTEGRATION DONE
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;write-scrapy-project&#34;&gt;write scrapy project&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/scraper/scraper/items.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from scrapy_djangoitem import DjangoItem
from stock_screener.apps.northbound.models import NetFlowStocks, NetFlowConcepts, NetFlowStocksByConcept

class NetFlowStocksItem(DjangoItem):
    django_model = NetFlowStocks


class NetFlowConceptsItem(DjangoItem):
    django_model = NetFlowConcepts


class NetFlowStocksByConceptItem(DjangoItem):
    django_model = NetFlowStocksByConcept
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ stock_screener/apps/scraper/scraper/spiders/northbound.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;create a spider here
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/scraper/scraper/pipelines.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;class NorthboundPipeline(BasePipeline):

    def open_spider(self, spider):
        self.items = []
        self.netflow_concepts = []
        self.netflow_stocks_by_concept = []

    def process_item(self, item, spider):
        self.items.append(item)
        return item

    def close_spider(self, spider):
        try:
            with transaction.atomic():
                NetFlowStocks.objects.all().delete()
                NetFlowConcepts.objects.all().delete()
                NetFlowStocksByConcept.objects.all().delete()
                for item in self.items:
                    item.save()
        except Exception as e:
            spider.logger.error(e)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using-celery-with-django-to-call-scrapy&#34;&gt;Using Celery with Django to call Scrapy&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S docker
$ systemctl start docker &amp;amp;&amp;amp; systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ code /etc/docker/daemon.json
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{
  &amp;quot;storage-driver&amp;quot;: &amp;quot;overlay2&amp;quot;,
  &amp;quot;registry-mirrors&amp;quot; : [
    &amp;quot;http://docker.mirrors.ustc.edu.cn&amp;quot;,
    &amp;quot;http://registry.docker-cn.com&amp;quot;,
    &amp;quot;http://hub-mirror.c.163.com&amp;quot;,
    &amp;quot;http://ovfftd6p.mirror.aliyuncs.com&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ sudo docker run -d -p 6379:6379 redis
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    ...
    &#39;django_celery_results&#39;,
    &#39;django_celery_beat&#39;,
    ...
]

CELERY_BROKER_URL = os.environ.get(&#39;REDIS_URL&#39;, &#39;redis://localhost&#39;)
CELERY_RESULT_BACKEND = &#39;django-db&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python manage.py migrate django_celery_results
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;defines-the-celery-instance&#34;&gt;defines the Celery instance&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ vim stock_screener/celery.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;stock_screener.settings&#39;)
app = Celery(&#39;stock_screener&#39;)
app.config_from_object(&#39;django.conf:settings&#39;, namespace=&#39;CELERY&#39;)


# Solve Django + Celery + Scrapy twisted reactor(ReactorNotRestartable) errors.
app.conf.update(
    worker_max_tasks_per_child=1,
    broker_pool_limit=None
)

app.autodiscover_tasks()

@app.task(bind=True)
def debug_task(self):
    print(&#39;Request: {0!r}&#39;.format(self.request))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/__init__.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;from .celery import app as celery_app

__all__ = (&#39;celery_app&#39;,)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;create-tasks&#34;&gt;create tasks&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/jobs/tasks.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;@shared_task
def scrape_task(spider_name):
    &amp;quot;&amp;quot;&amp;quot;Celery task to scrape website with Scrapy.
    http://doc.scrapy.org/en/latest/topics/practices.html#run-scrapy-from-a-script
    &amp;quot;&amp;quot;&amp;quot;
    configure_logging()
    s = get_project_settings()
    s.update({&#39;LOG_FILE&#39;: &#39;scrapy.log&#39;})
    process = CrawlerProcess(get_project_settings())
    process.crawl(spider_name)
    process.start()
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ vim stock_screener/apps/jobs/views.py
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;@csrf_exempt
@api_view([&#39;POST&#39;])
def scrape_job(request):
    &amp;quot;&amp;quot;&amp;quot;
    Retrieve a scrapy job status, or or create a new scrapy job.
    &amp;quot;&amp;quot;&amp;quot;
    spider_name = request.data.get(&#39;spider_name&#39;)
    if spider_name in spider_names:
        res = scrape_task.delay(spider_name)
        return JsonResponse({&#39;task_id&#39;: res.task_id, &#39;status&#39;: &#39;started&#39;})
    else:
        return JsonResponse({&#39;task_id&#39;: None, &#39;status&#39;: &#39;no found&#39;})
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;starting-the-worker-process&#34;&gt;starting the worker process&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;celery -A stock_screener worker -l info
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ celery -A stock_screener beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;test&#34;&gt;test&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ python manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;curl -X POST \
  http://localhost:8000/jobs/scrape_job/ \
  -H &#39;content-type: application/json&#39; \
  -d &#39;{&amp;quot;spider_name&amp;quot;: &amp;quot;northbound&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ali_oguzhan/how-to-use-scrapy-with-django-application-c16fabd0e62e&#34;&gt;https://medium.com/@ali_oguzhan/how-to-use-scrapy-with-django-application-c16fabd0e62e&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.theodo.com/2019/01/data-scraping-scrapy-django-integration/&#34;&gt;https://blog.theodo.com/2019/01/data-scraping-scrapy-django-integration/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/holgerd77/django-dynamic-scraper&#34;&gt;https://github.com/holgerd77/django-dynamic-scraper&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/snowunnotech/nicetomeetyou&#34;&gt;https://github.com/snowunnotech/nicetomeetyou&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/richardcornish/jobboardscraper&#34;&gt;https://github.com/richardcornish/jobboardscraper&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cmwaura/Newspade&#34;&gt;https://github.com/cmwaura/Newspade&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; Library Management</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/cpp-library-management/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/cpp-library-management/</guid>
      
        <description>&lt;p&gt;In general, you are going to have to end up with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header files in a directory somewhere&lt;/li&gt;
&lt;li&gt;library files (either static libraries, or DLLs/shared objects). If the library is a header-only library like some of the boost libraries, then you won&amp;rsquo;t need this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You get hold of the library files, either by building them on your machine (typical for open source projects, and projects aimed at Linux platforms), or by downloading the pre-compiled binaries (typical for Windows libraries, particularly paid-for).&lt;/p&gt;
&lt;p&gt;When you try to compile with the library, you may need a command line option (eg &lt;code&gt;-I&lt;/code&gt;) to specify the directory containing the header files, and you may need a linker option (eg &lt;code&gt;-l&lt;/code&gt;) to tell the linker to link against your library.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;h3 id=&#34;use-linux-distributions-packaging-system&#34;&gt;Use Linux distribution&amp;rsquo;s packaging system&lt;/h3&gt;
&lt;p&gt;If you are installing the libraries with a package manager, they will probably all end up in the right place. If not you can get the compiler to search for the by providing the an additional search path using the &lt;code&gt;-L &amp;lt;path&amp;gt;&lt;/code&gt; flag. You should be able to pass this extra flag to CMake.&lt;/p&gt;
&lt;h3 id=&#34;build-and-install&#34;&gt;build and install&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;two main options for where to put the library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local&lt;/code&gt; (libraries under &lt;code&gt;/usr/local/lib&lt;/code&gt;, headers under &lt;code&gt;/usr/local/include&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Under your project directory, as you did under Windows. This has the advantages of not requiring root access and not making systemwide changes, but you&amp;rsquo;ll have to update your project&amp;rsquo;s include paths and library paths, and you&amp;rsquo;ll have to put any shared library files someplace where the &lt;a href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man8/ld.so.8.html&#34;&gt;dynamic linker&lt;/a&gt; can find them (using &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; or &lt;code&gt;ld.so.conf&lt;/code&gt; - see the link for more details).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;header-only-library&#34;&gt;header-only library&lt;/h3&gt;
&lt;p&gt;No linking against pre-compiled code is required for header-only library. It can be included directly by&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;boost/numeric/odeint.hpp&amp;gt;
using namespace boost::numeric::odeint;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;In a unix environment for boost you can install it in a path where your compiler looks for headers, or specify the path manually.&lt;/p&gt;
&lt;p&gt;In unix /usr/include or /usr/local/include is the location where the compiler looks for headers.&lt;/p&gt;
&lt;p&gt;While compiling you have to link your project with boost.
For example:
g++ -I /usr/local/boost -lboost_system &lt;!-- raw HTML omitted --&gt;.cpp&lt;/p&gt;
&lt;p&gt;Or, if you are using cmake in your project, there is a findboost option where you can specify which boost headers you want to be included in your project.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/lib/&lt;/code&gt; should be the right folder for this. It is the normal place for keeping shared library files installed manually from source code. If you build a library by running &lt;code&gt;./configure&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, and &lt;code&gt;sudo make install&lt;/code&gt;, it will &lt;em&gt;usually&lt;/em&gt; install there automatically.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;p&gt;Eigen c++ is a header only library: you don&amp;rsquo;t have to install it, you just download it, unzip it and link your code against it.&lt;/p&gt;
&lt;p&gt;For example, if your code is in &lt;code&gt;my_favorite_cpp_folder&lt;/code&gt;, you do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd my_favorite_cpp_folder
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and, assuming your compiler is &lt;code&gt;gcc&lt;/code&gt; and the eigen headers are in&lt;code&gt;/usr/local/include/eigen3/unsupported/&lt;/code&gt; and the name of your source file is &lt;code&gt;my_favorite_cpp_source_file.cpp&lt;/code&gt;, you compile and code and link it to the eigen headers by doing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;g++ -I /usr/local/include/eigen3/ my_favorite_cpp_source_file.cpp -o my_favorite_cpp_source_file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(from your code output posted above, the eigen headers are in &lt;code&gt;/usr/local/include/eigen3/&lt;/code&gt; in your computer)&lt;/p&gt;
&lt;p&gt;Since the header files are in &lt;code&gt;/usr/local/include/&lt;/code&gt; folder you don&amp;rsquo;t need to compile your source-code files against them using &amp;ldquo;&lt;code&gt;g++ -I&lt;/code&gt; &amp;hellip;. .&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;up vote&lt;/a&gt;6&lt;a href=&#34;&#34;&gt;down vote&lt;/a&gt;accepted&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;code&gt;-I&lt;/code&gt; compiler option to point to the 3rd party libraries directory (&lt;code&gt;-I/usr/local/include/ohNet&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;#include &amp;quot;[whatever you need from oHNet].h&amp;quot;&lt;/code&gt; in your header files and compilation units as needed (&lt;strong&gt;Note:&lt;/strong&gt; you might need to put relative prefix pathes for subdirecories in the 3rd party include paths tree here!)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;-L&lt;/code&gt; linker option to specify a path to the 3rd party libs you need (&lt;code&gt;-L/usr/local/lib&lt;/code&gt; probably)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;-l&lt;/code&gt; linker option to specify any concrete 3rd libs you need (&lt;code&gt;-l[oHNet]&lt;/code&gt;probably)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Look in the directories what actually was installed there to figure what to place for &lt;code&gt;[whatever you need from oHNet].h&lt;/code&gt; and &lt;code&gt;[oHNet]&lt;/code&gt;, s.th. like &lt;code&gt;liboHNet.a&lt;/code&gt; for the latter.&lt;/p&gt;
&lt;p&gt;You didn&amp;rsquo;t tag [tag:Eclipse CDT] explicitly here, but go to the Project-&amp;gt;Properties-&amp;gt;C++ Builder-&amp;gt;Settings Dialog and look for C/C++ Includes and Linker Options.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;configuring-ms-visual-c-to-use-external-libraries&#34;&gt;Configuring MS Visual C++ to use external libraries&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;decompress file and then have the binary part of the Boost library built.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up the include directory&lt;/p&gt;
&lt;p&gt;This is the directory that contains the header files (&lt;em&gt;.h/hpp&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikibooks/en/c/ce/Visual_studio_includedirectories.png&#34; alt=&#34;include directories&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up the library directory&lt;/p&gt;
&lt;p&gt;This is the directory that contains the pre-compiled library files (&lt;em&gt;.lib&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikibooks/en/0/01/Visual_studio_librarydirectories.png&#34; alt=&#34;library directories&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Library files&lt;/p&gt;
&lt;p&gt;Enter library filenames in &lt;em&gt;additional dependencies&lt;/em&gt; for the libraries to use, if your compiler or the library don&amp;rsquo;t supports auto-linking.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikibooks/en/0/08/Visual_studio_additionaldependencies.png&#34; alt=&#34;library filenames (the Boost &amp;ldquo;REGEXP&amp;rdquo;-library in this example)&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic libraries&lt;/p&gt;
&lt;p&gt;In case of dynamically loaded (.dll) libraries, one also has to place the DLL-files either in the same folder as the executable, or in the system PATH.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run-time library&lt;/p&gt;
&lt;p&gt;The libraries also have to be compiled with the same run-time library as the one used in your project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikibooks/en/3/35/Visual_studio_runtimelibrary.png&#34; alt=&#34;selection of run-time library&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/tjq980303/article/details/54585369&#34;&gt;https://blog.csdn.net/tjq980303/article/details/54585369&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techoverflow.net/2013/03/15/simple-c-http-download-using-libcurl-easy-api/&#34;&gt;https://techoverflow.net/2013/03/15/simple-c-http-download-using-libcurl-easy-api/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vcpkg&#34;&gt;vcpkg&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/Microsoft/vcpkg&#34;&gt;Microsoft/vcpkg: VC++ Packaging Tool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//blogs.msdn.microsoft.com/vcblog/category/vcpkg/&#34;&gt;Visual C++ Team Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/47331502&#34;&gt;https://www.zhihu.com/question/47331502&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/263416411&#34;&gt;https://www.zhihu.com/question/263416411&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;qt&#34;&gt;QT&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://doc.qt.io/qtcreator/creator-project-qmake-libraries.html&#34;&gt;http://doc.qt.io/qtcreator/creator-project-qmake-libraries.html&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>libcurl</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/curl/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/curl/</guid>
      
        <description>&lt;pre&gt;&lt;code&gt;#include &amp;lt;curl/curl.h&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When using an external library you must &lt;em&gt;link&lt;/em&gt; with it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ g++ main.cpp -lcurl
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; 3rd party libraries</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/3rd-libraries/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/3rd-libraries/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;grpc/libevent/libev/libasio&lt;/p&gt;
&lt;p&gt;实现高性能网络服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protobuf&lt;/p&gt;
&lt;p&gt;数据结构序列化/反序列化，方便数据交换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LevelDB/RocksDB&lt;/p&gt;
&lt;p&gt;嵌入式KV数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;snappy/zlib/lz4&lt;/p&gt;
&lt;p&gt;数据压缩，解压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jemalloc/tcmalloc&lt;/p&gt;
&lt;p&gt;高效内存分配器，尤其多线程场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jerasure&lt;/p&gt;
&lt;p&gt;Reed Solomon编解码，给存储系统实现erasure code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;murmurhash…&lt;/p&gt;
&lt;p&gt;实现hash摘要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crc32&lt;/p&gt;
&lt;p&gt;数据存储或传输时的数据校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cJSON&lt;/p&gt;
&lt;p&gt;解析json格式配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libBSON&lt;/p&gt;
&lt;p&gt;JSON序列化/反序列化，MongoDB使用这种格式存储数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boost&lt;/p&gt;
&lt;p&gt;功能丰富的C++基础库，轻度使用，C++11/14后基本不用了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libRedis  redis是一个数据库服务，并不是单独的库，但其代码精简，质量非常高，里面很多代码都可以拿出来直接复用，比如网络，各种数据结构的实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;zlib&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;li&gt;opencv&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;GNU Scientific Library (numerical computing)&lt;/li&gt;
&lt;li&gt;NLopt (nonlinear optimization)&lt;/li&gt;
&lt;li&gt;OpenMP、OpenMPI&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;泛用库Boost，界面库Qt，通信库ZeroMQ，视觉库OpenCV，并发库tbb，深度学习Caffe，序列化Protobuf ，加上一些cppformat之类的小库&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;tinyxml, tinydnn&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;gtest, glog, gflags,  protobuf, grpc&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;libc++和libstdc++&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;\1. I/O框架库libevent&lt;/p&gt;
&lt;p&gt;\2. 二进制序列化库protobuf&lt;/p&gt;
&lt;p&gt;\3. boost库的asio和shared_ptr（不过后者已经在C++11里包括了）&lt;/p&gt;
&lt;p&gt;\4. 日志系统Log4cXX&lt;/p&gt;
&lt;p&gt;\5. XML解析库tinyXML&lt;/p&gt;
&lt;p&gt;\6. json解析库jsoncpp&lt;/p&gt;
&lt;p&gt;\7. 小巧的关系型数据库SQLite&lt;/p&gt;
&lt;p&gt;\8. key-value的Redis&lt;/p&gt;
&lt;p&gt;\9. 计算机视觉库opencv&lt;/p&gt;
&lt;p&gt;\10. 数学公式解析库muparserX系列&lt;/p&gt;
&lt;p&gt;\11. google的kv数据库leveldb，源码很适合学习&lt;/p&gt;
&lt;p&gt;\12. 可以做深度学习封装了socket封装了pthread等一大堆功能的dlib，很爽。&lt;/p&gt;
&lt;p&gt;\13.  深度学习库caffe，现在想到的就有这些，以后补充。。。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;cpp-netlib&lt;/p&gt;
&lt;p&gt;如果你要练手，以熟悉 HTTP + SSL 协议的话，推荐看看这个：
&lt;a href=&#34;https://www.boost.org/doc/libs/1_47_0/doc/html/boost_asio/example/ssl/server.cpp&#34;&gt;doc/html/boost_asio/example/ssl/server.cpp&lt;/a&gt;
&lt;a href=&#34;https://www.boost.org/doc/libs/1_47_0/doc/html/boost_asio/example/ssl/client.cpp&#34;&gt;doc/html/boost_asio/example/ssl/client.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你要具体用到实际项目中，强烈不建议自己造轮子，因为光 HTTP/1.0，HTTP/1.1，HTTP/2 就要自己解析协议搞半天，加上 SSL 就更复杂了，在你徒手解析协议的时候，其他人的产品都上线了。推荐以下库：&lt;/p&gt;
&lt;p&gt;curlpp：libcurl 的 C++ 封装 &lt;a href=&#34;https%3A//github.com/datacratic/curlpp&#34;&gt;GitHub - datacratic/curlpp: C++ bindings for cURL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cpp-netlib：基于 boost.asio 的一个网络库 &lt;a href=&#34;http%3A//cpp-netlib.org/&#34;&gt;cpp-netlib: The C++ Network Library&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;GNU Scientific Library (numerical computing)&lt;/li&gt;
&lt;li&gt;NLopt (nonlinear optimization)&lt;/li&gt;
&lt;li&gt;OpenMP、OpenMPI&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>jsoncpp</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/jsoncpp/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/jsoncpp/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>CMake</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/cmake/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/cmake/</guid>
      
        <description>&lt;p&gt;如果工程存在多个目录,需要确保每个要管理的目录都存在一个
CMakeLists.txt．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Set a name, version, and enable languages for the entire project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;project(&amp;lt;PROJECT-NAME&amp;gt; [LANGUAGES] [&amp;lt;language-name&amp;gt;...])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sets the name of the project and stores the name in the &lt;code&gt;PROJECT_NAME &lt;/code&gt;variable. Additionally this sets variables　&lt;code&gt;PROJECT_SOURCE_DIR&lt;/code&gt;,   &lt;code&gt;PROJECT_BINARY_DIR&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signatures of this command that specify a &lt;code&gt;&amp;lt;value&amp;gt;...&lt;/code&gt; placeholder expect zero or more arguments. Multiple arguments will be joined as a &lt;code&gt;;-list&lt;/code&gt; to form the actual variable value to be set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set(&amp;lt;variable&amp;gt; &amp;lt;value&amp;gt;... CACHE &amp;lt;type&amp;gt; &amp;lt;docstring&amp;gt; [FORCE])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在哪里&lt;code&gt;add_executable&lt;/code&gt; 或&lt;code&gt;add_library&lt;/code&gt;，需要改变目标存放路径则在哪个层级的&lt;code&gt;CMakeLists.txt&lt;/code&gt;加．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display a message to the user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;message([&amp;lt;mode&amp;gt;] &amp;quot;message to display&amp;quot; ...)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an executable target called &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; to be built from the specified source files. The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; corresponds to the logical target name and must be globally unique within a project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_executable(&amp;lt;name&amp;gt; [WIN32] [MACOSX_BUNDLE]
               [EXCLUDE_FROM_ALL]
               [source1] [source2 ...])
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a subdirectory to the build. The &lt;code&gt;source_dir&lt;/code&gt; specifies the directory in which the source &lt;code&gt;CMakeLists.txt&lt;/code&gt; and code files are located. If it is a relative path it will be evaluated with respect to the current directory. The &lt;code&gt;binary_dir&lt;/code&gt;specifies the directory in which to place the output files. If it is a relative path it will be evaluated with respect to the current output directory, but it may also be an absolute path. If &lt;code&gt;binary_dir&lt;/code&gt; is not specified, the value of &lt;code&gt;source_dir&lt;/code&gt; will be used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_subdirectory(source_dir [binary_dir]
                 [EXCLUDE_FROM_ALL])
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installing Targets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(TARGETS targets... [EXPORT &amp;lt;export-name&amp;gt;]
        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|
          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]
         [DESTINATION &amp;lt;dir&amp;gt;]
         [PERMISSIONS permissions...]
         [CONFIGURATIONS [Debug|Release|...]]
         [COMPONENT &amp;lt;component&amp;gt;]
         [OPTIONAL] [EXCLUDE_FROM_ALL]
         [NAMELINK_ONLY|NAMELINK_SKIP]
        ] [...]
        [INCLUDES DESTINATION [&amp;lt;dir&amp;gt; ...]]
        )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(TARGETS myExe mySharedLib myStaticLib
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib/static)
install(TARGETS mySharedLib DESTINATION /some/full/path)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;install &lt;code&gt;myExe&lt;/code&gt; to &lt;code&gt;&amp;lt;prefix&amp;gt;/bin&lt;/code&gt; and &lt;code&gt;myStaticLib&lt;/code&gt; to &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/static&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On non-DLL platforms &lt;code&gt;mySharedLib&lt;/code&gt; will be installed to &lt;code&gt;&amp;lt;prefix&amp;gt;/lib&lt;/code&gt; and &lt;code&gt;/some/full/path&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installing Files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(&amp;lt;FILES|PROGRAMS&amp;gt; files... DESTINATION &amp;lt;dir&amp;gt;
        [PERMISSIONS permissions...]
        [CONFIGURATIONS [Debug|Release|...]]
        [COMPONENT &amp;lt;component&amp;gt;]
        [RENAME &amp;lt;name&amp;gt;] [OPTIONAL] [EXCLUDE_FROM_ALL])
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installing Directories&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(DIRECTORY dirs... DESTINATION &amp;lt;dir&amp;gt;
        [FILE_PERMISSIONS permissions...]
        [DIRECTORY_PERMISSIONS permissions...]
        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]
        [CONFIGURATIONS [Debug|Release|...]]
        [COMPONENT &amp;lt;component&amp;gt;] [EXCLUDE_FROM_ALL]
        [FILES_MATCHING]
        [[PATTERN &amp;lt;pattern&amp;gt; | REGEX &amp;lt;regex&amp;gt;]
         [EXCLUDE] [PERMISSIONS permissions...]] [...])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The last component of each directory name is appended to the destination directory but a &lt;strong&gt;trailing slash&lt;/strong&gt; may be used to avoid this because it leaves the last component empty.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FILE_PERMISSIONS&lt;/code&gt; and DIRECTORY_PERMISSIONS options specify permissions given to files and directories in the destination.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;PATTERN&lt;/code&gt; or &lt;code&gt;REGEX&lt;/code&gt; options  “match” options specify a globbing pattern or regular expression to match directories or files encountered within input directories.&lt;/p&gt;
&lt;p&gt;For example the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(DIRECTORY src/ DESTINATION include/myproj
        FILES_MATCHING PATTERN &amp;quot;*.h&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will extract and install header files from a source tree.&lt;/p&gt;
&lt;p&gt;For example the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(DIRECTORY icons scripts/ DESTINATION share/myproj
        PATTERN &amp;quot;CVS&amp;quot; EXCLUDE
        PATTERN &amp;quot;scripts/*&amp;quot;
        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                    GROUP_EXECUTE GROUP_READ)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will install the &lt;code&gt;icons&lt;/code&gt; directory to &lt;code&gt;share/myproj/icons&lt;/code&gt; and the files in the&lt;code&gt;scripts&lt;/code&gt; directory to &lt;code&gt;share/myproj&lt;/code&gt;. The icons will get default file permissions, the scripts will be given specific permissions, and any &lt;code&gt;CVS&lt;/code&gt;directories will be excluded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;SCRIPT&lt;/code&gt; form will invoke the given CMake script files during installation.  The &lt;code&gt;CODE&lt;/code&gt; form will invoke the given CMake code during installation. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install([[SCRIPT &amp;lt;file&amp;gt;] [CODE &amp;lt;code&amp;gt;]]
        [COMPONENT &amp;lt;component&amp;gt;] [EXCLUDE_FROM_ALL] [...])
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adds a library target called &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; to be built from the source files listed in the command invocation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;add_library(&amp;lt;name&amp;gt; [STATIC | SHARED | MODULE]
            [EXCLUDE_FROM_ALL]
            [source1] [source2 ...])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; corresponds to the logical target name and must be globally unique within a project.&lt;/p&gt;
&lt;p&gt;The actual file name of the library built is constructed based on conventions of the native platform (such as &lt;code&gt;lib&amp;lt;name&amp;gt;.a&lt;/code&gt; or &lt;code&gt;&amp;lt;name&amp;gt;.lib&lt;/code&gt;).&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;
&lt;p&gt;Targets can have properties that affect how they are built. Set properties on a target. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set_target_properties(target1 target2 ...
                      PROPERTIES prop1 value1
                      prop2 value2 ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;using &lt;code&gt;add_library&lt;/code&gt;, &lt;code&gt;set_target_propertie&lt;/code&gt; to build shared and static library with the same name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_library(hello SHARED ${LIBHELLO_SRC})
add_library(hello_static STATIC ${LIBHELLO_SRC})
    
set_target_properties(hello_static PROPERTIES OUTPUT_NAME &amp;quot;hello&amp;quot;)
    
set_target_properties(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)
set_target_properties(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
    
set_target_properties(hello PROPERTIES VERSION 1.2 SOVERSION 1)
set_target_properties(hello_static PROPERTIES VERSION 1.2 SOVERSION 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install headers files and shared, static library to system directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install(TARGETS hello hello_static
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)
    
install(FILES hello.h DESTINATION include/hello)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- Installing: /usr/local/lib/libhello.so.1.2
-- Installing: /usr/local/lib/libhello.so.1
-- Installing: /usr/local/lib/libhello.so
-- Installing: /usr/local/lib/libhello.a
-- Installing: /usr/local/include/hello/hello.h
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;include header files directories and Link to external library&lt;/p&gt;
&lt;p&gt;Add the given directories to those the compiler uses to search for include files, such as header files. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default the directories specified are appended onto the current list of directories. This default behavior can be changed by setting &lt;code&gt;CMAKE_INCLUDE_DIRECTORIES_BEFORE&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt;. By using &lt;code&gt;AFTER&lt;/code&gt; or &lt;code&gt;BEFORE&lt;/code&gt;explicitly, you can select between appending and prepending, independent of the default.&lt;/p&gt;
&lt;p&gt;Specify directories in which the linker will look for libraries.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;link_directories(directory1 directory2 ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that this command is rarely necessary. Library locations returned by &lt;code&gt;find_package()&lt;/code&gt; and &lt;code&gt;find_library()&lt;/code&gt; are absolute paths. Pass these absolute library file paths directly to the &lt;code&gt;target_link_libraries()&lt;/code&gt; command. CMake will ensure the linker finds them.&lt;/p&gt;
&lt;p&gt;Specify libraries or flags to use when linking a given target and/or its dependents.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;target_link_libraries(&amp;lt;target&amp;gt; ... &amp;lt;item&amp;gt;... ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The named &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; must have been created in the current directory by a command such as &lt;code&gt;add_executable()&lt;/code&gt; or &lt;code&gt;add_library()&lt;/code&gt; and must not be an &lt;code&gt;ALIAS&lt;/code&gt; target.&lt;/p&gt;
&lt;p&gt;Each &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; may be: a library target name; &lt;strong&gt;a full path to a library file&lt;/strong&gt;; a debug, optimized, or general keyword immediately followed by another &lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include_directories(/usr/local/include/hello)
    
target_link_libraries(main /usr/local/lib/libhello.so)
# target_link_libraries(main /usr/local/lib/libhello.a)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finds and loads &lt;strong&gt;settings&lt;/strong&gt; from an external project. &lt;code&gt;&amp;lt;package&amp;gt;_FOUND&lt;/code&gt; will be set to indicate whether the package was found.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find_package(&amp;lt;package&amp;gt; [version] [EXACT] [QUIET] [MODULE]
             [REQUIRED] [[COMPONENTS] [components...]]
             [OPTIONAL_COMPONENTS components...]
             [NO_POLICY_SCOPE])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;REQUIRED&lt;/code&gt; option stops processing with an error message if the package cannot be found.&lt;/p&gt;
&lt;p&gt;The command has two modes by which it searches for packages: “Module” mode and “Config” mode.&lt;/p&gt;
&lt;p&gt;CMake searches for a file called &lt;code&gt;Find&amp;lt;package&amp;gt;.cmake&lt;/code&gt; in the &lt;code&gt;CMAKE_MODULE_PATH&lt;/code&gt; followed by the CMake installation in module mode. If no module is found and the &lt;code&gt;MODULE&lt;/code&gt; option is not given the command proceeds to Config mode. The &lt;code&gt;CONFIG&lt;/code&gt; option may be used to skip Module mode explicitly and switch to Config mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This command is used to find a library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find_library (&amp;lt;VAR&amp;gt; name1 [path1 path2 ...])
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; tools</title>
      <link>http://csyezheng.github.io/post/programming-languages/cpp/tools/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/cpp/tools/</guid>
      
        <description>&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;clang-format&lt;/p&gt;
&lt;p&gt;格式化c++代码，同类工具还有astyle。保持代码风格统一是个好习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qt creator&lt;/p&gt;
&lt;p&gt;vs以外我觉得最好用的c++ ide，代码补全质量高（基于libclang），有valgrind支持、vim插件，支持ninja，够用。写qt程序拖控件也蛮爽的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strace大法好
pstack大法好
gdb大法好
ddd大法好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;valgrind大法好&lt;/p&gt;
&lt;p&gt;这是个强大的工具，可以检测C/C++中的各种内存问题。&lt;/p&gt;
&lt;p&gt;cmake大法好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;emacs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kate（KDE下一个功能强大的编辑器）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eclipse+cdt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qt cteator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clang&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Purify&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Valgrind工具集(包括剖析工具Callgrind和线程分析工具Helgrind等)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KCachegrind&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gprof开源剖析工具，通常作为gcc编译器的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quantify是IBM的一个功能强大的商业剖析工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;google cpplint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cppcheck&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Posix Threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MPI(Message Passing Interface)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MapReduce（并行计算框架）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nm 列出来自对象文件的符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;objdump 显示对象文件信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strings 列出二进制文件中可输出的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strip 删除来自对象文件的符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;m4 宏处理程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indent 代码格式化工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;time 计时工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ps 显示运行进程的当前状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;top 给出系统的详细信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strace 记录对操作系统的所有访问，例如内存分配、文件I/O、系统调用和子进程的启动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用cpplint，cppchecker等工具检查&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我呆过的公司都是跨平台做的，我自己的project也跨平台了。基本上是Windows下开发。Linux上我一般用Code::Blocks，因为是CMake工程。在公司里面Linux上有问题，就交给懂的人去做就好了。不过我是觉得，Linux下，还是要以GDB为主的。另外像Valgrind这样的好使的家伙一定要多用。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>DevOps</title>
      <link>http://csyezheng.github.io/post/devops/devops/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/devops/devops/</guid>
      
        <description>&lt;h2 id=&#34;what-is-devops&#34;&gt;What is DevOps?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; (a clipped compound of &amp;ldquo;&lt;strong&gt;development&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;&lt;strong&gt;operations&lt;/strong&gt;&amp;quot;) is a software engineering culture and practice that aims at unifying software development (Dev) and software operation (Ops). The main characteristic of the DevOps movement is to strongly advocate &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;monitoring&lt;/strong&gt; at all steps of software construction, from &lt;strong&gt;integration&lt;/strong&gt;, &lt;strong&gt;testing&lt;/strong&gt;, &lt;strong&gt;releasing&lt;/strong&gt; to deployment and &lt;strong&gt;infrastructure management&lt;/strong&gt;. DevOps aims at &lt;strong&gt;shorter development cycles, increased deployment frequency, and more dependable releases&lt;/strong&gt;, in close alignment with business objectives.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d1.awsstatic.com/product-marketing/DevOps/DevOps_feedback-diagram.ff668bfc299abada00b2dcbdc9ce2389bd3dce3f.png&#34; alt=&#34;ä&#34;ä¹æ¯ DevOpsï¼&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-benefits-of-devops&#34;&gt;The benefits of DevOps&lt;/h2&gt;
&lt;p&gt;微服务和持续交付能够让团队充分掌控服务，然后更快速地发布更新。&lt;/p&gt;
&lt;p&gt;持续集成和持续交付是自动执行软件发布流程（从构建到部署）的两项实践经验。&lt;/p&gt;
&lt;p&gt;进行监控和记录实践经验能够了解当前的性能。&lt;/p&gt;
&lt;p&gt;基础设施即代码能够帮助您以一种可重复且更有效的方式来管理部署、测试和生产环境。&lt;/p&gt;
&lt;h2 id=&#34;devops-实践说明&#34;&gt;DevOps 实践说明&lt;/h2&gt;
&lt;p&gt;其中一个基本实践经验就是要频繁地进行小规模更新。频繁的小规模更新能够降低每次部署的风险。它们可以帮助团队更快速地处理错误，因为团队能够确定引发错误的最近一次部署。&lt;/p&gt;
&lt;p&gt;使用微服务架构来提升应用程序的灵活性，从而加快创新步伐。微服务架构将大型的复杂系统拆分为简单的独立项目。应用程序被拆分为许多单个组件（服务），每个服务限定到单个目的或功能，这些服务既可以与其同级服务相互独立运行，也可以与应用程序一起作为整体运行。这种架构降低了更新应用程序的协调开销，&lt;/p&gt;
&lt;p&gt;微服务与较高的发布频率相结合会导致部署量大幅度增加，可能会带来运营挑战。因此，持续集成和持续交付等 DevOps 实践经验有助于解决这些问题，让组织能够以安全可靠的方式快速交付。与基础设施即代码和配置管理一样，基础设施自动化实践经验也有助于维持计算资源的弹性和对频繁变更的适应性。此外，进行监控和记录这一实践经验可帮助工程师追踪应用程序和基础设施的性能，以便他们快速应对出现的问题。&lt;/p&gt;
&lt;h2 id=&#34;devops-实践经验&#34;&gt;DevOps 实践经验&lt;/h2&gt;
&lt;p&gt;以下列举了一些 DevOps 最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#integration&#34;&gt;持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#cd&#34;&gt;持续交付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#microservices&#34;&gt;微服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#iac&#34;&gt;基础设施即代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#monitoring&#34;&gt;监控和日志记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/#communication&#34;&gt;沟通与合作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;https://en.wikipedia.org/wiki/DevOps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://aws.amazon.com/cn/devops/what-is-devops/&#34;&gt;https://aws.amazon.com/cn/devops/what-is-devops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/learn/what-is-devops#references&#34;&gt;https://docs.microsoft.com/en-us/azure/devops/learn/what-is-devops#references&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubernetes Basics</title>
      <link>http://csyezheng.github.io/post/devops/kubernetes/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/devops/kubernetes/</guid>
      
        <description>&lt;h2 id=&#34;using-minikube-to-create-a-cluster&#34;&gt;Using Minikube to Create a Cluster&lt;/h2&gt;
&lt;h3 id=&#34;kubernetes-clusters&#34;&gt;Kubernetes Clusters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes coordinates a highly available cluster of computers that are connected to work as a single unit.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;applications need to be packaged in a way that decouples them from individual hosts: they need to be &lt;strong&gt;containerized&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes automates the distribution and scheduling of application containers across a cluster in a more efficient way.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Kubernetes cluster consists of two types of resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Master&lt;/strong&gt; coordinates the cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nodes&lt;/strong&gt; are the &lt;strong&gt;workers&lt;/strong&gt; that run applications. A node is a VM or a physical computer that serves as a &lt;strong&gt;worker&lt;/strong&gt; machine in a Kubernetes cluster. Each node has a &lt;strong&gt;Kubelet&lt;/strong&gt;, which is an agent for managing the node and communicating with the Kubernetes master. The node should also have tools for handling container operations, such as &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/99d9808dcbf2880a996ed50d308a186b5900cec9/40b94/docs/tutorials/kubernetes-basics/public/images/module_01_cluster.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minikube&lt;/strong&gt; is a lightweight Kubernetes implementation that creates a VM on your local machine and deploys a simple cluster containing only one node.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ minikube version
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# Running Kubernetes cluster 
$ minikube start
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ kubectl version
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# view the cluster details
$ kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# view the nodes that can be used to host our applications in the cluster
$ kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using-kubectl-to-deploy-an-app&#34;&gt;Using kubectl to deploy an App&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve created a Deployment, the Kubernetes master schedules mentioned application instances onto individual Nodes in the cluster.&lt;/p&gt;
&lt;p&gt;Once the application instances are created, a Kubernetes Deployment Controller continuously monitors those instances.&lt;/p&gt;
&lt;h2 id=&#34;explore-your-app-viewing-pods-and-nodes&#34;&gt;Explore Your App (Viewing Pods and Nodes)&lt;/h2&gt;
&lt;h2 id=&#34;using-a-service-to-expose-your-app&#34;&gt;Using a Service to Expose Your App&lt;/h2&gt;
&lt;h2 id=&#34;scale-your-app&#34;&gt;Scale Your App&lt;/h2&gt;
&lt;h2 id=&#34;performing-a-rolling-update&#34;&gt;Performing a Rolling Update&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>Django oauth2 provider</title>
      <link>http://csyezheng.github.io/post/back-end/oauth2/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/back-end/oauth2/</guid>
      
        <description>&lt;h2 id=&#34;django-oauth2-provider&#34;&gt;Django oauth2 provider&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ pip install django-oauth2-provider
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# settings.py

INSTALLED_APPS = (
    # ...
    &#39;provider&#39;,
    &#39;provider.oauth2&#39;,
)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# urls.py

url(r&#39;^oauth2/&#39;, include(&#39;provider.oauth2.urls&#39;, namespace = &#39;oauth2&#39;)),
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ python manage.py syncdb
$ python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;how-to-request-an-access-token-for-the-first-time-&#34;&gt;How to request an access token for the first time ?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a client entry in your database&lt;/p&gt;
&lt;p&gt;To find out which type of &lt;code&gt;client&lt;/code&gt; you need to create, read &lt;a href=&#34;http://tools.ietf.org/html/rfc6749#section-2.1&#34;&gt;Section 2.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To create a new entry simply use the Django admin panel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request an access token&lt;/p&gt;
&lt;p&gt;Your client needs to submit a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/oauth2/access_token&lt;/code&gt; including the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;client_id&lt;/code&gt; - The client ID you’ve configured in the Django admin.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_secret&lt;/code&gt; - The client secret configured in the Django admin.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; - The username with which you want to log in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; - The password corresponding to the user you’re logging in with.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X POST -d &amp;quot;client_id=YOUR_CLIENT_ID&amp;amp;client_secret=YOUR_CLIENT_SECRET&amp;amp;grant_type=password&amp;amp;username=YOUR_USERNAME&amp;amp;password=YOUR_PASSWORD&amp;quot; http://localhost:8000/oauth2/access_token/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;access_token&amp;quot;: &amp;quot;&amp;lt;your-access-token&amp;gt;&amp;quot;, &amp;quot;scope&amp;quot;: &amp;quot;read&amp;quot;, &amp;quot;expires_in&amp;quot;: 86399, &amp;quot;refresh_token&amp;quot;: &amp;quot;&amp;lt;your-refresh-token&amp;gt;&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This particular way of obtaining an access token is called a &lt;strong&gt;Password Grant&lt;/strong&gt;. All the other ways of acquiring an access token are outlined in &lt;a href=&#34;http://tools.ietf.org/html/rfc6749#section-4&#34;&gt;Section 4&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;example-between-catalogdiscoveryhttpsgithubcomedxcourse-discovery-and-lmshttpsgithubcomedxedx-platform&#34;&gt;Example between &lt;a href=&#34;https://github.com/edx/course-discovery&#34;&gt;Catalog/Discovery&lt;/a&gt; and &lt;a href=&#34;https://github.com/edx/edx-platform&#34;&gt;LMS&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18381/api-auth/login/?next=/api/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query String Parameters: &lt;code&gt;next: /api/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18381/login/edx-oidc/?next=/api/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query String Parameters: &lt;code&gt;next: /api/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/oauth2/authorize/?redirect_uri=http://localhost:18381/complete/edx-oidc/&amp;amp;client_id=discovery-key&amp;amp;scope=openid+profile+email+permissions&amp;amp;response_type=code&amp;amp;state=W7KfXvcIA9Zg2DRRIWADlGDIY86gTt4x&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query String Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redirect_uri:  &lt;code&gt;http://localhost:18381/complete/edx-oidc/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client_id:  &lt;code&gt;discovery-key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;scope:  &lt;code&gt;openid profile email permissions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;response_type:  &lt;code&gt;code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;state:  &lt;code&gt;W7KfXvcIA9Zg2DRRIWADlGDIY86gTt4x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code: &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/oauth2/authorize/confirm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/login?next=/oauth2/authorize/confirm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query String Parameters: &lt;code&gt;/oauth2/authorize/confirm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/login_ajax&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Form Data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email:  &lt;code&gt;edx@example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;password:  &lt;code&gt;edx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Request Method:  &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Response Headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie:  &lt;code&gt;edxloggedin=true; Path=/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/oauth2/authorize/confirm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18000/oauth2/redirect&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Response Headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie:  &lt;code&gt;sessionid=&amp;quot;1|trhqixsrnzyoguusyir2i4frlptzngv3|SaOdjRQ7ARrj|ImJkZmQ5YTQ2YTcwYzBjNWZhZmI4MTMxZmE3MzM4MDA2MDMyM2M2NjJjNWU4YTZhY2Y5NzdkNjgxMjJmOWQwNWUi:1feKh1:OfZiGoeNnqqzbnbv0cqWgBnAvhk&amp;quot;; httponly; Path=/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18381/complete/edx-oidc/?state=W7KfXvcIA9Zg2DRRIWADlGDIY86gTt4x&amp;amp;code=7ab4b799ee2a6abe7e0f81affed2c69e1da96e02&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query String Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state:  &lt;code&gt;W7KfXvcIA9Zg2DRRIWADlGDIY86gTt4x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;code:  &lt;code&gt;7ab4b799ee2a6abe7e0f81affed2c69e1da96e02&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cookie:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;course_discovery_sessionid=z847akheu4f11guh1nyc230f2xrr8omx; sessionid=&amp;quot;1|trhqixsrnzyoguusyir2i4frlptzngv3|SaOdjRQ7ARrj|ImJkZmQ5YTQ2YTcwYzBjNWZhZmI4MTMxZmE3MzM4MDA2MDMyM2M2NjJjNWU4YTZhY2Y5NzdkNjgxMjJmOWQwNWUi:1feKh1:OfZiGoeNnqqzbnbv0cqWgBnAvhk&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Status Code:  &lt;code&gt;302 Found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Response Headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie:  &lt;code&gt;course_discovery_sessionid=vkas33o90yjc3hn4s2ctdjp1uwfb9hrg; expires=Sat, 28-Jul-2018 13:34:35 GMT; HttpOnly; Max-Age=1209600; Path=/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request URL:  &lt;code&gt;http://localhost:18381/api/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Method:  &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request Headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cookie:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sessionid=&amp;quot;1|trhqixsrnzyoguusyir2i4frlptzngv3|SaOdjRQ7ARrj|ImJkZmQ5YTQ2YTcwYzBjNWZhZmI4MTMxZmE3MzM4MDA2MDMyM2M2NjJjNWU4YTZhY2Y5NzdkNjgxMjJmOWQwNWUi:1feKh1:OfZiGoeNnqqzbnbv0cqWgBnAvhk&amp;quot;; course_discovery_csrftoken=3lenIcj4HaGcbde57PLf46bgngeP42GFKaENxvopwVwux0NbvlH3Xypic6dKYXGw; course_discovery_sessionid=vkas33o90yjc3hn4s2ctdjp1uwfb9hrg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Status Code:  &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;oauth-dispatch-app-oauth2-provider-interfacehttpsgithubcomedxedx-platformtreemasteropenedxcoredjangoappsoauth_dispatchdocs&#34;&gt;&lt;a href=&#34;https://github.com/edx/edx-platform/tree/master/openedx/core/djangoapps/oauth_dispatch/docs&#34;&gt;OAuth Dispatch App (OAuth2 Provider Interface)&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;provider-code&#34;&gt;Provider code&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/edx/edx-platform/tree/master/openedx/core/djangoapps/oauth_dispatch&#34;&gt;oauth_dispatch&lt;/a&gt; app provides the top-most entry points to the OAuth2 Provider views.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its &lt;a href=&#34;https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/dot_overrides/validators.py&#34;&gt;validator module&lt;/a&gt; ensures Restricted Applications only receive expired tokens.&lt;/li&gt;
&lt;li&gt;Its &lt;a href=&#34;https://github.com/edx/edx-platform/blob/d21a09828072504bc97a2e05883c1241e3a35da9/openedx/core/djangoapps/oauth_dispatch/views.py#L89&#34;&gt;Access Token View&lt;/a&gt; returns JWTs as access tokens when a JWT token_type is requested.&lt;/li&gt;
&lt;li&gt;It uses an edX custom &lt;a href=&#34;https://github.com/edx/edx-platform/blob/d21a09828072504bc97a2e05883c1241e3a35da9/openedx/core/lib/token_utils.py#L15&#34;&gt;JwtBuilder&lt;/a&gt; implementation to create the JWT.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/edx/edx-platform/blob/d21a09828072504bc97a2e05883c1241e3a35da9/openedx/core/lib/token_utils.py#L15&#34;&gt;JwtBuilder&lt;/a&gt; uses the &lt;a href=&#34;https://github.com/IdentityPython/pyjwkest&#34;&gt;pyjwkest&lt;/a&gt; library for implementation of &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41&#34;&gt;JSON Web Signature (JWS)&lt;/a&gt; and other crypto to build and sign JWT tokens.&lt;/p&gt;
&lt;h3 id=&#34;clients--rest-api-clients-code&#34;&gt;Clients &amp;amp; REST API Clients code&lt;/h3&gt;
&lt;p&gt;edX services, including LMS, use the&lt;/p&gt;
&lt;p&gt;edx-rest-api-client&lt;/p&gt;
&lt;p&gt;library to make OAuth2 client requests and REST API calls.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built on top of &lt;a href=&#34;https://github.com/samgiles/slumber&#34;&gt;slumber&lt;/a&gt;, the &lt;a href=&#34;https://github.com/edx/edx-rest-api-client&#34;&gt;edx-rest-api-client&lt;/a&gt; provides a utility to retrieve an access token from the LMS. Its &lt;a href=&#34;https://github.com/edx/edx-rest-api-client/blob/master/edx_rest_api_client/auth.py&#34;&gt;Auth&lt;/a&gt; classes create appropriate HTTP Authorization headers with &lt;em&gt;Bearer&lt;/em&gt; or &lt;em&gt;JWT&lt;/em&gt; insertions as needed.&lt;/li&gt;
&lt;li&gt;It makes use of the &lt;a href=&#34;https://github.com/jpadilla/pyjwt&#34;&gt;PyJWT&lt;/a&gt; library for cryptographically creating JWT tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Creation of JWT tokens in our system should only be done by the OAuth Provider. This will break once we use &lt;em&gt;asymmetric&lt;/em&gt; signing keys, for which remote services will not have the private keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;authentication-by-rest-endpoints&#34;&gt;Authentication by REST endpoints&lt;/h3&gt;
&lt;p&gt;edX REST endpoints that support JWTs as access tokens declare the custom edX&lt;/p&gt;
&lt;p&gt;JwtAuthentication&lt;/p&gt;
&lt;p&gt;class in its DRF&lt;/p&gt;
&lt;p&gt;authentication_classes&lt;/p&gt;
&lt;p&gt;scheme.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/authentication.py#L153&#34;&gt;JwtAuthentication&lt;/a&gt; is implemented in the &lt;a href=&#34;https://github.com/edx/edx-drf-extensions&#34;&gt;edx-drf-extensions&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/authentication.py#L153&#34;&gt;JwtAuthentication&lt;/a&gt; extends the &lt;a href=&#34;https://github.com/GetBlimp/django-rest-framework-jwt/blob/0a0bd402ec21fd6b9a5f715d114411836fbb2923/rest_framework_jwt/authentication.py#L71&#34;&gt;JSONWebTokenAuthentication&lt;/a&gt; class implemented in the &lt;a href=&#34;https://github.com/GetBlimp/django-rest-framework-jwt&#34;&gt;django-rest-framework-jwt&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/authentication.py#L153&#34;&gt;JwtAuthentication&lt;/a&gt; is used to authenticate an API request only if it is listed in the endpoint&amp;rsquo;s &lt;a href=&#34;http://www.django-rest-framework.org/api-guide/authentication/#setting-the-authentication-scheme&#34;&gt;authentication_classes&lt;/a&gt; and the request&amp;rsquo;s Authorization header specifies &amp;ldquo;JWT&amp;rdquo; instead of &amp;ldquo;Bearer&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Credentials service has its own implementation of &lt;a href=&#34;https://github.com/edx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/authentication.py#L153&#34;&gt;JwtAuthentication&lt;/a&gt; and should be converted to use the common implementation in &lt;a href=&#34;https://github.com/edx/edx-drf-extensions&#34;&gt;edx-drf-extensions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst&#34;&gt;https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;auth-backendshttpsgithubcomedxauth-backends&#34;&gt;&lt;a href=&#34;https://github.com/edx/auth-backends/&#34;&gt;&lt;strong&gt;auth-backends&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Adding single sign-on/out support to a service requires a few changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define settings&lt;/li&gt;
&lt;li&gt;Add the authentication backend&lt;/li&gt;
&lt;li&gt;Add the login/logout redirects&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;edx-rest-api-clienthttpsgithubcomedxedx-rest-api-client&#34;&gt;&lt;a href=&#34;https://github.com/edx/edx-rest-api-client&#34;&gt;&lt;strong&gt;edx-rest-api-client&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;edx-drf-extensionshttpsgithubcomedxedx-drf-extensions&#34;&gt;&lt;a href=&#34;https://github.com/edx/edx-drf-extensions&#34;&gt;edx-drf-extensions&lt;/a&gt;.&lt;/h3&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;[0]. &lt;a href=&#34;https://django-oauth2-provider.readthedocs.io/en/latest/index.html&#34;&gt;django-oauth2-provider&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://csyezheng.github.io/post/devops/docker/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/devops/docker/</guid>
      
        <description>&lt;h2 id=&#34;set-up-docker-environment&#34;&gt;Set up Docker environment&lt;/h2&gt;
&lt;h3 id=&#34;images-and-containers&#34;&gt;Images and containers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;image&lt;/strong&gt; is an executable package that includes everything needed to run an application&amp;ndash;the code, a runtime, libraries, environment variables, and configuration files.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;container&lt;/strong&gt; is a runtime instance of an image&amp;ndash;what the image becomes in memory when executed. A &lt;strong&gt;container&lt;/strong&gt; runs &lt;em&gt;natively&lt;/em&gt; on Linux and shares the kernel of the host machine with other containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;install-docker&#34;&gt;Install Docker&lt;/h3&gt;
&lt;p&gt;add your user to the &lt;code&gt;docker&lt;/code&gt; group.&lt;/p&gt;
&lt;h3 id=&#34;docker-command&#34;&gt;Docker command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## List Docker CLI commands
$ docker                    
$ docker container --help
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## Display Docker version and info
$ docker --version
$ docker info                                                             
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## Execute Docker image
$ docker run [OPTIONS] IMAGE                                     
             --rm    Automatically remove the container when it exits
             -i    Keep STDIN open even if not attached
             -t    Allocate a pseudo-TTY
             -d    Run container in background and print container ID
             -p 4000:80 mapping your machine’s port 4000 to the container’s published port 80
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## List Docker images
$ docker image ls                                                                      
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## List Docker containers (running, all, all in quiet mode)                           
$ docker container ls
$ docker container ls --all
$ docker container ls -aq
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;build-an-image-and-run-it-as-one-container&#34;&gt;Build an image and run it as one container&lt;/h2&gt;
&lt;p&gt;The portable images are defined by something called a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;define-a-container-with-dockerfile&#34;&gt;Define a container with &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Create a file called &lt;code&gt;Dockerfile&lt;/code&gt;, copy-and-paste the following content into that file, and save it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;DNS settings&lt;/em&gt; or &lt;em&gt;Proxy server settings&lt;/em&gt; refer to the documentation.&lt;/p&gt;
&lt;h3 id=&#34;build-the-app&#34;&gt;Build the app&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## Create a Docker image, and tag using -t follow by tag name              
$ docker build -t friendlyhello .
$ docker image ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note how the tag defaulted to &lt;code&gt;latest&lt;/code&gt;. The full syntax for the tag option would be something like &lt;code&gt;--tag=friendlyhello:v0.0.1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;run-the-app&#34;&gt;Run the app&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## Mapping local machine’s port 4000 to the container’s port 80                        
$ docker run -p 4000:80 friendlyhello
## Run the app in the background using detached mode
$ docker run -d -p 4000:80 friendlyhello
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;stop-the-container&#34;&gt;Stop the container&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker container ls
$ docker container stop &amp;lt;container_hash_id&amp;gt;                                             
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;manage-the-container-and-image&#34;&gt;Manage the container and image&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;docker container kill &amp;lt;container_hash_id&amp;gt;   # Force shutdown of the specified container
docker container rm &amp;lt;container_hash_id&amp;gt;  # Remove specified container from this machine
docker container rm $(docker container ls -a -q)                # Remove all containers
docker image ls -a                                    # List all images on this machine
docker image rm &amp;lt;image id&amp;gt;                   # Remove specified image from this machine
docker image rm $(docker image ls -a -q)          # Remove all images from this machine
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;share-your-image&#34;&gt;Share your image&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;docker login                    # Log in this CLI session using your Docker credentials
docker tag &amp;lt;image_name&amp;gt; username/repository:tag    # Tag &amp;lt;image&amp;gt; for upload to registry
docker push username/repository:tag                   # Upload tagged image to registry
docker run username/repository:tag                          # Run image from a registry
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the image isn’t available locally on the machine, Docker pulls it from the repository.&lt;/p&gt;
&lt;h2 id=&#34;scale-your-app-to-run-multiple-containers&#34;&gt;Scale your app to run multiple containers&lt;/h2&gt;
&lt;h3 id=&#34;install-docker-compose&#34;&gt;Install Docker Compose&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
$ docker-compose --version
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;services&#34;&gt;Services&lt;/h3&gt;
&lt;p&gt;In a distributed application, different pieces of the app are called “&lt;strong&gt;services&lt;/strong&gt;.”  A service only runs one image.&lt;/p&gt;
&lt;p&gt;Services are really just “containers in production.” A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.&lt;/p&gt;
&lt;p&gt;Luckily it’s very easy to &lt;strong&gt;define, run, and scale services with&lt;/strong&gt; the Docker platform &amp;ndash; just write a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&#34;define-docker-composeyml-file&#34;&gt;Define &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;version: &amp;quot;3&amp;quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: &amp;quot;0.1&amp;quot;
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - &amp;quot;80:80&amp;quot;
    networks:
      - webnet
networks:
  webnet:
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Pull the image from the registry.&lt;/li&gt;
&lt;li&gt;Run 5 instances of that image as a service called &lt;code&gt;web&lt;/code&gt;, limiting each one&amp;rsquo;s CPU and RAM.&lt;/li&gt;
&lt;li&gt;Immediately restart containers if one fails.&lt;/li&gt;
&lt;li&gt;Map port 80 on the host to &lt;code&gt;web&lt;/code&gt;’s port 80.&lt;/li&gt;
&lt;li&gt;Instruct &lt;code&gt;web&lt;/code&gt;’s containers to share port 80 via a load-balanced network called &lt;code&gt;webnet&lt;/code&gt;. (Internally, the containers themselves publish to web’s port 80 at an ephemeral port.)&lt;/li&gt;
&lt;li&gt;Define the &lt;code&gt;webnet&lt;/code&gt; network with the default settings (which is a load-balanced overlay network).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;run-this-load-balanced-app&#34;&gt;Run this load-balanced app&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker swarm init
$ docker stack ls                 # List stacks or apps
$ docker stack deploy -c docker-compose.yml &amp;lt;set_a_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A single container running in a service is called a &lt;strong&gt;task&lt;/strong&gt;. Tasks are given unique IDs that numerically increment, up to the number of &lt;code&gt;replicas&lt;/code&gt; you defined in &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service ls
$ docker service ps &amp;lt;app_name&amp;gt;   # List tasks associated with app
$ docker inspect &amp;lt;task or container&amp;gt;  # Inspect task or container
$ docker container ls -q
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Scale the app by changing the &lt;code&gt;replicas&lt;/code&gt; value in &lt;code&gt;docker-compose.yml&lt;/code&gt;, and re-running the &lt;code&gt;docker stack deploy&lt;/code&gt; command.&lt;/p&gt;
&lt;h3 id=&#34;take-down-the-app-and-the-swarm&#34;&gt;Take down the app and the swarm&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;## Take the app down
$ docker stack rm app_name
# Take down a single node swarm from the manager
$ docker swarm leave --force
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;distribute-your-app-across-a-cluster&#34;&gt;Distribute your app across a cluster&lt;/h2&gt;
&lt;p&gt;Multi-container, multi-machine applications are made possible by joining multiple machines into a “Dockerized” cluster called a &lt;strong&gt;swarm&lt;/strong&gt;. The machines  are joining a swarm, they are referred to as &lt;strong&gt;nodes&lt;/strong&gt;. &lt;strong&gt;Swarm managers&lt;/strong&gt; are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as &lt;strong&gt;workers&lt;/strong&gt;. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do.&lt;/p&gt;
&lt;h3 id=&#34;install-docker-machine&#34;&gt;Install Docker Machine&lt;/h3&gt;
&lt;h3 id=&#34;set-up-your-swarm&#34;&gt;Set up your swarm&lt;/h3&gt;
&lt;p&gt;Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you’re managing, rather than just on the current machine.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;docker swarm init&lt;/code&gt; to enable swarm mode and make your current machine a swarm manager, then run &lt;code&gt;docker swarm join&lt;/code&gt; on other machines to have them join the swarm as workers.&lt;/p&gt;
&lt;p&gt;Always run &lt;code&gt;docker swarm init&lt;/code&gt; and &lt;code&gt;docker swarm join&lt;/code&gt; with port 2377 (the swarm management port), or no port at all and let it take the default.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# On swarm manager machine
$ docker swarm init --advertise-addr &amp;lt;local ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# On other machine
$ docker swarm join --token &amp;lt;token&amp;gt; &amp;lt;ip&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# On swarm manager machine
$ docker node ls
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;deploy-the-app-on-the-swarm-cluster&#34;&gt;Deploy the app on the swarm cluster&lt;/h3&gt;
&lt;p&gt;run a command that configures&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.100:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/sam/.docker/machine/machines/myvm1&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;myvm1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ docker-machine scp &amp;lt;file&amp;gt; &amp;lt;machine&amp;gt;:~
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# On swarm manager machine
$ docker stack deploy -c docker-compose.yml &amp;lt;app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If your image is stored on a private registry instead of Docker Hub, you need to be logged in using &lt;code&gt;docker login &amp;lt;your-registry&amp;gt;&lt;/code&gt; and then you need to add the &lt;code&gt;--with-registry-auth&lt;/code&gt; flag to the &lt;code&gt;docker stack deploy&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# On swarm manager machine
$ docker stack ps &amp;lt;app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;iterating-and-scaling-your-app&#34;&gt;Iterating and scaling your app&lt;/h3&gt;
&lt;p&gt;Scale the app by changing the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, then &lt;code&gt;rebuild&lt;/code&gt;, and &lt;code&gt;push&lt;/code&gt; the new image. Using the  &lt;code&gt;docker swarm join&lt;/code&gt; command to join any machine.&lt;/p&gt;
&lt;p&gt;All of modified simply run &lt;code&gt;docker stack deploy&lt;/code&gt; afterwards, and your app can take advantage of the new resources.&lt;/p&gt;
&lt;h3 id=&#34;cleanup-and-reboot-stacks-and-swarms&#34;&gt;Cleanup and reboot Stacks and swarms&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker stack rm &amp;lt;service_name&amp;gt;      # tear down the stack
$ docker swarm leave --force
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stack-services-by-adding-a-backend-database&#34;&gt;Stack services by adding a backend database&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;stack&lt;/strong&gt; is a group of interrelated services that share dependencies, and can be orchestrated and scaled together.&lt;/p&gt;
&lt;p&gt;Make multiple services relate to each other, and run them on multiple machines.&lt;/p&gt;
&lt;h3 id=&#34;add-a-new-service-and-redeploy&#34;&gt;Add a new service and redeploy&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cat docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;version: &amp;quot;3&amp;quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: &amp;quot;0.1&amp;quot;
          memory: 50M
    ports:
      - &amp;quot;80:80&amp;quot;
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - &amp;quot;8080:8080&amp;quot;
    volumes:
      - &amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice two new things here: a &lt;code&gt;volumes&lt;/code&gt; key, giving the visualizer access to the host’s socket file for Docker, and a &lt;code&gt;placement&lt;/code&gt; key, ensuring that this service only ever runs on a swarm manager &amp;ndash; never a worker.&lt;/p&gt;
&lt;h4 id=&#34;redeploy&#34;&gt;redeploy&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker stack deploy -c docker-compose.yml getstartedlab
Updating service getstartedlab_web (id: angi1bf5e4to03qu9f93trnxm)
Creating service getstartedlab_visualizer (id: l9mnwkeq2jiononb5ihz9u7a4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You saw in the Compose file that &lt;code&gt;visualizer&lt;/code&gt; runs on port 8080. Get the IP address of one of your nodes by running &lt;code&gt;docker-machine ls&lt;/code&gt;. Go to either IP address at port 8080 and you can see the visualizer running. &lt;code&gt;192.168.99.101:8080&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker stack ps getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The visualizer is a standalone service that can run in any app that includes it in the stack. It doesn’t depend on anything else.&lt;/p&gt;
&lt;h3 id=&#34;persist-the-data&#34;&gt;Persist the data&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;version: &amp;quot;3&amp;quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: &amp;quot;0.1&amp;quot;
          memory: 50M
    ports:
      - &amp;quot;80:80&amp;quot;
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - &amp;quot;8080:8080&amp;quot;
    volumes:
      - &amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  redis:
    image: redis
    ports:
      - &amp;quot;6379:6379&amp;quot;
    volumes:
      - &amp;quot;/home/docker/data:/data&amp;quot;
    deploy:
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet
networks:
  webnet:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Redis has an official image in the Docker library and has been granted the short &lt;code&gt;image&lt;/code&gt; name of just &lt;code&gt;redis&lt;/code&gt;, so no &lt;code&gt;username/repo&lt;/code&gt; notation here. The Redis port, 6379, has been pre-configured by Redis to be exposed from the container to the host.&lt;/p&gt;
&lt;p&gt;there are a couple of things in the &lt;code&gt;redis&lt;/code&gt; specification that make data persist between deployments of this stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis&lt;/code&gt; always runs on the manager, so it’s always using the same filesystem.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;/code&gt; accesses an arbitrary directory in the host’s file system as &lt;code&gt;/data&lt;/code&gt; inside the container, which is where Redis stores data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;this is creating a “source of truth” in your host’s physical filesystem for the Redis data.&lt;/p&gt;
&lt;p&gt;This source of truth has two components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The placement constraint you put on the Redis service, ensuring that it always uses the same host.&lt;/li&gt;
&lt;li&gt;The volume you created that lets the container access &lt;code&gt;./data&lt;/code&gt; (on the host) as &lt;code&gt;/data&lt;/code&gt; (inside the Redis container). While containers come and go, the files stored on &lt;code&gt;./data&lt;/code&gt; on the specified host persists, enabling continuity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Create a &lt;code&gt;./data&lt;/code&gt; directory on the manager:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ssh myvm1 &amp;quot;mkdir ./data&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;redeploy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker stack deploy -c docker-compose.yml getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;deploy-your-app-to-production&#34;&gt;Deploy your app to production&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>microservices</title>
      <link>http://csyezheng.github.io/post/back-end/microservices/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/back-end/microservices/</guid>
      
        <description>&lt;h2 id=&#34;第1章-微服务&#34;&gt;第1章 微服务&lt;/h2&gt;
&lt;h4 id=&#34;11-什么是微服务&#34;&gt;1.1 什么是微服务&lt;/h4&gt;
&lt;p&gt;微服务就是一些协同工作的小而自治的服务&lt;/p&gt;
&lt;h5 id=&#34;111很小专注于做好一件事&#34;&gt;1.1.1　很小，专注于做好一件事&lt;/h5&gt;
&lt;p&gt;在一个单块系统内，通常会创建一些抽象层或者模块来保证代码的&lt;strong&gt;内聚性&lt;/strong&gt;，从而避免代码庞大使得在什么地方做修改都很困难．内聚性是指将相关代码放在一起，在考虑使用微服务的时候，内聚性这一概念很重要．&lt;/p&gt;
&lt;p&gt;微服务将这个理念应用在服务上，根据业务的边界确定服务的边界，进而确定某个功能代码应该放在哪里．&lt;/p&gt;
&lt;h5 id=&#34;112自治性&#34;&gt;1.1.2　自治性&lt;/h5&gt;
&lt;p&gt;一个微服务就是一个独立的实体，它可以独立地部署在PAAS（Platform As A Service) 上，也可以作为一个操作系统的进程存在．服务会暴露出API，服务之间通过这些API进行通信，从而加强服务之间的隔离性，&lt;strong&gt;避免紧耦合&lt;/strong&gt;．&lt;/p&gt;
&lt;h4 id=&#34;12-主要好处&#34;&gt;1.2 主要好处&lt;/h4&gt;
&lt;h5 id=&#34;121技术异构性&#34;&gt;1.2.1　技术异构性&lt;/h5&gt;
&lt;p&gt;每个服务可以用不同的语言编写，后端采用不同的数据库．&lt;/p&gt;
&lt;h5 id=&#34;122弹性&#34;&gt;1.2.2　弹性&lt;/h5&gt;
&lt;h5 id=&#34;123扩展&#34;&gt;1.2.3　扩展&lt;/h5&gt;
&lt;p&gt;可以只对需要扩展的服务进行扩展，把不需要扩展的服务运行在更小，性能稍差的硬件上．&lt;/p&gt;
&lt;h5 id=&#34;124简化部署&#34;&gt;1.2.4　简化部署&lt;/h5&gt;
&lt;p&gt;各服务独立部署，出现版本问题，只会影响一个服务，能快速回滚．&lt;/p&gt;
&lt;h5 id=&#34;125与组织结构相匹配&#34;&gt;1.2.5　与组织结构相匹配&lt;/h5&gt;
&lt;h5 id=&#34;126可组合性&#34;&gt;1.2.6　可组合性&lt;/h5&gt;
&lt;h5 id=&#34;127对可替代性的优化&#34;&gt;1.2.7　对可替代性的优化&lt;/h5&gt;
&lt;h4 id=&#34;13-面向服务的架构&#34;&gt;1.3 面向服务的架构&lt;/h4&gt;
&lt;p&gt;可以认为微服务架构是SOA的一种特定方法．&lt;/p&gt;
&lt;h4 id=&#34;14-其他分解技术&#34;&gt;1.4 其他分解技术&lt;/h4&gt;
&lt;h5 id=&#34;141共享库&#34;&gt;1.4.1　共享库&lt;/h5&gt;
&lt;h5 id=&#34;142模块&#34;&gt;1.4.2　模块&lt;/h5&gt;
&lt;h4 id=&#34;15-没有银弹&#34;&gt;1.5 没有银弹&lt;/h4&gt;
&lt;p&gt;微服务不是免费的午餐，更不是银弹．每个公司，组织及系统都不一样，微服务未必就是适合，简单的MVC架构也未必就是不好的．&lt;/p&gt;
&lt;h4 id=&#34;16-小结&#34;&gt;1.6 小结　&lt;/h4&gt;
&lt;h2 id=&#34;第2章-演化式架构师&#34;&gt;第2章 演化式架构师　&lt;/h2&gt;
&lt;h4 id=&#34;21-不准确的比较&#34;&gt;2.1 不准确的比较　&lt;/h4&gt;
&lt;h4 id=&#34;22-架构师的演化视角&#34;&gt;2.2 架构师的演化视角　&lt;/h4&gt;
&lt;h4 id=&#34;23-分区&#34;&gt;2.3 分区　&lt;/h4&gt;
&lt;p&gt;每一个服务内部可以允许团队自己选择不同的技术栈或数据存储技术，但服务之间的调用方式最好统一，不要一个服务采用HTTP暴露REST接口，另一个服务使用RPC方式的protocol buffers．&lt;/p&gt;
&lt;h4 id=&#34;24-一个原则性的方法&#34;&gt;2.4 一个原则性的方法　&lt;/h4&gt;
&lt;h5 id=&#34;241战略目标&#34;&gt;2.4.1　战略目标　&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;保证业务伸缩性&lt;/li&gt;
&lt;li&gt;支持进入新市场&lt;/li&gt;
&lt;li&gt;支持现有市场中的创新&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;242原则&#34;&gt;2.4.2　原则　&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;减小惯性&lt;/li&gt;
&lt;li&gt;消除偶发复杂度&lt;/li&gt;
&lt;li&gt;一致的接口和数据流&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;243实践&#34;&gt;2.4.3　实践　&lt;/h5&gt;
&lt;h5 id=&#34;244将原则和实践相结合&#34;&gt;2.4.4　将原则和实践相结合　&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;标准REST/HTTP&lt;/li&gt;
&lt;li&gt;封装遗留系统&lt;/li&gt;
&lt;li&gt;消除集成数据库&lt;/li&gt;
&lt;li&gt;合并并净化数据&lt;/li&gt;
&lt;li&gt;发布集成模型&lt;/li&gt;
&lt;li&gt;小规模独立服务&lt;/li&gt;
&lt;li&gt;持续部署&lt;/li&gt;
&lt;li&gt;对COTS/SAAS进行最小化定制&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;245真实世界的例子&#34;&gt;2.4.5　真实世界的例子　&lt;/h5&gt;
&lt;h4 id=&#34;25要求的标准&#34;&gt;2.5.要求的标准　&lt;/h4&gt;
&lt;h5 id=&#34;251监控&#34;&gt;2.5.1　监控　&lt;/h5&gt;
&lt;p&gt;检测每个服务的健康状态，确保所有的服务使用同样的报告健康状态及其与监控相关的数据．&lt;/p&gt;
&lt;p&gt;使用推送机制，每个服务主动把数据推送到某个集中的位置，使用Graphite收集指标数据，使用Nagios检测健康状态．&lt;/p&gt;
&lt;p&gt;或者使用轮询系统来从各个节点收集数据．&lt;/p&gt;
&lt;p&gt;无论选择哪个方案，尽量保持标准化，每个服务都采用相同的方式．日志功能和监控类似，也需要集中式管理．&lt;/p&gt;
&lt;h5 id=&#34;252接口&#34;&gt;2.5.2　接口　&lt;/h5&gt;
&lt;p&gt;HTTP/REST&lt;/p&gt;
&lt;p&gt;GRPC&lt;/p&gt;
&lt;h5 id=&#34;253架构安全性&#34;&gt;2.5.3　架构安全性　&lt;/h5&gt;
&lt;p&gt;必须要保证每个服务都可以应对下游服务的错误请求，至少让每个下游服务使用它们自己的连接池，进一步让每个服务使用一个断路器．&lt;/p&gt;
&lt;p&gt;返回码遵循一定的规则，如HTTP状态码．&lt;/p&gt;
&lt;h4 id=&#34;26代码治理&#34;&gt;2.6.代码治理　&lt;/h4&gt;
&lt;p&gt;治理就是确保构建的系统符合愿景，在需要的使用应对愿景进行演化．&lt;/p&gt;
&lt;h5 id=&#34;261范例&#34;&gt;2.6.1　范例　&lt;/h5&gt;
&lt;h5 id=&#34;262裁剪服务代码模板&#34;&gt;2.6.2　裁剪服务代码模板　&lt;/h5&gt;
&lt;h4 id=&#34;27-技术债务&#34;&gt;2.7 技术债务　&lt;/h4&gt;
&lt;h4 id=&#34;28-例外管理&#34;&gt;2.8 例外管理　&lt;/h4&gt;
&lt;p&gt;海量存储场景下MySQL to Cassandra&lt;/p&gt;
&lt;h4 id=&#34;29-集中治理和领导&#34;&gt;2.9 集中治理和领导　&lt;/h4&gt;
&lt;h4 id=&#34;210-建设团队&#34;&gt;2.10 　建设团队　&lt;/h4&gt;
&lt;h4 id=&#34;211小结&#34;&gt;2.11　小结　&lt;/h4&gt;
&lt;p&gt;演进式架构师应该理解，成功要靠不断地&lt;strong&gt;取舍&lt;/strong&gt;来实现，总会存在一些原因需要你改变所构建好的系统，但是具体需要做哪些改变只能依靠自己的经验了．而僵化地固守自己的想法无疑是最糟糕的做法．&lt;/p&gt;
&lt;h2 id=&#34;第3章-如何建模服务&#34;&gt;第3章 如何建模服务　&lt;/h2&gt;
&lt;h4 id=&#34;31musiccorp-简介&#34;&gt;3.1　MusicCorp 简介　&lt;/h4&gt;
&lt;h4 id=&#34;32什么样的服务是好服务&#34;&gt;3.2　什么样的服务是好服务　&lt;/h4&gt;
&lt;h5 id=&#34;321松耦合&#34;&gt;3.2.1　松耦合　&lt;/h5&gt;
&lt;h5 id=&#34;322高内聚&#34;&gt;3.2.2　高内聚　&lt;/h5&gt;
&lt;h4 id=&#34;33限界上下文&#34;&gt;3.3　限界上下文　&lt;/h4&gt;
&lt;h5 id=&#34;331共享的隐藏模型&#34;&gt;3.3.1　共享的隐藏模型　&lt;/h5&gt;
&lt;h5 id=&#34;332模块和服务&#34;&gt;3.3.2　模块和服务　&lt;/h5&gt;
&lt;h5 id=&#34;333过早划分&#34;&gt;3.3.3　过早划分　&lt;/h5&gt;
&lt;h4 id=&#34;34业务功能&#34;&gt;3.4　业务功能　&lt;/h4&gt;
&lt;h4 id=&#34;35逐步划分上下文&#34;&gt;3.5　逐步划分上下文　&lt;/h4&gt;
&lt;h4 id=&#34;36关于业务概念的沟通&#34;&gt;3.6　关于业务概念的沟通　&lt;/h4&gt;
&lt;h4 id=&#34;37技术边界&#34;&gt;3.7　技术边界　&lt;/h4&gt;
&lt;h4 id=&#34;38小结&#34;&gt;3.8　小结　&lt;/h4&gt;
&lt;h2 id=&#34;第4章-集成&#34;&gt;第4　章 集成　&lt;/h2&gt;
&lt;h4 id=&#34;41寻找理想的集成技术&#34;&gt;4.1　寻找理想的集成技术　&lt;/h4&gt;
&lt;h5 id=&#34;411避免破坏性修改&#34;&gt;4.1.1　避免破坏性修改　&lt;/h5&gt;
&lt;h5 id=&#34;412保证api-的技术无关性&#34;&gt;4.1.2　保证API 的技术无关性　&lt;/h5&gt;
&lt;h5 id=&#34;413使你的服务易于消费方使用&#34;&gt;4.1.3　使你的服务易于消费方使用　&lt;/h5&gt;
&lt;h5 id=&#34;414隐藏内部实现细节&#34;&gt;4.1.4　隐藏内部实现细节　&lt;/h5&gt;
&lt;h4 id=&#34;42为用户创建接口&#34;&gt;4.2　为用户创建接口　&lt;/h4&gt;
&lt;h4 id=&#34;43共享数据库&#34;&gt;4.3　共享数据库　&lt;/h4&gt;
&lt;h4 id=&#34;44同步与异步&#34;&gt;4.4　同步与异步　&lt;/h4&gt;
&lt;h4 id=&#34;45编排与协同&#34;&gt;4.5　编排与协同　&lt;/h4&gt;
&lt;h4 id=&#34;46远程过程调用&#34;&gt;4.6　远程过程调用　&lt;/h4&gt;
&lt;h5 id=&#34;461技术的耦合&#34;&gt;4.6.1　技术的耦合　&lt;/h5&gt;
&lt;h5 id=&#34;462本地调用和远程调用并不相同&#34;&gt;4.6.2　本地调用和远程调用并不相同　&lt;/h5&gt;
&lt;h5 id=&#34;463脆弱性&#34;&gt;4.6.3　脆弱性　&lt;/h5&gt;
&lt;h5 id=&#34;464rpc-很糟糕吗&#34;&gt;4.6.4　RPC 很糟糕吗　&lt;/h5&gt;
&lt;h4 id=&#34;47rest&#34;&gt;4.7　REST　&lt;/h4&gt;
&lt;h5 id=&#34;471rest-和http&#34;&gt;4.7.1　REST 和HTTP　&lt;/h5&gt;
&lt;h5 id=&#34;472超媒体作为程序状态的引擎&#34;&gt;4.7.2　超媒体作为程序状态的引擎　&lt;/h5&gt;
&lt;h5 id=&#34;473jsonxml-还是其他&#34;&gt;4.7.3　JSON、XML 还是其他　&lt;/h5&gt;
&lt;h5 id=&#34;474留心过多的约定&#34;&gt;4.7.4　留心过多的约定　&lt;/h5&gt;
&lt;h5 id=&#34;475基于http-的rest-的缺点&#34;&gt;4.7.5　基于HTTP 的REST 的缺点　&lt;/h5&gt;
&lt;h4 id=&#34;48实现基于事件的异步协作方式&#34;&gt;4.8　实现基于事件的异步协作方式　&lt;/h4&gt;
&lt;h5 id=&#34;481技术选择&#34;&gt;4.8.1　技术选择　&lt;/h5&gt;
&lt;h5 id=&#34;482异步架构的复杂性&#34;&gt;4.8.2　异步架构的复杂性　&lt;/h5&gt;
&lt;h4 id=&#34;49服务即状态机&#34;&gt;4.9　服务即状态机　&lt;/h4&gt;
&lt;h4 id=&#34;410响应式扩展&#34;&gt;4.10　响应式扩展　&lt;/h4&gt;
&lt;h4 id=&#34;411微服务世界中的dry-和代码重用的危险&#34;&gt;4.11　微服务世界中的DRY 和代码重用的危险　&lt;/h4&gt;
&lt;h4 id=&#34;412按引用访问&#34;&gt;4.12　按引用访问　&lt;/h4&gt;
&lt;h4 id=&#34;413版本管理&#34;&gt;4.13　版本管理　&lt;/h4&gt;
&lt;h5 id=&#34;4131尽可能推迟&#34;&gt;4.13.1　尽可能推迟　&lt;/h5&gt;
&lt;h5 id=&#34;4132及早发现破坏性修改&#34;&gt;4.13.2　及早发现破坏性修改　&lt;/h5&gt;
&lt;h5 id=&#34;4133使用语义化的版本管理&#34;&gt;4.13.3　使用语义化的版本管理　&lt;/h5&gt;
&lt;h5 id=&#34;4134不同的接口共存&#34;&gt;4.13.4　不同的接口共存　&lt;/h5&gt;
&lt;h5 id=&#34;4135同时使用多个版本的服务&#34;&gt;4.13.5　同时使用多个版本的服务　&lt;/h5&gt;
&lt;h4 id=&#34;414用户界面&#34;&gt;4.14　用户界面　&lt;/h4&gt;
&lt;h5 id=&#34;4141走向数字化&#34;&gt;4.14.1　走向数字化　&lt;/h5&gt;
&lt;h5 id=&#34;4142约束&#34;&gt;4.14.2　约束　&lt;/h5&gt;
&lt;h5 id=&#34;4143api-组合&#34;&gt;4.14.3　API 组合　&lt;/h5&gt;
&lt;h5 id=&#34;4144ui-片段的组合&#34;&gt;4.14.4　UI 片段的组合　&lt;/h5&gt;
&lt;h5 id=&#34;4145为前端服务的后端&#34;&gt;4.14.5　为前端服务的后端　&lt;/h5&gt;
&lt;h5 id=&#34;4146一种混合方式&#34;&gt;4.14.6　一种混合方式　&lt;/h5&gt;
&lt;h4 id=&#34;415与第三方软件集成&#34;&gt;4.15　与第三方软件集成　&lt;/h4&gt;
&lt;h5 id=&#34;4151缺乏控制&#34;&gt;4.15.1　缺乏控制　&lt;/h5&gt;
&lt;h5 id=&#34;4152定制化&#34;&gt;4.15.2　定制化　&lt;/h5&gt;
&lt;h5 id=&#34;4153意大利面式的集成&#34;&gt;4.15.3　意大利面式的集成　&lt;/h5&gt;
&lt;h5 id=&#34;4154在自己可控的平台进行定制化&#34;&gt;4.15.4　在自己可控的平台进行定制化　&lt;/h5&gt;
&lt;h5 id=&#34;4155绞杀者模式&#34;&gt;4.15.5　绞杀者模式　&lt;/h5&gt;
&lt;h4 id=&#34;416小结&#34;&gt;4.16　小结　&lt;/h4&gt;
&lt;h2 id=&#34;第5章-分解单块系统&#34;&gt;第5章 分解单块系统　&lt;/h2&gt;
&lt;h4 id=&#34;51关键是接缝&#34;&gt;5.1　关键是接缝　&lt;/h4&gt;
&lt;h4 id=&#34;52分解musiccorp&#34;&gt;5.2　分解MusicCorp　&lt;/h4&gt;
&lt;h4 id=&#34;53分解单块系统的原因&#34;&gt;5.3　分解单块系统的原因　&lt;/h4&gt;
&lt;h5 id=&#34;531改变的速度&#34;&gt;5.3.1　改变的速度　&lt;/h5&gt;
&lt;h5 id=&#34;532团队结构&#34;&gt;5.3.2　团队结构　&lt;/h5&gt;
&lt;h5 id=&#34;533安全&#34;&gt;5.3.3　安全　&lt;/h5&gt;
&lt;h5 id=&#34;534技术&#34;&gt;5.3.4　技术　&lt;/h5&gt;
&lt;h4 id=&#34;54杂乱的依赖&#34;&gt;5.4　杂乱的依赖　&lt;/h4&gt;
&lt;h4 id=&#34;55数据库&#34;&gt;5.5　数据库　&lt;/h4&gt;
&lt;h4 id=&#34;56找到问题的关键&#34;&gt;5.6　找到问题的关键　&lt;/h4&gt;
&lt;h4 id=&#34;57例子打破外键关系&#34;&gt;5.7　例子：打破外键关系　&lt;/h4&gt;
&lt;h4 id=&#34;58例子共享静态数据&#34;&gt;5.8　例子：共享静态数据　&lt;/h4&gt;
&lt;h4 id=&#34;59例子共享数据&#34;&gt;5.9　例子：共享数据　&lt;/h4&gt;
&lt;h4 id=&#34;510例子共享表&#34;&gt;5.10　例子：共享表　&lt;/h4&gt;
&lt;h4 id=&#34;511重构数据库&#34;&gt;5.11　重构数据库　&lt;/h4&gt;
&lt;h4 id=&#34;512事务边界&#34;&gt;5.12　事务边界　&lt;/h4&gt;
&lt;h5 id=&#34;5121再试一次&#34;&gt;5.12.1　再试一次　&lt;/h5&gt;
&lt;h5 id=&#34;5122终止整个操作&#34;&gt;5.12.2　终止整个操作　&lt;/h5&gt;
&lt;h5 id=&#34;5123分布式事务&#34;&gt;5.12.3　分布式事务　&lt;/h5&gt;
&lt;h5 id=&#34;5124应该怎么办呢&#34;&gt;5.12.4　应该怎么办呢　&lt;/h5&gt;
&lt;h4 id=&#34;513报告&#34;&gt;5.13　报告　&lt;/h4&gt;
&lt;h4 id=&#34;514报告数据库&#34;&gt;5.14　报告数据库　&lt;/h4&gt;
&lt;h4 id=&#34;515通过服务调用来获取数据&#34;&gt;5.15　通过服务调用来获取数据　&lt;/h4&gt;
&lt;h4 id=&#34;516数据导出&#34;&gt;5.16　数据导出　&lt;/h4&gt;
&lt;h4 id=&#34;517事件数据导出&#34;&gt;5.17　事件数据导出　&lt;/h4&gt;
&lt;h4 id=&#34;518数据导出的备份&#34;&gt;5.18　数据导出的备份　&lt;/h4&gt;
&lt;h4 id=&#34;519走向实时&#34;&gt;5.19　走向实时　&lt;/h4&gt;
&lt;h4 id=&#34;520修改的代价&#34;&gt;5.20　修改的代价　&lt;/h4&gt;
&lt;h4 id=&#34;521理解根本原因&#34;&gt;5.21　理解根本原因　&lt;/h4&gt;
&lt;h4 id=&#34;522小结&#34;&gt;5.22　小结　&lt;/h4&gt;
&lt;h2 id=&#34;第6章-部署&#34;&gt;第6章 部署　&lt;/h2&gt;
&lt;h4 id=&#34;61持续集成简介&#34;&gt;6.1　持续集成简介　&lt;/h4&gt;
&lt;h4 id=&#34;62把持续集成映射到微服务&#34;&gt;6.2　把持续集成映射到微服务　&lt;/h4&gt;
&lt;h4 id=&#34;63构建流水线和持续交付&#34;&gt;6.3　构建流水线和持续交付　&lt;/h4&gt;
&lt;h4 id=&#34;64平台特定的构建物&#34;&gt;6.4　平台特定的构建物　&lt;/h4&gt;
&lt;h4 id=&#34;65操作系统构建物&#34;&gt;6.5　操作系统构建物　&lt;/h4&gt;
&lt;h4 id=&#34;66定制化镜像&#34;&gt;6.6　定制化镜像　&lt;/h4&gt;
&lt;h5 id=&#34;661将镜像作为构建物&#34;&gt;6.6.1　将镜像作为构建物　&lt;/h5&gt;
&lt;h5 id=&#34;662不可变服务器&#34;&gt;6.6.2　不可变服务器　&lt;/h5&gt;
&lt;h4 id=&#34;67环境&#34;&gt;6.7　环境　&lt;/h4&gt;
&lt;h4 id=&#34;68服务配置&#34;&gt;6.8　服务配置　&lt;/h4&gt;
&lt;h4 id=&#34;69服务与主机之间的映射&#34;&gt;6.9　服务与主机之间的映射　&lt;/h4&gt;
&lt;h5 id=&#34;691单主机多服务&#34;&gt;6.9.1　单主机多服务　&lt;/h5&gt;
&lt;h5 id=&#34;692应用程序容器&#34;&gt;6.9.2　应用程序容器　&lt;/h5&gt;
&lt;h5 id=&#34;693每个主机一个服务&#34;&gt;6.9.3　每个主机一个服务&lt;/h5&gt;
&lt;h5 id=&#34;694平台即服务&#34;&gt;6.9.4　平台即服务&lt;/h5&gt;
&lt;h4 id=&#34;610自动化&#34;&gt;6.10　自动化&lt;/h4&gt;
&lt;h4 id=&#34;611从物理机到虚拟机&#34;&gt;6.11　从物理机到虚拟机&lt;/h4&gt;
&lt;h5 id=&#34;6111传统的虚拟化技术&#34;&gt;6.11.1　传统的虚拟化技术&lt;/h5&gt;
&lt;h5 id=&#34;6112vagrant&#34;&gt;6.11.2　Vagrant&lt;/h5&gt;
&lt;h5 id=&#34;6113linux-容器&#34;&gt;6.11.3　Linux 容器&lt;/h5&gt;
&lt;h5 id=&#34;6114docker&#34;&gt;6.11.4　Docker&lt;/h5&gt;
&lt;h4 id=&#34;612一个部署接口&#34;&gt;6.12　一个部署接口&lt;/h4&gt;
&lt;h4 id=&#34;613小结&#34;&gt;6.13　小结&lt;/h4&gt;
&lt;h2 id=&#34;第7章-测试&#34;&gt;第7章 测试&lt;/h2&gt;
&lt;h4 id=&#34;71测试类型&#34;&gt;7.1　测试类型&lt;/h4&gt;
&lt;h4 id=&#34;72测试范围&#34;&gt;7.2　测试范围&lt;/h4&gt;
&lt;h5 id=&#34;721单元测试&#34;&gt;7.2.1　单元测试&lt;/h5&gt;
&lt;h5 id=&#34;722服务测试&#34;&gt;7.2.2　服务测试&lt;/h5&gt;
&lt;h5 id=&#34;723端到端测试&#34;&gt;7.2.3　端到端测试&lt;/h5&gt;
&lt;h5 id=&#34;724权衡&#34;&gt;7.2.4　权衡&lt;/h5&gt;
&lt;h5 id=&#34;725比例&#34;&gt;7.2.5　比例&lt;/h5&gt;
&lt;h4 id=&#34;73实现服务测试&#34;&gt;7.3　实现服务测试&lt;/h4&gt;
&lt;h5 id=&#34;731mock-还是打桩&#34;&gt;7.3.1　mock 还是打桩&lt;/h5&gt;
&lt;h5 id=&#34;732智能的打桩服务&#34;&gt;7.3.2　智能的打桩服务&lt;/h5&gt;
&lt;h4 id=&#34;74微妙的端到端测试&#34;&gt;7.4　微妙的端到端测试&lt;/h4&gt;
&lt;h4 id=&#34;75端到端测试的缺点&#34;&gt;7.5　端到端测试的缺点&lt;/h4&gt;
&lt;h4 id=&#34;76脆弱的测试&#34;&gt;7.6　脆弱的测试&lt;/h4&gt;
&lt;h5 id=&#34;761谁来写这些测试&#34;&gt;7.6.1　谁来写这些测试&lt;/h5&gt;
&lt;h5 id=&#34;762测试多长时间&#34;&gt;7.6.2　测试多长时间&lt;/h5&gt;
&lt;h5 id=&#34;763大量的堆积&#34;&gt;7.6.3　大量的堆积&lt;/h5&gt;
&lt;h5 id=&#34;764元版本&#34;&gt;7.6.4　元版本&lt;/h5&gt;
&lt;h4 id=&#34;77测试场景而不是故事&#34;&gt;7.7　测试场景，而不是故事&lt;/h4&gt;
&lt;h4 id=&#34;78拯救消费者驱动的测试&#34;&gt;7.8　拯救消费者驱动的测试&lt;/h4&gt;
&lt;h5 id=&#34;781pact&#34;&gt;7.8.1　Pact&lt;/h5&gt;
&lt;h5 id=&#34;782关于沟通&#34;&gt;7.8.2　关于沟通&lt;/h5&gt;
&lt;h4 id=&#34;79还应该使用端到端测试吗&#34;&gt;7.9　还应该使用端到端测试吗&lt;/h4&gt;
&lt;h4 id=&#34;710部署后再测试&#34;&gt;7.10　部署后再测试&lt;/h4&gt;
&lt;h5 id=&#34;7101区分部署和上线&#34;&gt;7.10.1　区分部署和上线&lt;/h5&gt;
&lt;h5 id=&#34;7102金丝雀发布&#34;&gt;7.10.2　金丝雀发布&lt;/h5&gt;
&lt;h5 id=&#34;7103平均修复时间胜过平均故障间隔时间&#34;&gt;7.10.3　平均修复时间胜过平均故障间隔时间&lt;/h5&gt;
&lt;h4 id=&#34;711跨功能的测试&#34;&gt;7.11　跨功能的测试&lt;/h4&gt;
&lt;h4 id=&#34;712小结&#34;&gt;7.12　小结&lt;/h4&gt;
&lt;h2 id=&#34;第8章-监控&#34;&gt;第8章 监控&lt;/h2&gt;
&lt;h4 id=&#34;81单一服务单一服务器&#34;&gt;8.1　单一服务，单一服务器&lt;/h4&gt;
&lt;h4 id=&#34;82单一服务多个服务器&#34;&gt;8.2　单一服务，多个服务器&lt;/h4&gt;
&lt;h4 id=&#34;83多个服务多个服务器&#34;&gt;8.3　多个服务，多个服务器&lt;/h4&gt;
&lt;h4 id=&#34;84日志日志更多的日志&#34;&gt;8.4　日志，日志，更多的日志&lt;/h4&gt;
&lt;h4 id=&#34;85多个服务的指标跟踪&#34;&gt;8.5　多个服务的指标跟踪&lt;/h4&gt;
&lt;h4 id=&#34;86服务指标&#34;&gt;8.6　服务指标&lt;/h4&gt;
&lt;h4 id=&#34;87综合监控&#34;&gt;8.7　综合监控&lt;/h4&gt;
&lt;h4 id=&#34;88关联标识&#34;&gt;8.8　关联标识&lt;/h4&gt;
&lt;h4 id=&#34;89级联&#34;&gt;8.9　级联&lt;/h4&gt;
&lt;h4 id=&#34;810标准化&#34;&gt;8.10　标准化&lt;/h4&gt;
&lt;h4 id=&#34;811考虑受众&#34;&gt;8.11　考虑受众&lt;/h4&gt;
&lt;h4 id=&#34;812未来&#34;&gt;8.12　未来&lt;/h4&gt;
&lt;h4 id=&#34;813小结&#34;&gt;8.13　小结&lt;/h4&gt;
&lt;h2 id=&#34;第9章-安全&#34;&gt;第9章 安全&lt;/h2&gt;
&lt;h4 id=&#34;91身份验证和授权&#34;&gt;9.1　身份验证和授权&lt;/h4&gt;
&lt;h5 id=&#34;911常见的单点登录实现&#34;&gt;9.1.1　常见的单点登录实现&lt;/h5&gt;
&lt;h5 id=&#34;912单点登录网关&#34;&gt;9.1.2　单点登录网关&lt;/h5&gt;
&lt;h5 id=&#34;913细粒度的授权&#34;&gt;9.1.3　细粒度的授权&lt;/h5&gt;
&lt;h4 id=&#34;92服务间的身份验证和授权&#34;&gt;9.2　服务间的身份验证和授权&lt;/h4&gt;
&lt;h5 id=&#34;921在边界内允许一切&#34;&gt;9.2.1　在边界内允许一切&lt;/h5&gt;
&lt;h5 id=&#34;922https-基本身份验证&#34;&gt;9.2.2　HTTP(S) 基本身份验证&lt;/h5&gt;
&lt;h5 id=&#34;923使用saml-或openid-connect&#34;&gt;9.2.3　使用SAML 或OpenID Connect&lt;/h5&gt;
&lt;h5 id=&#34;924客户端证书&#34;&gt;9.2.4　客户端证书&lt;/h5&gt;
&lt;h5 id=&#34;925http-之上的hmac&#34;&gt;9.2.5　HTTP 之上的HMAC&lt;/h5&gt;
&lt;h5 id=&#34;926api-密钥&#34;&gt;9.2.6　API 密钥&lt;/h5&gt;
&lt;h5 id=&#34;927代理问题&#34;&gt;9.2.7　代理问题&lt;/h5&gt;
&lt;h4 id=&#34;93静态数据的安全&#34;&gt;9.3　静态数据的安全&lt;/h4&gt;
&lt;h5 id=&#34;931使用众所周知的加密算法&#34;&gt;9.3.1　使用众所周知的加密算法&lt;/h5&gt;
&lt;h5 id=&#34;932一切皆与密钥相关&#34;&gt;9.3.2　一切皆与密钥相关&lt;/h5&gt;
&lt;h5 id=&#34;933选择你的目标&#34;&gt;9.3.3　选择你的目标&lt;/h5&gt;
&lt;h5 id=&#34;934按需解密&#34;&gt;9.3.4　按需解密&lt;/h5&gt;
&lt;h5 id=&#34;935加密备份&#34;&gt;9.3.5　加密备份&lt;/h5&gt;
&lt;h4 id=&#34;94深度防御&#34;&gt;9.4　深度防御&lt;/h4&gt;
&lt;h5 id=&#34;941防火墙&#34;&gt;9.4.1　防火墙&lt;/h5&gt;
&lt;h5 id=&#34;942日志&#34;&gt;9.4.2　日志&lt;/h5&gt;
&lt;h5 id=&#34;943入侵检测和预防系统&#34;&gt;9.4.3　入侵检测（和预防）系统&lt;/h5&gt;
&lt;h5 id=&#34;944网络隔离&#34;&gt;9.4.4　网络隔离&lt;/h5&gt;
&lt;h5 id=&#34;945操作系统&#34;&gt;9.4.5　操作系统&lt;/h5&gt;
&lt;h4 id=&#34;95一个示例&#34;&gt;9.5　一个示例&lt;/h4&gt;
&lt;h4 id=&#34;96保持节俭&#34;&gt;9.6　保持节俭&lt;/h4&gt;
&lt;h4 id=&#34;97人的因素&#34;&gt;9.7　人的因素&lt;/h4&gt;
&lt;h4 id=&#34;98黄金法则&#34;&gt;9.8　黄金法则&lt;/h4&gt;
&lt;h4 id=&#34;99内建安全&#34;&gt;9.9　内建安全&lt;/h4&gt;
&lt;h4 id=&#34;910外部验证&#34;&gt;9.10　外部验证&lt;/h4&gt;
&lt;h4 id=&#34;911小结&#34;&gt;9.11　小结&lt;/h4&gt;
&lt;h2 id=&#34;第10章-康威定律和系统设计&#34;&gt;第10章 康威定律和系统设计&lt;/h2&gt;
&lt;h4 id=&#34;101证据&#34;&gt;10.1　证据&lt;/h4&gt;
&lt;h5 id=&#34;1011松耦合组织和紧耦合组织&#34;&gt;10.1.1　松耦合组织和紧耦合组织&lt;/h5&gt;
&lt;h5 id=&#34;1012windows-vista&#34;&gt;10.1.2　Windows Vista&lt;/h5&gt;
&lt;h4 id=&#34;102netflix-和amazon&#34;&gt;10.2　Netflix 和Amazon&lt;/h4&gt;
&lt;h4 id=&#34;103我们可以做什么&#34;&gt;10.3　我们可以做什么&lt;/h4&gt;
&lt;h4 id=&#34;104适应沟通途径&#34;&gt;10.4　适应沟通途径&lt;/h4&gt;
&lt;h4 id=&#34;105服务所有权&#34;&gt;10.5　服务所有权&lt;/h4&gt;
&lt;h4 id=&#34;106共享服务的原因&#34;&gt;10.6　共享服务的原因&lt;/h4&gt;
&lt;h5 id=&#34;1061难以分割&#34;&gt;10.6.1　难以分割&lt;/h5&gt;
&lt;h5 id=&#34;1062特性团队&#34;&gt;10.6.2　特性团队&lt;/h5&gt;
&lt;h5 id=&#34;1063交付瓶颈&#34;&gt;10.6.3　交付瓶颈&lt;/h5&gt;
&lt;h4 id=&#34;107内部开源&#34;&gt;10.7　内部开源&lt;/h4&gt;
&lt;h5 id=&#34;1071守护者的角色&#34;&gt;10.7.1　守护者的角色&lt;/h5&gt;
&lt;h5 id=&#34;1072成熟&#34;&gt;10.7.2　成熟&lt;/h5&gt;
&lt;h5 id=&#34;1073工具&#34;&gt;10.7.3　工具&lt;/h5&gt;
&lt;h4 id=&#34;108限界上下文和团队结构&#34;&gt;10.8　限界上下文和团队结构&lt;/h4&gt;
&lt;h4 id=&#34;109孤儿服务&#34;&gt;10.9　孤儿服务&lt;/h4&gt;
&lt;h4 id=&#34;1010案例研究realestatecomau&#34;&gt;10.10　案例研究：RealEstate.com.au&lt;/h4&gt;
&lt;h4 id=&#34;1011反向的康威定律&#34;&gt;10.11　反向的康威定律&lt;/h4&gt;
&lt;h4 id=&#34;1012人&#34;&gt;10.12　人&lt;/h4&gt;
&lt;h4 id=&#34;1013小结&#34;&gt;10.13　小结&lt;/h4&gt;
&lt;h2 id=&#34;第11章-规模化微服务&#34;&gt;第11章 规模化微服务&lt;/h2&gt;
&lt;h4 id=&#34;111故障无处不在&#34;&gt;11.1　故障无处不在&lt;/h4&gt;
&lt;h4 id=&#34;112多少是太多&#34;&gt;11.2　多少是太多&lt;/h4&gt;
&lt;h4 id=&#34;113功能降级&#34;&gt;11.3　功能降级&lt;/h4&gt;
&lt;h4 id=&#34;114架构性安全措施&#34;&gt;11.4　架构性安全措施&lt;/h4&gt;
&lt;h4 id=&#34;115反脆弱的组织&#34;&gt;11.5　反脆弱的组织&lt;/h4&gt;
&lt;h5 id=&#34;1151超时&#34;&gt;11.5.1　超时&lt;/h5&gt;
&lt;h5 id=&#34;1152断路器&#34;&gt;11.5.2　断路器&lt;/h5&gt;
&lt;h5 id=&#34;1153舱壁&#34;&gt;11.5.3　舱壁&lt;/h5&gt;
&lt;h5 id=&#34;1154隔离&#34;&gt;11.5.4　隔离&lt;/h5&gt;
&lt;h4 id=&#34;116幂等&#34;&gt;11.6　幂等&lt;/h4&gt;
&lt;h4 id=&#34;117扩展&#34;&gt;11.7　扩展&lt;/h4&gt;
&lt;h5 id=&#34;1171更强大的主机&#34;&gt;11.7.1　更强大的主机&lt;/h5&gt;
&lt;h5 id=&#34;1172拆分负载&#34;&gt;11.7.2　拆分负载&lt;/h5&gt;
&lt;h5 id=&#34;1173分散风险&#34;&gt;11.7.3　分散风险&lt;/h5&gt;
&lt;h5 id=&#34;1174负载均衡&#34;&gt;11.7.4　负载均衡&lt;/h5&gt;
&lt;h5 id=&#34;1175基于worker-的系统&#34;&gt;11.7.5　基于worker 的系统&lt;/h5&gt;
&lt;h5 id=&#34;1176重新设计&#34;&gt;11.7.6　重新设计&lt;/h5&gt;
&lt;h4 id=&#34;118扩展数据库&#34;&gt;11.8　扩展数据库&lt;/h4&gt;
&lt;h5 id=&#34;1181服务的可用性和数据的持久性&#34;&gt;11.8.1　服务的可用性和数据的持久性&lt;/h5&gt;
&lt;h5 id=&#34;1182扩展读取&#34;&gt;11.8.2　扩展读取&lt;/h5&gt;
&lt;h5 id=&#34;1182扩展写操作&#34;&gt;11.8.2　扩展写操作&lt;/h5&gt;
&lt;h5 id=&#34;1184共享数据库基础设施&#34;&gt;11.8.4　共享数据库基础设施&lt;/h5&gt;
&lt;h5 id=&#34;1185cqrs&#34;&gt;11.8.5　CQRS&lt;/h5&gt;
&lt;h4 id=&#34;119缓存&#34;&gt;11.9　缓存&lt;/h4&gt;
&lt;h5 id=&#34;1191客户端-代理和服务器端缓存&#34;&gt;11.9.1　客户端、 代理和服务器端缓存&lt;/h5&gt;
&lt;h5 id=&#34;1192http-缓存&#34;&gt;11.9.2　HTTP 缓存&lt;/h5&gt;
&lt;h5 id=&#34;1193为写使用缓存&#34;&gt;11.9.3　为写使用缓存&lt;/h5&gt;
&lt;h5 id=&#34;1194为弹性使用缓存&#34;&gt;11.9.4　为弹性使用缓存&lt;/h5&gt;
&lt;h5 id=&#34;1195隐藏源服务&#34;&gt;11.9.5　隐藏源服务&lt;/h5&gt;
&lt;h5 id=&#34;1196保持简单&#34;&gt;11.9.6　保持简单&lt;/h5&gt;
&lt;h5 id=&#34;1197缓存中毒一个警示&#34;&gt;11.9.7　缓存中毒：一个警示&lt;/h5&gt;
&lt;h4 id=&#34;1110自动伸缩&#34;&gt;11.10　自动伸缩&lt;/h4&gt;
&lt;h4 id=&#34;1111cap-定理&#34;&gt;11.11　CAP 定理&lt;/h4&gt;
&lt;h5 id=&#34;11111牺牲一致性&#34;&gt;11.11.1　牺牲一致性&lt;/h5&gt;
&lt;h5 id=&#34;11112牺牲可用性&#34;&gt;11.11.2　牺牲可用性&lt;/h5&gt;
&lt;h5 id=&#34;11113牺牲分区容忍性&#34;&gt;11.11.3　牺牲分区容忍性&lt;/h5&gt;
&lt;h5 id=&#34;11114ap-还是cp&#34;&gt;11.11.4　AP 还是CP&lt;/h5&gt;
&lt;h5 id=&#34;11115这不是全部或全不&#34;&gt;11.11.5　这不是全部或全不&lt;/h5&gt;
&lt;h5 id=&#34;11116真实世界&#34;&gt;11.11.6　真实世界&lt;/h5&gt;
&lt;h4 id=&#34;1112服务发现&#34;&gt;11.12　服务发现&lt;/h4&gt;
&lt;h4 id=&#34;1113动态服务注册&#34;&gt;11.13　动态服务注册&lt;/h4&gt;
&lt;h5 id=&#34;11131zookeeper&#34;&gt;11.13.1　Zookeeper&lt;/h5&gt;
&lt;h5 id=&#34;11132consul&#34;&gt;11.13.2　Consul&lt;/h5&gt;
&lt;h5 id=&#34;11134构造你自己的系统&#34;&gt;11.13.4　构造你自己的系统&lt;/h5&gt;
&lt;h5 id=&#34;11135别忘了人&#34;&gt;11.13.5　别忘了人&lt;/h5&gt;
&lt;h5 id=&#34;1114文档服务&#34;&gt;11.14　文档服务&lt;/h5&gt;
&lt;h5 id=&#34;11141swagger&#34;&gt;11.14.1　Swagger&lt;/h5&gt;
&lt;h5 id=&#34;11142hal-和hal-浏览器&#34;&gt;11.14.2　HAL 和HAL 浏览器&lt;/h5&gt;
&lt;h4 id=&#34;1115自描述系统&#34;&gt;11.15　自描述系统&lt;/h4&gt;
&lt;h4 id=&#34;1116小结&#34;&gt;11.16　小结&lt;/h4&gt;
&lt;h2 id=&#34;第12章-总结&#34;&gt;第12章 总结&lt;/h2&gt;
&lt;h4 id=&#34;121微服务的原则&#34;&gt;12.1　微服务的原则&lt;/h4&gt;
&lt;h5 id=&#34;1211围绕业务概念建模&#34;&gt;12.1.1　围绕业务概念建模&lt;/h5&gt;
&lt;h5 id=&#34;1212接受自动化文化&#34;&gt;12.1.2　接受自动化文化&lt;/h5&gt;
&lt;h5 id=&#34;1213隐藏内部实现细节&#34;&gt;12.1.3　隐藏内部实现细节&lt;/h5&gt;
&lt;h5 id=&#34;1214让一切都去中心化&#34;&gt;12.1.4　让一切都去中心化&lt;/h5&gt;
&lt;h5 id=&#34;1215可独立部署&#34;&gt;12.1.5　可独立部署&lt;/h5&gt;
&lt;h5 id=&#34;1216隔离失败&#34;&gt;12.1.6　隔离失败&lt;/h5&gt;
&lt;h5 id=&#34;1217高度可观察&#34;&gt;12.1.7　高度可观察&lt;/h5&gt;
&lt;h4 id=&#34;122什么时候你不应该使用微服务&#34;&gt;12.2　什么时候你不应该使用微服务&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>A Tour of Go</title>
      <link>http://csyezheng.github.io/post/programming-languages/go/a-tour-of-go/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/go/a-tour-of-go/</guid>
      
        <description>&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;h3 id=&#34;packages-variables-and-functions&#34;&gt;Packages, variables, and functions.&lt;/h3&gt;
&lt;h4 id=&#34;packages&#34;&gt;Packages&lt;/h4&gt;
&lt;p&gt;Programs start running in package &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By convention, the package name is the same as the last element of the import path. For instance, the &lt;code&gt;&amp;quot;math/rand&amp;quot;&lt;/code&gt; package comprises files that begin with the statement &lt;code&gt;package rand&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;imports&#34;&gt;Imports&lt;/h4&gt;
&lt;p&gt;It is good style to use the factored import statement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exported-names&#34;&gt;Exported names&lt;/h4&gt;
&lt;p&gt;In Go, a name is exported if it begins with a capital letter. For example, &lt;code&gt;Pizza&lt;/code&gt; is an exported name, as is &lt;code&gt;Pi&lt;/code&gt;, which is exported from the &lt;code&gt;math&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pizza&lt;/code&gt; and &lt;code&gt;pi&lt;/code&gt; do not start with a capital letter, so they are not exported.&lt;/p&gt;
&lt;p&gt;When importing a package, you can refer only to its exported names like &lt;code&gt;math.Pi&lt;/code&gt;. Any &amp;ldquo;unexported&amp;rdquo; names are not accessible from outside the package.&lt;/p&gt;
&lt;h4 id=&#34;functions&#34;&gt;Functions&lt;/h4&gt;
&lt;p&gt;A function can take zero or more arguments. Notice that the type comes &lt;em&gt;after&lt;/em&gt; the argument name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func add(x int, y int) int {}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;functions-continued&#34;&gt;Functions continued&lt;/h4&gt;
&lt;p&gt;When two or more consecutive named function parameters share a type, you can omit the type from all but the last.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func add(x, y int) int {}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;multiple-results&#34;&gt;Multiple results&lt;/h4&gt;
&lt;p&gt;A function can return any number of results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func swap(x, y string) (string, string) {
	return y, x
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;named-return-values&#34;&gt;Named return values&lt;/h4&gt;
&lt;p&gt;Go&amp;rsquo;s return values may be named. These names should be used to document the meaning of the return values.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;return&lt;/code&gt; statement without arguments returns the named return values. This is known as a &amp;ldquo;naked&amp;rdquo; return.&lt;/p&gt;
&lt;p&gt;Naked return statements should be used only in short functions. They can harm readability in longer functions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; statement declares a list of variables; as in function argument lists, the type is last.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var c, python, java bool
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;variables-with-initializers&#34;&gt;Variables with initializers&lt;/h4&gt;
&lt;p&gt;If an initializer is present, the type can be omitted&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var c, python, java = true, false, &amp;quot;no!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;short-variable-declarations&#34;&gt;Short variable declarations&lt;/h4&gt;
&lt;p&gt;Inside a function, the &lt;code&gt;:=&lt;/code&gt; short assignment statement can be used in place of a &lt;code&gt;var&lt;/code&gt; declaration with implicit type.&lt;/p&gt;
&lt;p&gt;Outside a function, every statement begins with a keyword (&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;func&lt;/code&gt;, and so on) and so the &lt;code&gt;:=&lt;/code&gt;construct is not available.&lt;/p&gt;
&lt;h4 id=&#34;basic-types&#34;&gt;Basic types&lt;/h4&gt;
&lt;p&gt;Go&amp;rsquo;s basic types are&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, and &lt;code&gt;uintptr&lt;/code&gt; types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer value you should use &lt;code&gt;int&lt;/code&gt; unless you have a specific reason to use a sized or unsigned integer type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// variable declarations may be &amp;quot;factored&amp;quot; into blocks
var (
	ToBe   bool       = false
	MaxInt uint64     = 1&amp;lt;&amp;lt;64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;zero-values&#34;&gt;Zero values&lt;/h4&gt;
&lt;p&gt;Variables declared without an explicit initial value are given their &lt;em&gt;zero value&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The zero value is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; for numeric types,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; for the boolean type, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; (the empty string) for strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type-conversions&#34;&gt;Type conversions&lt;/h4&gt;
&lt;p&gt;The expression &lt;code&gt;T(v)&lt;/code&gt; converts the value &lt;code&gt;v&lt;/code&gt; to the type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i := 42
f := float64(i)
u := uint(f)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unlike in C, in Go assignment between items of different type requires an explicit conversion.&lt;/p&gt;
&lt;h4 id=&#34;type-inference&#34;&gt;Type inference&lt;/h4&gt;
&lt;p&gt;When declaring a variable without specifying an explicit type, the variable&amp;rsquo;s type is inferred from the value on the right hand side.&lt;/p&gt;
&lt;p&gt;When the right hand side contains an untyped numeric constant, the new variable may be an &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, or &lt;code&gt;complex128&lt;/code&gt; depending on the precision of the constant:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;constants&#34;&gt;Constants&lt;/h4&gt;
&lt;p&gt;Constants are declared like variables, but with the &lt;code&gt;const&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Constants can be character, string, boolean, or numeric values.&lt;/p&gt;
&lt;p&gt;Constants cannot be declared using the &lt;code&gt;:=&lt;/code&gt; syntax.&lt;/p&gt;
&lt;h4 id=&#34;numeric-constants&#34;&gt;Numeric Constants&lt;/h4&gt;
&lt;p&gt;Numeric constants are high-precision &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An untyped constant takes the type needed by its context.&lt;/p&gt;
&lt;h3 id=&#34;for-if-else-switch-and-defer&#34;&gt;for, if, else, switch and defer&lt;/h3&gt;
&lt;h4 id=&#34;for&#34;&gt;For&lt;/h4&gt;
&lt;p&gt;Go has only one looping construct, the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;Unlike other languages like C, Java, or JavaScript there are no parentheses surrounding the three components of the &lt;code&gt;for&lt;/code&gt; statement and the braces &lt;code&gt;{ }&lt;/code&gt; are always required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i := 0; i &amp;lt; 10; i++ {
	sum += i
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;for-continued&#34;&gt;For continued&lt;/h4&gt;
&lt;p&gt;The init and post statements are optional.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sum := 1
for ; sum &amp;lt; 1000; {
	sum += sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;for-is-gos-while&#34;&gt;For is Go&amp;rsquo;s &amp;ldquo;while&amp;rdquo;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;for sum &amp;lt; 1000 {
	sum += sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;forever&#34;&gt;Forever&lt;/h4&gt;
&lt;p&gt;If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for {
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;if&#34;&gt;If&lt;/h4&gt;
&lt;p&gt;Go&amp;rsquo;s &lt;code&gt;if&lt;/code&gt; statements need not be surrounded by parentheses &lt;code&gt;( )&lt;/code&gt; but the braces &lt;code&gt;{ }&lt;/code&gt; are required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if x &amp;lt; 0 {
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;if-with-a-short-statement&#34;&gt;If with a short statement&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement can start with a short statement to execute before the condition. Variables declared by the statement are only in scope until the end of the &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if v := math.Pow(x, n); v &amp;lt; lim {
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;if-and-else&#34;&gt;If and else&lt;/h4&gt;
&lt;p&gt;Variables declared inside an &lt;code&gt;if&lt;/code&gt; short statement are also available inside any of the &lt;code&gt;else&lt;/code&gt; blocks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if v := math.Pow(x, n); v &amp;lt; lim {
	return v
} else {
	fmt.Printf(&amp;quot;%g &amp;gt;= %g\n&amp;quot;, v, lim)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;switch&#34;&gt;Switch&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement is a shorter way to write a sequence of &lt;code&gt;if - else&lt;/code&gt; statements. It runs the first case whose value is equal to the condition expression.&lt;/p&gt;
&lt;p&gt;Go only runs the selected case, not all the cases that follow. In effect, the &lt;code&gt;break&lt;/code&gt; statement that is needed at the end of each case in other languages is provided automatically in Go. Another important difference is that Go&amp;rsquo;s switch cases need not be constants, and the values involved need not be integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
	fmt.Print(&amp;quot;Go runs on &amp;quot;)
	switch os := runtime.GOOS; os {
	case &amp;quot;darwin&amp;quot;:
		fmt.Println(&amp;quot;OS X.&amp;quot;)
	case &amp;quot;linux&amp;quot;:
		fmt.Println(&amp;quot;Linux.&amp;quot;)
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf(&amp;quot;%s.\n&amp;quot;, os)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;switch-evaluation-order&#34;&gt;Switch evaluation order&lt;/h4&gt;
&lt;p&gt;Switch cases evaluate cases from top to bottom, stopping when a case succeeds.&lt;/p&gt;
&lt;h4 id=&#34;switch-with-no-condition&#34;&gt;Switch with no condition&lt;/h4&gt;
&lt;p&gt;Switch without a condition is the same as &lt;code&gt;switch true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This construct can be a clean way to write long if-then-else chains.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
	t := time.Now()
	switch {
	case t.Hour() &amp;lt; 12:
		fmt.Println(&amp;quot;Good morning!&amp;quot;)
	case t.Hour() &amp;lt; 17:
		fmt.Println(&amp;quot;Good afternoon.&amp;quot;)
	default:
		fmt.Println(&amp;quot;Good evening.&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;defer&#34;&gt;Defer&lt;/h4&gt;
&lt;p&gt;A defer statement defers the execution of a function until the surrounding function returns.&lt;/p&gt;
&lt;p&gt;The deferred call&amp;rsquo;s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
	defer fmt.Println(&amp;quot;world&amp;quot;)
	fmt.Println(&amp;quot;hello&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;stacking-defers&#34;&gt;Stacking defers&lt;/h4&gt;
&lt;p&gt;Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.&lt;/p&gt;
&lt;h3 id=&#34;more-types-structs-arrays-slices-and-maps&#34;&gt;More types: structs, arrays, slices, and maps.&lt;/h3&gt;
&lt;h4 id=&#34;pointers&#34;&gt;Pointers&lt;/h4&gt;
&lt;p&gt;Go has pointers. A pointer holds the memory address of a value.&lt;/p&gt;
&lt;p&gt;The type &lt;code&gt;*T&lt;/code&gt; is a pointer to a &lt;code&gt;T&lt;/code&gt; value. Its zero value is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p *int
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;i := 42
p = &amp;amp;i   // The &amp;amp; operator generates a pointer to its operand.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator denotes the pointer&amp;rsquo;s underlying value. This is known as &amp;ldquo;dereferencing&amp;rdquo; or &amp;ldquo;indirecting&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fmt.Println(*p) // read i through the pointer p
*p = 21         // set i through the pointer p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unlike C, Go has no pointer arithmetic.&lt;/p&gt;
&lt;h4 id=&#34;structs&#34;&gt;Structs&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;struct&lt;/code&gt; is a collection of fields.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	X int
	Y int
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;struct-fields&#34;&gt;Struct Fields&lt;/h4&gt;
&lt;p&gt;Struct fields are accessed using a dot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v := Vertex{1, 2}
v.X = 4
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;pointers-to-structs&#34;&gt;Pointers to structs&lt;/h4&gt;
&lt;p&gt;Struct fields can be accessed through a struct pointer. The language permits us instead to write just &lt;code&gt;p.X&lt;/code&gt;, without the explicit dereference.&lt;/p&gt;
&lt;h4 id=&#34;struct-literals&#34;&gt;Struct Literals&lt;/h4&gt;
&lt;p&gt;A struct literal denotes a newly allocated struct value by listing the values of its fields. You can list just a subset of fields by using the &lt;code&gt;Name:&lt;/code&gt;syntax.&lt;/p&gt;
&lt;p&gt;The special prefix &lt;code&gt;&amp;amp;&lt;/code&gt; returns a pointer to the struct value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	X, Y int
}
v1 = Vertex{1, 2}  // has type Vertex
v2 = Vertex{X: 1}  // Y:0 is implicit
v3 = Vertex{}      // X:0 and Y:0
p  = &amp;amp;Vertex{1, 2} // has type *Vertex
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;arrays&#34;&gt;Arrays&lt;/h4&gt;
&lt;p&gt;The type &lt;code&gt;[n]T&lt;/code&gt; is an array of &lt;code&gt;n&lt;/code&gt; values of type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a [10]int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Arrays cannot be resized.&lt;/p&gt;
&lt;h4 id=&#34;slices&#34;&gt;Slices&lt;/h4&gt;
&lt;p&gt;An array has a fixed size. A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array.&lt;/p&gt;
&lt;p&gt;The type &lt;code&gt;[]T&lt;/code&gt; is a slice with elements of type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A slice is formed by specifying two indices, a low and high bound, separated by a colon, which is a half-open range:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a[low : high]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;slices-are-like-references-to-arrays&#34;&gt;Slices are like references to arrays&lt;/h4&gt;
&lt;p&gt;A slice does not store any data, it just describes a section of an underlying array.&lt;/p&gt;
&lt;p&gt;Changing the elements of a slice modifies the corresponding elements of its underlying array.&lt;/p&gt;
&lt;h4 id=&#34;slice-literals&#34;&gt;Slice literals&lt;/h4&gt;
&lt;p&gt;A slice literal is like an array literal without the length.&lt;/p&gt;
&lt;p&gt;This creates an array, then builds a slice that references it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[]bool{true, true, false}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;slice-defaults&#34;&gt;Slice defaults&lt;/h4&gt;
&lt;p&gt;When slicing, you may omit the high or low bounds to use their defaults instead.&lt;/p&gt;
&lt;p&gt;The default is zero for the low bound and the length of the slice for the high bound.&lt;/p&gt;
&lt;h4 id=&#34;slice-length-and-capacity&#34;&gt;Slice length and capacity&lt;/h4&gt;
&lt;p&gt;A slice has both a &lt;em&gt;length&lt;/em&gt; and a &lt;em&gt;capacity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The length of a slice is the number of elements it contains.&lt;/p&gt;
&lt;p&gt;The capacity of a slice is the number of elements in the underlying array, &lt;strong&gt;counting from the first element in the slice&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The length and capacity of a slice &lt;code&gt;s&lt;/code&gt; can be obtained using the expressions &lt;code&gt;len(s)&lt;/code&gt; and &lt;code&gt;cap(s)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can extend a slice&amp;rsquo;s length by re-slicing it, provided it has sufficient capacity.&lt;/p&gt;
&lt;h4 id=&#34;nil-slices&#34;&gt;Nil slices&lt;/h4&gt;
&lt;p&gt;The zero value of a slice is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A nil slice has a length and capacity of 0 and has no underlying array.&lt;/p&gt;
&lt;h4 id=&#34;creating-a-slice-with-make&#34;&gt;Creating a slice with make&lt;/h4&gt;
&lt;p&gt;Slices can be created with the built-in &lt;code&gt;make&lt;/code&gt; function; &lt;strong&gt;this is how you create dynamically-sized arrays&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;make&lt;/code&gt; function allocates a zeroed array and returns a slice that refers to that array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a := make([]int, 5)  // len(a)=5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To specify a capacity, pass a third argument to &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b := make([]int, 0, 5) // len(b)=0, cap(b)=5

b = b[:cap(b)] // len(b)=5, cap(b)=5
b = b[1:]      // len(b)=4, cap(b)=4
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;slices-of-slices&#34;&gt;Slices of slices&lt;/h4&gt;
&lt;p&gt;Slices can contain any type, including other slices.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;board := [][]string{
	[]string{&amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;},
	[]string{&amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;},
	[]string{&amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;, &amp;quot;_&amp;quot;},
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;appending-to-a-slice&#34;&gt;Appending to a slice&lt;/h4&gt;
&lt;p&gt;It is common to append new elements to a slice, and so Go provides a built-in &lt;code&gt;append&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func append(s []T, vs ...T) []T
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;var s []int
s = append(s, 0)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;range&#34;&gt;Range&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; form of the &lt;code&gt;for&lt;/code&gt; loop iterates over a slice or map.&lt;/p&gt;
&lt;p&gt;When ranging over a slice, two values are returned for each iteration. The first is the index, and the second is a copy of the element at that index.&lt;/p&gt;
&lt;h4 id=&#34;range-continued&#34;&gt;Range continued&lt;/h4&gt;
&lt;p&gt;You can skip the index or value by assigning to &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pow := make([]int, 10)
for _, value := range pow {
	fmt.Printf(&amp;quot;%d\n&amp;quot;, value)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-slices&#34;&gt;Exercise: Slices&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;func Pic(dx, dy int) [][]uint8 {
    var ret [][]unit8
	for i:=0; i!=dy; i++ {
	    row := make([]uint8, dy)
		for j, _ := range row {
		    row[i] = uint8(j)
	    }
		ret.append(row)
	}
	return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;maps&#34;&gt;Maps&lt;/h4&gt;
&lt;p&gt;A map maps keys to values.&lt;/p&gt;
&lt;p&gt;The zero value of a map is &lt;code&gt;nil&lt;/code&gt;. A &lt;code&gt;nil&lt;/code&gt; map has no keys, nor can keys be added.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;make&lt;/code&gt; function returns a map of the given type, initialized and ready for use.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	Lat, Long float64
}
var m = make(map[string]Vertex)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;map-literals&#34;&gt;Map literals&lt;/h4&gt;
&lt;p&gt;Map literals are like struct literals, but the keys are required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var m = map[string]Vertex{
	&amp;quot;Bell Labs&amp;quot;: Vertex{
		40.68433, -74.39967,
	},
	&amp;quot;Google&amp;quot;: Vertex{
		37.42202, -122.08408,
	},
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;map-literals-continued&#34;&gt;Map literals continued&lt;/h4&gt;
&lt;p&gt;If the top-level type is just a type name, you can omit it from the elements of the literal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var m = map[string]Vertex{
	&amp;quot;Bell Labs&amp;quot;: {40.68433, -74.39967},
	&amp;quot;Google&amp;quot;:    {37.42202, -122.08408},
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;mutating-maps&#34;&gt;Mutating Maps&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;m[key] = elem    // Insert or update an element
elem = m[key]    // Retrieve an element
delete(m, key)   // Delete an element
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Test that a key is present with a two-value assignment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elem, ok := m[key]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If &lt;code&gt;key&lt;/code&gt; is in &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;ok&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If not, &lt;code&gt;ok&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;key&lt;/code&gt; is not in the map, then &lt;code&gt;elem&lt;/code&gt; is the zero value for the map&amp;rsquo;s element type.&lt;/p&gt;
&lt;h4 id=&#34;exercise-maps&#34;&gt;Exercise: Maps&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;func WordCount(s string) map[string]int {
    ret := make(map[string]int)
    for _, v := range strings.Fields(s) {
	    ret[v] += 1
	}
	return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;function-values&#34;&gt;Function values&lt;/h4&gt;
&lt;p&gt;Functions are values too. They can be passed around just like other values.&lt;/p&gt;
&lt;p&gt;Function values may be used as function arguments and return values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func compute(fn func(float64, float64) float64) float64 {
	return fn(3, 4)
}
hypot := func(x, y float64) float64 {
	return math.Sqrt(x*x + y*y)
}
fmt.Println(compute(hypot))
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;function-closures&#34;&gt;Function closures&lt;/h4&gt;
&lt;p&gt;Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is &amp;ldquo;bound&amp;rdquo; to the variables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func adder() func(int) int {
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-fibonacci-closure&#34;&gt;Exercise: Fibonacci closure&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;func fibonacci() func() int {
    x, y := 0, 1
    return func() int {
	    x, y = y, x + y
		return x
	}
}

func main() {
	f := fibonacci()
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(f())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;methods-and-interfaces&#34;&gt;Methods and interfaces&lt;/h2&gt;
&lt;p&gt;the constructs that define objects and their behavior.&lt;/p&gt;
&lt;h3 id=&#34;methods-and-interfaces-1&#34;&gt;Methods and interfaces&lt;/h3&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;Go does not have classes. However, you can define methods on types.&lt;/p&gt;
&lt;p&gt;A method is a function with a special &lt;em&gt;&lt;strong&gt;receiver&lt;/strong&gt;&lt;/em&gt; argument.&lt;/p&gt;
&lt;p&gt;The receiver appears in its own argument list between the &lt;code&gt;func&lt;/code&gt; keyword and the method name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	X, Y float64
}

// the Abs method has a receiver of type Vertex named v.
func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	v := Vertex{3, 4}
	fmt.Println(v.Abs())
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;methods-are-functions&#34;&gt;Methods are functions&lt;/h4&gt;
&lt;p&gt;Remember: a method is just a function with a receiver argument.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// written as a regular function with no change in functionality
func Abs(v Vertex) float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;methods-continued&#34;&gt;Methods continued&lt;/h4&gt;
&lt;p&gt;You can declare a method on non-struct types, too.&lt;/p&gt;
&lt;p&gt;You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyFloat float64

func (f MyFloat) Abs() float64 {
	if f &amp;lt; 0 {
		return float64(-f)
	}
	return float64(f)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;pointer-receivers&#34;&gt;Pointer receivers&lt;/h4&gt;
&lt;p&gt;You can declare methods with pointer receivers.&lt;/p&gt;
&lt;p&gt;This means the receiver type has the literal syntax &lt;code&gt;*T&lt;/code&gt; for some type &lt;code&gt;T&lt;/code&gt;. (Also, &lt;code&gt;T&lt;/code&gt; cannot itself be a pointer such as &lt;code&gt;*int&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;Scale&lt;/code&gt; method here is defined on &lt;code&gt;*Vertex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Methods with pointer receivers can modify the value to which the receiver points. Since methods often need to modify their receiver, pointer receivers are more common than value receivers.&lt;/p&gt;
&lt;p&gt;With a value receiver, the  method operates on a copy of the original value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	X, Y float64
}

func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func (v *Vertex) Scale(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

func main() {
	v := Vertex{3, 4}
	v.Scale(10)
	fmt.Println(v.Abs())
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;pointers-and-functions&#34;&gt;Pointers and functions&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Abs&lt;/code&gt; and &lt;code&gt;Scale&lt;/code&gt; methods rewritten as functions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Vertex struct {
	X, Y float64
}

func Abs(v Vertex) float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func Scale(v *Vertex, f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

func main() {
	v := Vertex{3, 4}
	Scale(&amp;amp;v, 10)
	fmt.Println(Abs(v))
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;methods-and-pointer-indirection&#34;&gt;Methods and pointer indirection&lt;/h4&gt;
&lt;p&gt;Comparing the previous two programs, you might notice that functions with a pointer argument must take a pointer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var v Vertex
ScaleFunc(v, 5)  // Compile error!
ScaleFunc(&amp;amp;v, 5) // OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;while methods with pointer receivers take either a value or a pointer as the receiver when they are called:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var v Vertex
v.Scale(5)  // OK
p := &amp;amp;v
p.Scale(10) // OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For the statement &lt;code&gt;v.Scale(5)&lt;/code&gt;, even though &lt;code&gt;v&lt;/code&gt; is a value and not a pointer, the method with the pointer receiver is called automatically. That is, as a convenience, Go interprets the statement &lt;code&gt;v.Scale(5)&lt;/code&gt; as &lt;code&gt;(&amp;amp;v).Scale(5)&lt;/code&gt; since the &lt;code&gt;Scale&lt;/code&gt; method has a pointer receiver.&lt;/p&gt;
&lt;h4 id=&#34;methods-and-pointer-indirection-2&#34;&gt;Methods and pointer indirection (2)&lt;/h4&gt;
&lt;p&gt;The equivalent thing happens in the reverse direction.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
func AbsFunc(v Vertex) float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Functions that take a value argument must take a value of that specific type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var v Vertex
fmt.Println(AbsFunc(v))  // OK
fmt.Println(AbsFunc(&amp;amp;v)) // Compile error!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;while methods with value receivers take either a value or a pointer as the receiver when they are called:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var v Vertex
fmt.Println(v.Abs()) // OK
p := &amp;amp;v
fmt.Println(p.Abs()) // OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the method call &lt;code&gt;p.Abs()&lt;/code&gt; is interpreted as &lt;code&gt;(*p).Abs()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;choosing-a-value-or-pointer-receiver&#34;&gt;Choosing a value or pointer receiver&lt;/h4&gt;
&lt;p&gt;There are two reasons to use a pointer receiver.&lt;/p&gt;
&lt;p&gt;The first is so that the method can modify the value that its receiver points to.&lt;/p&gt;
&lt;p&gt;The second is to avoid copying the value on each method call. This can be more efficient if the receiver is a large struct.&lt;/p&gt;
&lt;p&gt;In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both.&lt;/p&gt;
&lt;h4 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h4&gt;
&lt;p&gt;An &lt;em&gt;interface type&lt;/em&gt; is defined as a set of method signatures.&lt;/p&gt;
&lt;p&gt;A value of interface type can hold any value that implements those methods.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Abser interface {
	Abs() float64
}

func main() {
	var a Abser
	f := MyFloat(-math.Sqrt2)
	v := Vertex{3, 4}

	a = f  // a MyFloat implements Abser
	a = &amp;amp;v // a *Vertex implements Abser

	fmt.Println(a.Abs())
}

type MyFloat float64

func (f MyFloat) Abs() float64 {
	if f &amp;lt; 0 {
		return float64(-f)
	}
	return float64(f)
}

type Vertex struct {
	X, Y float64
}

func (v *Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;interfaces-are-implemented-implicitly&#34;&gt;Interfaces are implemented implicitly&lt;/h4&gt;
&lt;p&gt;A type implements an interface by implementing its methods. There is no explicit declaration of intent, no &amp;ldquo;implements&amp;rdquo; keyword.&lt;/p&gt;
&lt;p&gt;Implicit interfaces decouple the definition of an interface from its implementation, which could then appear in any package without prearrangement.&lt;/p&gt;
&lt;h4 id=&#34;interface-values&#34;&gt;Interface values&lt;/h4&gt;
&lt;p&gt;Under the hood, interface values can be thought of as a tuple of a value and a concrete type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(value, type)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An interface value holds a value of a specific underlying concrete type.&lt;/p&gt;
&lt;p&gt;Calling a method on an interface value executes the method of the same name on its underlying type.&lt;/p&gt;
&lt;h4 id=&#34;interface-values-with-nil-underlying-values&#34;&gt;Interface values with nil underlying values&lt;/h4&gt;
&lt;p&gt;If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.&lt;/p&gt;
&lt;p&gt;In some languages this would trigger a null pointer exception, but in Go it is common to write methods that gracefully handle being called with a nil receiver (as with the method &lt;code&gt;M&lt;/code&gt; in this example.)&lt;/p&gt;
&lt;p&gt;Note that an interface value that holds a nil concrete value is itself non-nil.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type I interface {
	M()
}

type T struct {
	S string
}

func (t *T) M() {
	if t == nil {
		fmt.Println(&amp;quot;&amp;lt;nil&amp;gt;&amp;quot;)
		return
	}
	fmt.Println(t.S)
}

func main() {
	var i I

	var t *T
	i = t
	describe(i)
	i.M()

	i = &amp;amp;T{&amp;quot;hello&amp;quot;}
	describe(i)
	i.M()
}

func describe(i I) {
	fmt.Printf(&amp;quot;(%v, %T)\n&amp;quot;, i, i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;nil-interface-values&#34;&gt;Nil interface values&lt;/h4&gt;
&lt;p&gt;A nil interface value holds neither value nor concrete type.&lt;/p&gt;
&lt;p&gt;Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which &lt;em&gt;concrete&lt;/em&gt; method to call.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type I interface {
	M()
}

func main() {
	var i I
	describe(i)
	i.M()
}

func describe(i I) {
	fmt.Printf(&amp;quot;(%v, %T)\n&amp;quot;, i, i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;the-empty-interface&#34;&gt;The empty interface&lt;/h4&gt;
&lt;p&gt;The interface type that specifies zero methods is known as the &lt;em&gt;empty interface&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface{}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An empty interface may hold values of any type. (Every type implements at least zero methods.)&lt;/p&gt;
&lt;p&gt;Empty interfaces are used by code that handles values of unknown type. For example, &lt;code&gt;fmt.Print&lt;/code&gt;takes any number of arguments of type &lt;code&gt;interface{}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
	var i interface{}
	describe(i)

	i = 42
	describe(i)

	i = &amp;quot;hello&amp;quot;
	describe(i)
}

func describe(i interface{}) {
	fmt.Printf(&amp;quot;(%v, %T)\n&amp;quot;, i, i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;type-assertions&#34;&gt;Type assertions&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;type assertion&lt;/em&gt; provides access to an interface value&amp;rsquo;s underlying concrete value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t := i.(T)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This statement asserts that the interface value &lt;code&gt;i&lt;/code&gt;holds the concrete type &lt;code&gt;T&lt;/code&gt; and assigns the underlying &lt;code&gt;T&lt;/code&gt; value to the variable &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;i&lt;/code&gt; does not hold a &lt;code&gt;T&lt;/code&gt;, the statement will trigger a panic.&lt;/p&gt;
&lt;p&gt;To &lt;em&gt;test&lt;/em&gt; whether an interface value holds a specific type, a type assertion can return two values: the underlying value and a boolean value that reports whether the assertion succeeded.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t, ok := i.(T)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If &lt;code&gt;i&lt;/code&gt; holds a &lt;code&gt;T&lt;/code&gt;, then &lt;code&gt;t&lt;/code&gt; will be the underlying value and &lt;code&gt;ok&lt;/code&gt; will be true.&lt;/p&gt;
&lt;p&gt;If not, &lt;code&gt;ok&lt;/code&gt; will be false and &lt;code&gt;t&lt;/code&gt; will be the zero value of type &lt;code&gt;T&lt;/code&gt;, and no panic occurs.&lt;/p&gt;
&lt;p&gt;Note the similarity between this syntax and that of reading from a map.&lt;/p&gt;
&lt;h4 id=&#34;type-switches&#34;&gt;Type switches&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;type switch&lt;/em&gt; is a construct that permits several type assertions in series.&lt;/p&gt;
&lt;p&gt;A type switch is like a regular switch statement, but the cases in a type switch specify types (not values), and those values are compared against the type of the value held by the given interface value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;switch v := i.(type) {
case T:
    // here v has type T
case S:
    // here v has type S
default:
    // no match; here v has the same type as i
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The declaration in a type switch has the same syntax as a type assertion &lt;code&gt;i.(T)&lt;/code&gt;, but the specific type &lt;code&gt;T&lt;/code&gt; is replaced with the keyword &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This switch statement tests whether the interface value &lt;code&gt;i&lt;/code&gt; holds a value of type &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt;. In each of the &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; cases, the variable &lt;code&gt;v&lt;/code&gt; will be of type &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt; respectively and hold the value held by &lt;code&gt;i&lt;/code&gt;. In the default case (where there is no match), the variable &lt;code&gt;v&lt;/code&gt; is of the same interface type and value as &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;stringers&#34;&gt;Stringers&lt;/h4&gt;
&lt;p&gt;One of the most ubiquitous interfaces is &lt;a href=&#34;https://golang.org/pkg/fmt/#Stringer&#34;&gt;&lt;code&gt;Stringer&lt;/code&gt;&lt;/a&gt; defined by the &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Stringer interface {
    String() string
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A &lt;code&gt;Stringer&lt;/code&gt; is a type that can describe itself as a string. The &lt;code&gt;fmt&lt;/code&gt; package (and many others) look for this interface to print values.&lt;/p&gt;
&lt;h4 id=&#34;exercise-stringers&#34;&gt;Exercise: Stringers&lt;/h4&gt;
&lt;p&gt;Make the &lt;code&gt;IPAddr&lt;/code&gt; type implement &lt;code&gt;fmt.Stringer&lt;/code&gt; to print the address as a dotted quad.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type IPAddr [4]byte

func (ip IPAddr) String() string {
    return fmt.Sprintf(&amp;quot;%v.%v.%v.%v&amp;quot;, ip[0], ip[1], ip[2], ip[3])
}

func main() {
	hosts := map[string]IPAddr{
		&amp;quot;loopback&amp;quot;:  {127, 0, 0, 1},
		&amp;quot;googleDNS&amp;quot;: {8, 8, 8, 8},
	}
	for name, ip := range hosts {
		fmt.Printf(&amp;quot;%v: %v\n&amp;quot;, name, ip)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;errors&#34;&gt;Errors&lt;/h4&gt;
&lt;p&gt;Go programs express error state with &lt;code&gt;error&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; type is a built-in interface similar to &lt;code&gt;fmt.Stringer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type error interface {
    Error() string
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(As with &lt;code&gt;fmt.Stringer&lt;/code&gt;, the &lt;code&gt;fmt&lt;/code&gt; package looks for the &lt;code&gt;error&lt;/code&gt; interface when printing values.)&lt;/p&gt;
&lt;p&gt;**Functions often return an &lt;code&gt;error&lt;/code&gt; value, and calling code should handle errors by testing whether the error equals &lt;code&gt;nil**&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i, err := strconv.Atoi(&amp;quot;42&amp;quot;)
if err != nil {
    fmt.Printf(&amp;quot;couldn&#39;t convert number: %v\n&amp;quot;, err)
    return
}
fmt.Println(&amp;quot;Converted integer:&amp;quot;, i)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A nil &lt;code&gt;error&lt;/code&gt; denotes success; a non-nil &lt;code&gt;error&lt;/code&gt; denotes failure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyError struct {
	When time.Time
	What string
}

func (e *MyError) Error() string {
	return fmt.Sprintf(&amp;quot;at %v, %s&amp;quot;,
		e.When, e.What)
}

func run() error {
	return &amp;amp;MyError{
		time.Now(),
		&amp;quot;it didn&#39;t work&amp;quot;,
	}
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-errors&#34;&gt;Exercise: Errors&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;func (e ErrNegativeSqrt) Error() string {
    return fmt.Sprintf(&amp;quot;cannot Sqrt negative number: %v&amp;quot;, float64(e))
}
    
func Sqrt(x float64) (float64, error) {
	return 0, nil
}

func Sqrt(x float64) (float64, error) {
	if x &amp;lt; 0 {
		return 0, ErrNegativeSqrt(x)
	}
	z := 1.0
	for {
		if math.Abs(z-(z-(z*z-x)/(z*2))) &amp;lt; 0.00000000000001 {
			return z, nil
		} else {
			z = z - (z*z-x)/(z*2)
		}
	}
}

func main() {
	fmt.Println(Sqrt(2))
	fmt.Println(Sqrt(-2))
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;readers&#34;&gt;Readers&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;io&lt;/code&gt; package specifies the &lt;code&gt;io.Reader&lt;/code&gt; interface, which represents the read end of a stream of data.&lt;/p&gt;
&lt;p&gt;The Go standard library contains &lt;a href=&#34;https://golang.org/search?q=Read#Global&#34;&gt;many implementations&lt;/a&gt; of these interfaces, including files, network connections, compressors, ciphers, and others.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;io.Reader&lt;/code&gt; interface has a &lt;code&gt;Read&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (T) Read(b []byte) (n int, err error)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Read&lt;/code&gt; populates the given byte slice with data and returns the number of bytes populated and an error value. It returns an &lt;code&gt;io.EOF&lt;/code&gt; error when the stream ends.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
	r := strings.NewReader(&amp;quot;Hello, Reader!&amp;quot;)

	b := make([]byte, 8)
	for {
	    // consumes its output 8 bytes at a time
		n, err := r.Read(b)
		fmt.Printf(&amp;quot;n = %v err = %v b = %v\n&amp;quot;, n, err, b)
		fmt.Printf(&amp;quot;b[:n] = %q\n&amp;quot;, b[:n])
		if err == io.EOF {
			break
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-readers&#34;&gt;Exercise: Readers&lt;/h4&gt;
&lt;p&gt;Implement a &lt;code&gt;Reader&lt;/code&gt; type that emits an infinite stream of the ASCII character &lt;code&gt;&#39;A&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyReader struct{}

func (r MyReader) Read(b []byte) (int, error) {
    for i, _ := range b {
	    b[i] = &#39;A&#39;
	}
	return len(b), nil
}

func main() {
	reader.Validate(MyReader{})
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-rot13reader&#34;&gt;Exercise: rot13Reader&lt;/h4&gt;
&lt;p&gt;A common pattern is an &lt;a href=&#34;https://golang.org/pkg/io/#Reader&#34;&gt;io.Reader&lt;/a&gt; that wraps another &lt;code&gt;io.Reader&lt;/code&gt;, modifying the stream in some way.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&#34;https://golang.org/pkg/compress/gzip/#NewReader&#34;&gt;gzip.NewReader&lt;/a&gt; function takes an &lt;code&gt;io.Reader&lt;/code&gt; (a stream of compressed data) and returns a &lt;code&gt;*gzip.Reader&lt;/code&gt; that also implements &lt;code&gt;io.Reader&lt;/code&gt; (a stream of the decompressed data).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type rot13Reader struct {
	r io.Reader
}

func rot13(x byte) byte {
    capital := x &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; x &amp;lt;= &#39;Z&#39;
    if !capital &amp;amp;&amp;amp; (x &amp;lt; &#39;a&#39; || x &amp;gt; &#39;z&#39;) {
        return x // Not a letter
    }

    x += 13
    if capital &amp;amp;&amp;amp; x &amp;gt; &#39;Z&#39; || !capital &amp;amp;&amp;amp; x &amp;gt; &#39;z&#39; {
        x -= 26
    }
    return x
}

func (r13 *rot13Reader) Read(b []byte) (int, error) {
    n, err := r13.r.Read(b)
    for i := 0; i &amp;lt;= n; i++ {
        b[i] = rot13(b[i])
    }
    return n, err
}

func main() {
	s := strings.NewReader(&amp;quot;Lbh penpxrq gur pbqr!&amp;quot;)
	r := rot13Reader{s}
	io.Copy(os.Stdout, &amp;amp;r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;images&#34;&gt;Images&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;Package image&lt;/a&gt; defines the &lt;code&gt;Image&lt;/code&gt; interface:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package image

type Image interface {
    ColorModel() color.Model
    Bounds() Rectangle
    At(x, y int) color.Color
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;Rectangle&lt;/code&gt; return value of the &lt;code&gt;Bounds&lt;/code&gt;method is actually an &lt;a href=&#34;https://golang.org/pkg/image/#Rectangle&#34;&gt;&lt;code&gt;image.Rectangle&lt;/code&gt;&lt;/a&gt;, as the declaration is inside package &lt;code&gt;image&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(See &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;the documentation&lt;/a&gt; for all the details.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;color.Color&lt;/code&gt; and &lt;code&gt;color.Model&lt;/code&gt; types are also interfaces, but we&amp;rsquo;ll ignore that by using the predefined implementations &lt;code&gt;color.RGBA&lt;/code&gt; and &lt;code&gt;color.RGBAModel&lt;/code&gt;. These interfaces and types are specified by the &lt;a href=&#34;https://golang.org/pkg/image/color/&#34;&gt;image/color package&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;exercise-images&#34;&gt;Exercise: Images&lt;/h4&gt;
&lt;p&gt;Remember the &lt;a href=&#34;https://tour.golang.org/moretypes/18&#34;&gt;picture generator&lt;/a&gt; you wrote earlier? Let&amp;rsquo;s write another one, but this time it will return an implementation of &lt;code&gt;image.Image&lt;/code&gt; instead of a slice of data.&lt;/p&gt;
&lt;p&gt;Define your own &lt;code&gt;Image&lt;/code&gt; type, implement &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;the necessary methods&lt;/a&gt;, and call &lt;code&gt;pic.ShowImage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bounds&lt;/code&gt; should return a &lt;code&gt;image.Rectangle&lt;/code&gt;, like &lt;code&gt;image.Rect(0, 0, w, h)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ColorModel&lt;/code&gt; should return &lt;code&gt;color.RGBAModel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;At&lt;/code&gt; should return a color; the value &lt;code&gt;v&lt;/code&gt; in the last picture generator corresponds to &lt;code&gt;color.RGBA{v, v, 255, 255}&lt;/code&gt; in this one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Image struct{
    width int
    height int
}

func (img Image) ColorModel() color.Model {
    return color.RGBAModel
}

func (img Image) Bounds() image.Rectangle {
    return image.Rect(0, 0, img.width, img.height)
}

func (img Image) At(x, y int) color.Color {
    img_func := func(x, y int) uint8 {
        //return uint8(x*y)
        //return uint8((x+y) / 2)
        return uint8(x^y)
    }
    v := img_func(x, y)
    return color.RGBA{v, v, 255, 255}
}

func main() {
	m := Image{256, 64}
	pic.ShowImage(m)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;goroutines and channels, and how they are used to implement different concurrency patterns.&lt;/p&gt;
&lt;h3 id=&#34;concurrency-1&#34;&gt;Concurrency&lt;/h3&gt;
&lt;h4 id=&#34;goroutines&#34;&gt;Goroutines&lt;/h4&gt;
&lt;p&gt;The Go FAQ section &lt;a href=&#34;http://golang.org/doc/faq#goroutines&#34;&gt;&lt;em&gt;Why goroutines instead of threads?&lt;/em&gt;&lt;/a&gt; explains:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Goroutines are part of making concurrency easy to use. The idea, which has been around for a while, is to multiplex independently executing functions—coroutines—onto a set of threads. When a coroutine blocks, such as by calling a blocking system call, the run-time automatically moves other coroutines on the same operating system thread to a different, runnable thread so they won&amp;rsquo;t be blocked. The programmer sees none of this, which is the point. The result, which we call goroutines, can be very cheap: unless they spend a lot of time in long-running system calls, they cost little more than the memory for the stack, which is just a few kilobytes.&lt;/p&gt;
&lt;p&gt;To make the stacks small, Go&amp;rsquo;s run-time uses segmented stacks. A newly minted goroutine is given a few kilobytes, which is almost always enough. When it isn&amp;rsquo;t, the run-time allocates (and frees) extension segments automatically. The overhead averages about three cheap instructions per function call. It is practical to create hundreds of thousands of goroutines in the same address space. If goroutines were just threads, system resources would run out at a much smaller number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;em&gt;goroutine&lt;/em&gt; is a lightweight thread managed by the Go runtime.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go f(x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;starts a new goroutine running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The evaluation of &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; happens in the current goroutine and the execution of &lt;code&gt;f&lt;/code&gt; happens in the new goroutine.&lt;/p&gt;
&lt;p&gt;Goroutines run in the same address space, so access to shared memory must be synchronized. The &lt;a href=&#34;https://golang.org/pkg/sync/&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; package provides useful primitives, although you won&amp;rsquo;t need them much in Go as there are other primitives.&lt;/p&gt;
&lt;h4 id=&#34;channels&#34;&gt;Channels&lt;/h4&gt;
&lt;p&gt;Channels are a typed conduit through which you can send and receive values with the channel operator, &lt;code&gt;&amp;lt;-&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch &amp;lt;- v    // Send v to channel ch.
v := &amp;lt;-ch  // Receive from ch, and assign value to v.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(The data flows in the direction of the arrow.)&lt;/p&gt;
&lt;p&gt;Like maps and slices, channels must be created before use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch := make(chan int)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, &lt;strong&gt;sends and receives block until the other side is ready.&lt;/strong&gt; &lt;strong&gt;This allows goroutines to synchronize without explicit locks or condition variables&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	c &amp;lt;- sum // send sum to c
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}

	c := make(chan int)
	go sum(s[:len(s)/2], c)
	go sum(s[len(s)/2:], c)
	x, y := &amp;lt;-c, &amp;lt;-c // receive from c

	fmt.Println(x, y, x+y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;buffered-channels&#34;&gt;Buffered Channels&lt;/h4&gt;
&lt;p&gt;Channels can be &lt;em&gt;buffered&lt;/em&gt;. Provide the buffer length as the second argument to &lt;code&gt;make&lt;/code&gt; to initialize a buffered channel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ch := make(chan int, 100)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Sends to a buffered channel block only when the buffer is full&lt;/strong&gt;. &lt;strong&gt;Receives block when the buffer is empty.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;overfill the buffer lead to deadlock.&lt;/p&gt;
&lt;h4 id=&#34;range-and-close&#34;&gt;Range and Close&lt;/h4&gt;
&lt;p&gt;A sender can &lt;code&gt;close&lt;/code&gt; a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression: after&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v, ok := &amp;lt;-ch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ok&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; if there are no more values to receive and the channel is closed.&lt;/p&gt;
&lt;p&gt;The loop &lt;code&gt;for i := range c&lt;/code&gt; receives values from the channel repeatedly until it is closed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another note:&lt;/strong&gt; Channels aren&amp;rsquo;t like files; you don&amp;rsquo;t usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a &lt;code&gt;range&lt;/code&gt; loop.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func fibonacci(n int, c chan int) {
	x, y := 0, 1
	for i := 0; i &amp;lt; n; i++ {
		c &amp;lt;- x
		x, y = y, x+y
	}
	close(c)
}

func main() {
	c := make(chan int, 10)
	go fibonacci(cap(c), c)
	for i := range c {
		fmt.Println(i)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;select&#34;&gt;Select&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; statement lets a goroutine wait on multiple communication operations.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;select&lt;/code&gt; blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func fibonacci(c, quit chan int) {
	x, y := 0, 1
	for {
		select {
		case c &amp;lt;- x:
			x, y = y, x+y
		case &amp;lt;-quit:
			fmt.Println(&amp;quot;quit&amp;quot;)
			return
		}
	}
}

func main() {
	c := make(chan int)
	quit := make(chan int)
	go func() {
		for i := 0; i &amp;lt; 10; i++ {
			fmt.Println(&amp;lt;-c)
		}
		quit &amp;lt;- 0
	}()
	fibonacci(c, quit)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;default-selection&#34;&gt;Default Selection&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; case in a &lt;code&gt;select&lt;/code&gt; is run if no other case is ready.&lt;/p&gt;
&lt;p&gt;Use a &lt;code&gt;default&lt;/code&gt; case to try a send or receive without blocking:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select {
case i := &amp;lt;-c:
    // use i
default:
    // receiving from c would block
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-equivalent-binary-trees&#34;&gt;Exercise: Equivalent Binary Trees&lt;/h4&gt;
&lt;p&gt;There can be many different binary trees with the same sequence of values stored at the leaves. For example, here are two binary trees storing the sequence 1, 1, 2, 3, 5, 8, 13.&lt;/p&gt;
&lt;p&gt;A function to check whether two binary trees store the same sequence is quite complex in most languages. We&amp;rsquo;ll use Go&amp;rsquo;s concurrency and channels to write a simple solution.&lt;/p&gt;
&lt;p&gt;This example uses the &lt;code&gt;tree&lt;/code&gt; package, which defines the type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Tree struct {
    Left  *Tree
    Value int
    Right *Tree
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exercise-equivalent-binary-trees-1&#34;&gt;Exercise: Equivalent Binary Trees&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int) {
   WalkRecurse(t, ch)
   close(ch)
}

func WalkRecurse(t *tree.Tree, ch chan int) {
    if t == nil {
        return
    }

    WalkRecurse(t.Left, ch)
    ch &amp;lt;- t.Value
    WalkRecurse(t.Right, ch)
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
    ch1, ch2 := make(chan int), make(chan int)

    go Walk(t1, ch1)
    go Walk(t2, ch2)

    for {
        v1,ok1 := &amp;lt;- ch1
        v2,ok2 := &amp;lt;- ch2

        if v1 != v2 || ok1 != ok2 {
            return false
        }

        if !ok1 {
            break
        }
    }

    return true
}

func main() {
	ch := make(chan int)
	go Walk(tree.New(1), ch)
	for v := range ch {
		fmt.Println(v)
	}
	fmt.Println(Same(tree.New(1), tree.New(1)))
	fmt.Println(Same(tree.New(1), tree.New(2)))
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;syncmutex&#34;&gt;sync.Mutex&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ve seen how channels are great for communication among goroutines.&lt;/p&gt;
&lt;p&gt;But what if we don&amp;rsquo;t need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?&lt;/p&gt;
&lt;p&gt;This concept is called &lt;em&gt;mutual exclusion&lt;/em&gt;, and the conventional name for the data structure that provides it is &lt;em&gt;mutex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Go&amp;rsquo;s standard library provides mutual exclusion with&lt;a href=&#34;https://golang.org/pkg/sync/#Mutex&#34;&gt;&lt;code&gt;sync.Mutex&lt;/code&gt;&lt;/a&gt; and its two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unlock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can define a block of code to be executed in mutual exclusion by surrounding it with a call to &lt;code&gt;Lock&lt;/code&gt; and &lt;code&gt;Unlock&lt;/code&gt; as shown on the &lt;code&gt;Inc&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;We can also use &lt;code&gt;defer&lt;/code&gt; to ensure the mutex will be unlocked as in the &lt;code&gt;Value&lt;/code&gt; method.&lt;/p&gt;
&lt;h4 id=&#34;exercise-web-crawler&#34;&gt;Exercise: Web Crawler&lt;/h4&gt;
&lt;p&gt;In this exercise you&amp;rsquo;ll use Go&amp;rsquo;s concurrency features to parallelize a web crawler.&lt;/p&gt;
&lt;p&gt;Modify the &lt;code&gt;Crawl&lt;/code&gt; function to fetch URLs in parallel without fetching the same URL twice.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint&lt;/em&gt;: you can keep a cache of the URLs that have been fetched on a map, but maps alone are not safe for concurrent use!&lt;/p&gt;
&lt;h4 id=&#34;where-to-go-from-here&#34;&gt;Where to Go from here&amp;hellip;&lt;/h4&gt;
&lt;p&gt;You can get started by &lt;a href=&#34;https://golang.org/dl/&#34;&gt;installing Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have Go installed, the &lt;a href=&#34;https://golang.org/doc/&#34;&gt;Go Documentation&lt;/a&gt;is a great place to continue. It contains references, tutorials, videos, and more.&lt;/p&gt;
&lt;p&gt;To learn how to organize and work with Go code, watch &lt;a href=&#34;https://www.youtube.com/watch?v=XCsL89YtqCs&#34;&gt;this screencast&lt;/a&gt; or read &lt;a href=&#34;https://golang.org/doc/code.html&#34;&gt;How to Write Go Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need help with the standard library, see the &lt;a href=&#34;https://golang.org/pkg/&#34;&gt;package reference&lt;/a&gt;. For help with the language itself, you might be surprised to find the &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;Language Spec&lt;/a&gt; is quite readable.&lt;/p&gt;
&lt;p&gt;To further explore Go&amp;rsquo;s concurrency model, watch&lt;a href=&#34;https://www.youtube.com/watch?v=f6kdp27TYZs&#34;&gt;Go Concurrency Patterns&lt;/a&gt; (&lt;a href=&#34;https://talks.golang.org/2012/concurrency.slide&#34;&gt;slides&lt;/a&gt;) and &lt;a href=&#34;https://www.youtube.com/watch?v=QDDwwePbDtw&#34;&gt;Advanced Go Concurrency Patterns&lt;/a&gt; (&lt;a href=&#34;https://talks.golang.org/2013/advconc.slide&#34;&gt;slides&lt;/a&gt;) and read the &lt;a href=&#34;https://golang.org/doc/codewalk/sharemem/&#34;&gt;Share Memory by Communicating&lt;/a&gt; codewalk.&lt;/p&gt;
&lt;p&gt;To get started writing web applications, watch &lt;a href=&#34;https://vimeo.com/53221558&#34;&gt;A simple programming environment&lt;/a&gt; (&lt;a href=&#34;https://talks.golang.org/2012/simple.slide&#34;&gt;slides&lt;/a&gt;) and read the &lt;a href=&#34;https://golang.org/doc/articles/wiki/&#34;&gt;Writing Web Applications&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://golang.org/doc/codewalk/functions/&#34;&gt;First Class Functions in Go&lt;/a&gt; codewalk gives an interesting perspective on Go&amp;rsquo;s function types.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://blog.golang.org/&#34;&gt;Go Blog&lt;/a&gt; has a large archive of informative Go articles.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&#34;https://golang.org/&#34;&gt;golang.org&lt;/a&gt; for more.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Debugging JavaScript in Chrome DevTools</title>
      <link>http://csyezheng.github.io/post/programming-languages/javascript/debug/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/javascript/debug/</guid>
      
        <description>&lt;h3 id=&#34;get-started&#34;&gt;Get Started&lt;/h3&gt;
&lt;h4 id=&#34;step-2-get-familiar-with-the-sources-panel-ui&#34;&gt;Step 2: Get familiar with the Sources panel UI&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;Sources&lt;/strong&gt; panel is where you debug JavaScript.&lt;/p&gt;
&lt;p&gt;Open DevTools by pressing &lt;code&gt;Command+Option+I&lt;/code&gt; (Mac) or &lt;code&gt;Control+Shift+I&lt;/code&gt; (Windows, Linux). This shortcut opens the &lt;strong&gt;Console&lt;/strong&gt;panel.&lt;/p&gt;
&lt;h4 id=&#34;step-3-pause-the-code-with-a-breakpoint&#34;&gt;Step 3: Pause the code with a breakpoint&lt;/h4&gt;
&lt;h4 id=&#34;step-4-step-through-the-code&#34;&gt;Step 4: Step through the code&lt;/h4&gt;
&lt;h4 id=&#34;step-5-set-a-line-of-code-breakpoint&#34;&gt;Step 5: Set a line-of-code breakpoint&lt;/h4&gt;
&lt;h4 id=&#34;step-6-check-variable-values&#34;&gt;Step 6: Check variable values&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>Delve Documentation</title>
      <link>http://csyezheng.github.io/post/programming-languages/go/debugging-with-delve/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/post/programming-languages/go/debugging-with-delve/</guid>
      
        <description>&lt;h2 id=&#34;installation-on-linux&#34;&gt;Installation on Linux&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p $GOPATH/src/github.com/myusername/project &amp;amp;&amp;amp; cd &amp;quot;$_&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ go get -u github.com/go-delve/delve/cmd/dlv
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ cat $GOPATH/src/github.com/username/proj/main.go
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;package main
 
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;os&amp;quot;
)
 
const port  = &amp;quot;8000&amp;quot;

func main() {
    http.HandleFunc(&amp;quot;/hi&amp;quot;, hi)

    fmt.Println(&amp;quot;runing on port: &amp;quot; + port)
    log.Fatal(http.ListenAndServe(&amp;quot;:&amp;quot; + port, nil))
}

func hi(w http.ResponseWriter, r *http.Request) {
    hostName, _ := os.Hostname()
    fmt.Fprintf(w, &amp;quot;HostName: %s&amp;quot;, hostName)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dlv-debug&#34;&gt;dlv debug&lt;/h3&gt;
&lt;p&gt;Compile and begin debugging main package in current directory, or the package specified.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dlv debug ./main.go
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) help
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) b main.main
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) c
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) b main.hi
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) c
running on port: 8000
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;curl localhost:8000/hi
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dlv-attach&#34;&gt;dlv attach&lt;/h3&gt;
&lt;p&gt;Attach to running process and begin debugging.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go build main.go
$ ./main
$ ps aux|grep main
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;dlv attach pid [executable]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;(dlv) b /home/ye/go/src/github.com/username/proj/main.go:20
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;curl localhost:8000/hi
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;command-line-interface&#34;&gt;Command Line Interface&lt;/h2&gt;
&lt;p&gt;help	Prints the help message.&lt;/p&gt;
&lt;p&gt;list	Show source code.&lt;/p&gt;
&lt;p&gt;args	Print function arguments.&lt;/p&gt;
&lt;p&gt;locals	Print local variables.&lt;/p&gt;
&lt;p&gt;next	Step over to next source line.&lt;/p&gt;
&lt;p&gt;step	Single step through program.&lt;/p&gt;
&lt;p&gt;break	Sets a breakpoint.&lt;/p&gt;
&lt;p&gt;clear	Deletes breakpoint.&lt;/p&gt;
&lt;p&gt;clearall	Deletes multiple breakpoints.&lt;/p&gt;
&lt;p&gt;print	Evaluate an expression.&lt;/p&gt;
&lt;p&gt;continue	Run until breakpoint or program termination.&lt;/p&gt;
&lt;p&gt;set	Changes the value of a variable.&lt;/p&gt;
&lt;p&gt;stack	Print stack trace.&lt;/p&gt;
&lt;p&gt;trace	Set tracepoint.&lt;/p&gt;
&lt;p&gt;exit	Exit the debugger.&lt;/p&gt;
&lt;p&gt;reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-delve/delve/tree/master/Documentation&#34;&gt;https://github.com/go-delve/delve/tree/master/Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/li-peng/p/8522592.html&#34;&gt;https://www.cnblogs.com/li-peng/p/8522592.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
