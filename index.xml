<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/</link>
    <description>Recent content on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Mar 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://www.yezheng.pro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://www.yezheng.pro/about/</link>
      <pubDate>Mon, 25 Sep 2017 21:38:52 +0800</pubDate>
      
      <guid>http://www.yezheng.pro/about/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;m graduated from the Hebei GEO University with a degree in marketing, because I thought computers were cool from an early age, so I chose programmers as my future employment direction in my third year of college. In the third year of college, I learned some front-end knowledge, and in the fourth year of college I learned some C ++ related knowledge. After graduating, I naturally found a job related to programming.&lt;/p&gt;
&lt;p&gt;In the first company, I was mainly engaged in web crawling. I was responsible for scraping various financial data including stock exchanges, performing data cleaning, and completing an announcement classification system during the period. I worked as a data development engineer in the second company, and solved development problems such as real-time data forwarding, reception, and storage. I worked as a back-end development engineer at a third company and built the entire edx-based online learning system.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Transport Layer</title>
      <link>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-3/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-3/</guid>
      
        <description>&lt;h2 id=&#34;introduction-and-transport-layer-services&#34;&gt;Introduction and Transport-Layer Services&lt;/h2&gt;
&lt;p&gt;运输层位于应用层和网络层之间，该层为运行在不同主机上的应用进程提供直接的通信服务，它将网络层的在两个端系统之间的交付服务扩展到运行在两个不同端系统上的应用进程之间的交付服务。这句话的理解是，运输层协议为运行在不同主机上的应用进程之间提供了&lt;strong&gt;逻辑通信&lt;/strong&gt;(logic communication)功能，应用程序使用运输层提供的逻辑通信功能彼此发送报文，而无需考虑承载这些报文的物理基础设施的细节。&lt;/p&gt;
&lt;p&gt;运输层协议是在端系统中而不是在路由器中实现的。在发送端，运输层将从发送应用进程接收到的报文转换成运输层分组，该分组称为&lt;strong&gt;报文段&lt;/strong&gt;(segment)。实现方式可能是&lt;strong&gt;将应用报文划分为较小的块，并为每块加上一个运输层首部以生成运输层报文段&lt;/strong&gt;，然后在发送端系统中，运输层将这些报文段传递给网络层。注意：网络路由器仅作用于该数据报的网路层字段；即它们不检查封装在该数据报的运输层报文段的字段。在接收端，网络层从数据报中提取出运输层报文段，并将该报文段上交给运输层，经运输层处理后上交给应用进程使用。&lt;/p&gt;
&lt;h4 id=&#34;relationship-between-transport-and-network-layers&#34;&gt;Relationship Between Transport and Network Layers&lt;/h4&gt;
&lt;p&gt;运输层位于网络层之上。&lt;strong&gt;网络层&lt;/strong&gt;提供了&lt;strong&gt;主机&lt;/strong&gt;之间的逻辑通信，而&lt;strong&gt;运输层&lt;/strong&gt;为运行在不同&lt;strong&gt;主机的进程&lt;/strong&gt;之间提供了逻辑通信。&lt;strong&gt;运输层协议只工作在端系统中&lt;/strong&gt;，在端系统中，运输层协议将来自应用进程的报文移动到网络边缘(即网络层)，但对这些报文在网络核心如何移动并不做任何规定。中间路由器既不处理也不识别运输层加在应用层报文的任何信息。&lt;/p&gt;
&lt;p&gt;运输层协议常常受制于底层网络协议的服务模型。但即使底层网络协议是不可靠的，会使分组丢失、篡改和冗余，运输层协议也能为应用程序提供可靠的数据传输服务。&lt;/p&gt;
&lt;h4 id=&#34;overview-of-the-transport-layer-in-the-internet&#34;&gt;Overview of the Transport Layer in the Internet&lt;/h4&gt;
&lt;p&gt;因特网为应用层提供了两种截然不同的可用运输层协议，一个是UDP(用户数据报协议)，它为调用它的应用程序提供一种不可靠的、无连接的服务；另一个是TCP(传输控制协议)，它为调用它的应用程序提供一种可靠的、面向连接的服务。&lt;/p&gt;
&lt;p&gt;在讲UDP和TCP之前，需要简单了解网络层。网络层协议非常重要的是IP，即网际协议。IP为主机之间提供逻辑通信，IP的服务模型是&lt;strong&gt;尽力而为交付服务&lt;/strong&gt;(best-effort delivery service)，即它不确保报文段的交付，不保证报文段的按序交付，不保证报文段中数据的完整性，因此IP被称为&lt;strong&gt;不可靠服务&lt;/strong&gt;(unreliable service)。&lt;/p&gt;
&lt;p&gt;再来看UDP和TCP，两种协议的基本责任是&lt;strong&gt;将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程间的交付服务&lt;/strong&gt;。将主机间交付扩展到进程间交付被称为运输层的&lt;strong&gt;多路复用&lt;/strong&gt;(transport-layer multiplexing)与&lt;strong&gt;多路分解&lt;/strong&gt;(demultiplexing)。UDP和TCP还可以通过在其报文段首部中包括&lt;strong&gt;差错检查字段&lt;/strong&gt;而提供完整性检查。进程到进程的数据交付和差错检查是两种最低限度的运输层服务，也是UDP能提供的仅有的两种服务。&lt;/p&gt;
&lt;p&gt;另一方面，TCP为应用程序提供几种附加服务。一是&lt;strong&gt;可靠数据传输&lt;/strong&gt;(reliable data transfer)，通过使用流量控制、序号、确认和定时器，TCP确保正确地、按序地将数据交付；另一个是&lt;strong&gt;拥塞控制&lt;/strong&gt;(congestion control)，它防止任何一条TCP连接用过多流量来淹没通信主机之间的链路和交换设备。&lt;/p&gt;
&lt;h2 id=&#34;multiplexing-and-demultiplexing&#34;&gt;Multiplexing and Demultiplexing&lt;/h2&gt;
&lt;p&gt;一个主机有一个或多个进程，而一个进程有一个或多个套接字，将运输层报文段中的数据交付到正确的套接字的工作称为&lt;strong&gt;多路分解&lt;/strong&gt;(demultiplexing)；在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层，所有这些工作称为&lt;strong&gt;多路复用&lt;/strong&gt;(multiplexing)。&lt;/p&gt;
&lt;p&gt;要实现多路复用，运输层需要：套接字有唯一的标识符；每个报文段有特殊字段来指示该报文段所要交付到的套接字。如图2.1，这些特殊字段是&lt;strong&gt;源端口号字段&lt;/strong&gt;(source port number filed)和&lt;strong&gt;目的端口号字段&lt;/strong&gt;(destination port number filed)。端口号是一个16比特的数，大小在0~65535之间。0~1023范围的端口号被称为周知端口号(well-known port number)，是受限制的，保留给如HTTP等周知的应用层协议使用。当我们开发一个新的应用程序时，必须为其分配一个端口号。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153426043-1801664430.png&#34;&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153428108-345024607.png&#34; alt=&#34;clip_image002&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​          图2.1 运输层报文段中的源与目的端口号字段&lt;/p&gt;
&lt;p&gt;因此多路分解就是，在报文段到达主机时，运输层检查报文段中的目的端口号，将其定位到相应的套接字。UDP基本上就是这样做的，但TCP的却更为复杂。&lt;/p&gt;
&lt;h6 id=&#34;无连接的多路复用和多路分解&#34;&gt;无连接的多路复用和多路分解&lt;/h6&gt;
&lt;p&gt;无连接的多路复用和多路分解，即UDP多路复用和多路分解。复用与分解的关键在于为套接字关联一个特定的端口号。在使用UDP通信时，创建一个UDP套接字，运输层可以自动为该套接字分配一个端口号，也可以手动为该套接字绑定一个特定的端口号。在形成运输层的报文段时，其中包括&lt;strong&gt;应用程序数据、源端口号(作为“返回地址”)、目的端口号和两个其他值&lt;/strong&gt;。这样就能够精确描述UDP的复用与分解。&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;strong&gt;一个UDP套接字是由一个二元组全面标识的&lt;/strong&gt;，该二元组包含了一个目的IP地址和一个目的端口号。因此，如果两个UDP报文段有不同的源IP地址和源端口号，但是具有相同的目的IP地址和目的端口号，那么这两个报文段将&lt;strong&gt;通过&lt;/strong&gt;相同的&lt;strong&gt;目的套接字****被定向到&lt;/strong&gt;相同的目的&lt;strong&gt;进程&lt;/strong&gt;，**即目的主机只使用目的端口号和IP地址定位相应的套接字。这一点与TCP是不同的。&lt;/p&gt;
&lt;h6 id=&#34;面向连接的多路复用与多路分解&#34;&gt;面向连接的多路复用与多路分解&lt;/h6&gt;
&lt;p&gt;TCP套接字与UDP套接字不同的是，因为TCP是面向连接的，**TCP套接字是由一个四元组(源IP地址，源端口号，目的IP地址，目的端口号)来标识的。**因此，当一个TCP报文段从网络到达主机时，该主机使用全部4个值来将报文段定向到相应的套接字。比如，两个具有不同源IP地址或端口号的TCP报文段将被定向到两个不同的套接字，除非TCP报文段携带的是初始创建连接的请求(因为TCP服务器有一个“欢迎套接字”，TCP连接建立时都需要先向该套接字发送请求)。&lt;/p&gt;
&lt;p&gt;服务器主机可以支持很多并行的TCP套接字，每个套接字与一个进程相联系，并由其四元组来标识每个套接字。当一个TCP报文段到达主机时，所有4个字段被用来将报文段定向分解到相应的套接字。&lt;/p&gt;
&lt;p&gt;端口扫描器nmap能够扫描能够接收TCP连接或能响应的UDP端口。&lt;/p&gt;
&lt;p&gt;如图2.2，主机A和主机C以及服务器B都有自己的唯一IP地址A、B、C，其中主机C向服务器B发送两个会话，主机A向服务器B发送一个会话。主机C为两个会话分配了两个不同的源端口号(26145和7532)，因为主机A选择源端口号时与主机C互不相干，因此它也可以将源端口号26145分配给其会话连接。尽管如此，服务器B仍能正确地分解这两个具有相同源端口号的连接，因为两个连接的源IP地址不同。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153438895-2037525561.png&#34;&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153440762-1703603010.png&#34; alt=&#34;clip_image003&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​                     图2.3 两个客户使用相同目的端口号和源端口号与同一服务器应用通信&lt;/p&gt;
&lt;h6 id=&#34;web服务器与tcp&#34;&gt;Web服务器与TCP&lt;/h6&gt;
&lt;p&gt;需要注意的是，**连接套接字并非与进程之间并不是一一对应关系。**早期每个Web服务器可以为每条连接生成一个新进程，这样每个进程都有自己的连接套接字，但现在的高性能Web服务器通常只使用一个进程，当客户请求连接时，这个进程会为每个新的客户创建一个具有新连接套接字的新线程，因此很多具有不同标识的的连接套接字连接到的是相同的进程。&lt;/p&gt;
&lt;h4 id=&#34;connectionless-transport-udp&#34;&gt;Connectionless Transport: UDP&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;运输层的最低限度是必须提供一种复用/分解服务，以便在网络层和正确的应用级进程之间传递数据。&lt;strong&gt;UDP就是一种非常简单的协议，在[RFC 768]的定义中，UDP除了&lt;/strong&gt;复用/分解以及少量差错检测&lt;/strong&gt;之外，几乎没有对IP增加别的东西。UDP从应用进程得到数据，附加上用于复用/分解的源和目的端口号字段，以及两个其他的小字段，然后形成报文段交给网络层。UDP做了非常少的工作，差不多应用进程是直接与IP交互。&lt;/p&gt;
&lt;p&gt;使用UDP时，在发送报文前，发送方和接收方的运输层实体之间&lt;strong&gt;没有握手&lt;/strong&gt;，正因如此，UDP被称为是&lt;strong&gt;无连接&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;DNS是一个通常使用UDP的应用层协议的例子。&lt;/p&gt;
&lt;p&gt;许多应用更适合使用UDP，主要原因有：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;关于发送什么数据以及何时发送的应用层控制更为精细。&lt;strong&gt;采用UDP时，只要应用进程将数据传递给UDP，UDP就会将该数据打包进UDP报文段并传递给网络层。而TCP提供可靠传输服务，还有拥塞控制机制和超时重传机制，TCP不管可靠交付需要多长时间，一定要保证目的主机接收并确认。而&lt;/strong&gt;实时应用&lt;/strong&gt;通常要求最小的发送速率，不希望过分地延迟报文段的传送，且能容忍一些数据的丢失，TCP服务模型并不是特别适合这些应用的需要。这些应用可以使用UDP，并作为应用的一部分来&lt;strong&gt;实现所需、超出UDP的不提供不必要的报文段交付服务之外的额外功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（2）**无须建立连接。**UDP不需要任何准备即可进行数据传输，因此UDP不会引入建立连接的时延(这可能是DNS运行在UDP上的主要原因)。&lt;/p&gt;
&lt;p&gt;（3）**无连接状态。**TCP需要在端系统中维护连接状态，该状态包括缓存、拥塞控制参数以及序号确认序号。**而UDP不需要维护连接状态，**也不跟踪这些参数。因此，某些专门用于某种特定应用的服务器当应用程序运行在UDP之上而不是运行在TCP上时，&lt;strong&gt;一般都能支持更多活跃客户。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（4）**分组首部开销小。**每个TCP报文段都有20个字节的首部开销，而UDP仅有8字节的开销。&lt;/p&gt;
&lt;p&gt;UDP不提供可靠数据传输服务，但是使用UDP的应用是可能实现可靠数据传输的。这&lt;strong&gt;可以通过在应用进程自身中建立可靠性机制来完成&lt;/strong&gt;，（例如，可通过增加确认和重传机制来实现）如谷歌浏览器中的QUIC协议就是在UDP之上的应用层协议实现了可靠性。这样做可以使应用进程进行可靠通信，而无需受制于TCP的拥塞控制机制带来的传输速率限制。&lt;/p&gt;
&lt;h4 id=&#34;udp-segment-structure&#34;&gt;UDP Segment Structure&lt;/h4&gt;
&lt;p&gt;UDP首部只有4个字段，每个字段由两个字节组成。源端口号和目的端口号在复用/分解时被使用；长度字段指示了在UDP报文段中的字节数(首部+数据)，因为数据字段的长度在一个UDP段中不同于在其他层封装后的段中，所以需要一个明确长度；接收方使用校验和来检查在该报文段是否出现差错。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153826665-627460470.png&#34;&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153849397-1476776484.png&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​           图2.1 UDP报文段结构&lt;/p&gt;
&lt;h4 id=&#34;udp-checksum&#34;&gt;UDP Checksum&lt;/h4&gt;
&lt;p&gt;UDP提供了差错检测功能，具体为发送方的UDP对报文段中的所有16比特字段的和进行反码运算，求和时遇到的任何溢出都被回卷。得到的结果被放在UDP报文段中的检验和字段。&lt;/p&gt;
&lt;p&gt;用一个例子说明计算过程，有三个16比特：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153900674-1463253988.png&#34;&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1550970/202011/1550970-20201126153904492-1464881034.png&#34; alt=&#34;clip_image002&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后一次加法有溢出，它要被回卷，其结果进行反码运算后得到(1011010100111101)校验和。在接收方，包括校验和的全部的4个16比特加在一起，若没有出现差错，最后结果将是(1111111111111111)。&lt;/p&gt;
&lt;p&gt;UDP提供端到端的差错检测，但不能对差错进行恢复，某些实现是将受损报文段丢弃，其他实现是将受损报文段交给应用程序并给出警告。&lt;/p&gt;
&lt;h2 id=&#34;principles-of-reliable-data-transfer&#34;&gt;Principles of Reliable Data Transfer&lt;/h2&gt;
&lt;p&gt;为上层实体提供的服务抽象是：数据可以通过一条可靠的信道进行传输。实现这种服务抽象是&lt;strong&gt;可靠数据传输协议&lt;/strong&gt; (reliable data transfer protocol) 的责任。&lt;/p&gt;
&lt;p&gt;由于可靠数据传输协议的下层协议也许是不可靠的，因此这是一项困难的任务。TCP是在不可靠的 (IP) 端到端网络层之上实现的可靠数据传输协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goicplw4myj30ot0fg405.jpg&#34; alt=&#34;9rTshXF.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;building-a-reliable-data-transfer-protocol&#34;&gt;Building a Reliable Data Transfer Protocol&lt;/h4&gt;
&lt;h6 id=&#34;1-经完全可靠信道的可靠数据传输rdt10&#34;&gt;1 经完全可靠信道的可靠数据传输：rdt1.0&lt;/h6&gt;
&lt;p&gt;假设底层信道是完全可靠的，此时协议为rdt1.0。&lt;strong&gt;有限状态机(Finite-State-Machine,FSM)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goicui54qpj30ed0c5aat.jpg&#34; alt=&#34;88p9BlE.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;该发送方和接收方的FSM每个都只有一个状态。FSM描述图中的箭头指示了协议从一个状态变迁到另一个状态（&lt;strong&gt;上图每个FSM都只有一个状态&lt;/strong&gt;，因此变迁的必定是从一个状态返回到自身。）&lt;/p&gt;
&lt;p&gt;引起变迁的事件显示在表示变迁的横线上方，事件发生时所采取的动作显示在横线下方。如果对一个事件没有动作，或没有事件就在横线上方或者下方用^符号表示。&lt;/p&gt;
&lt;p&gt;1)在发送端：rdt的发送端只通过rdt_send(data)事件接收来自较高层的数据，产生一个包含该数据的分组(经由make_pkt(data)动作)，并将分组发送到信道中。实际上，rdt_send(data)事件是由较高层应用过程调用产生的。&lt;/p&gt;
&lt;p&gt;2）在接收端：rdt通过rdt_rcv(packet)事件从底层信道接收一个分组，从分组中取出数据(经由extract(packet,data)动作)，并将数据上传给较高层(通过deliver_data(data)动作)。实际上，rdt_rev(packet)事件是由较底层协议的过程调用产生的。&lt;/p&gt;
&lt;h6 id=&#34;2-经具有比特差错信道的可靠数据传输rdt20&#34;&gt;2 经具有比特差错信道的可靠数据传输：rdt2.0&lt;/h6&gt;
&lt;p&gt;底层信道更为实际的模型是分组中的比特可能受损。在分组的传输、传播或缓存的过程中，这种&lt;strong&gt;比特差错&lt;/strong&gt;通常会出现在网络的物理部件中。此时仍然假定所有发送的分组（虽然有些比特可能受损）将按其发送的顺序被接收。&lt;/p&gt;
&lt;p&gt;利用&lt;strong&gt;控制报文&lt;/strong&gt;使得接收方可以让发送方知道哪些内容被正确接收，哪些内容接收有误并因此需要重复。在计算机网络中，基于这样&lt;strong&gt;重传机制&lt;/strong&gt;的可靠数据传输协议称为**自动重传请求(Automatic Repeat reQuest,ARQ)**协议。&lt;/p&gt;
&lt;p&gt;ARQ协议还需要另外三种协议来处理存在比特差错的情况：&lt;/p&gt;
&lt;p&gt;1）&lt;strong&gt;差错检测&lt;/strong&gt;：这些技术需要有额外的比特（除了待发送的初始数据比特之外的比特）从发送方发送到接收方；这些比特将被汇集在rdt2.0数据分组的分组检验和字段中。&lt;/p&gt;
&lt;p&gt;2）&lt;strong&gt;接收方反馈&lt;/strong&gt;：rdt2.0协议将从接收方向发送方回送ACK(“肯定确认”)或者NAK（“否定确认”）分组。理论上，这些分组只需要一个比特长；用0表示NAK，用1表示ACK。&lt;/p&gt;
&lt;p&gt;3）&lt;strong&gt;重传&lt;/strong&gt;：接收方收到有差错的分组时，发送方将重传该分组文。
&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goid6c54prj30lk0jimz5.jpg&#34; alt=&#34;OoF58nx.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;rdt2.0的&lt;strong&gt;发送端FSM有两个状态，接收方FSM有一个状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，发送端协议正等待来自上层传下来的数据。当产生rdt_send (data)事件时，发送方将产生一个包含待发送数据的分组，带有检验和，然后经由 udt_send(sndpkt)操作发送该分组。然后，发送方协议等待来自接收方的ACK或NAK分组。如果收到一个ACK 分组，则发送方知道最近发送的分组已被正确接收，因此协议返回到等待来向上层的数据的状态。如果收到NAK分组，该协议重传最后一个分组并等待接收方的响应。&lt;/p&gt;
&lt;p&gt;但是注意以下事实：&lt;/p&gt;
&lt;p&gt;1）当发送方处于等待ACK或NAK的状态时，它不能从上层获得更多的数据。这就是说rdt_send()事件不可能出现，仅当接收到ACK并离开该状态时才能发生这样的事件。因此，发送方将不会发送一块新数据，除非发送方确信接收方已正确接收当前分组。rdt2.0协议被称为停等(stop-and-wait)协议。&lt;/p&gt;
&lt;p&gt;2）它存在一个致命的缺陷，尤其是没考虑到ACK或NAK分组受损的可能性。&lt;/p&gt;
&lt;p&gt;解决这个新问题的一个简单方法（几乎所有现有的数据传输协议中，包括 TCP，都采用了这种方法）是&lt;strong&gt;在数据分组中添加一新字段，让发送方对其数据分组编号，即将发送数据分组的序号放在该字段&lt;/strong&gt;。于是，接收方只需要检查序号即可确定收到的分组是否一次重传。因为目前我们假定信道不丢失分组。ACK 和 NAK 分组本身不需要指明它们要确认的分组序号。 发送方知道所接收到的 ACK 和 NAK 分组（无论是否是含糊不清的）是为响应其最近发送的数据分组而生成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goidpu1s1xj30ml0f0q4z.jpg&#34; alt=&#34;yMnU15e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goids10z3uj30ph0d2wgw.jpg&#34; alt=&#34;2qQNPD0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面是rdt2.2的FSM描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goidt7w8hjj30mq0ewac3.jpg&#34; alt=&#34;uuq9awx.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goidtek0mlj30nl0bvac3.jpg&#34; alt=&#34;O73tMVL.png&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;3-经具有比特差错的丢包信道的可靠数据传输rdt30&#34;&gt;3 经具有比特差错的丢包信道的可靠数据传输：rdt3.0&lt;/h6&gt;
&lt;p&gt;现在假定除了&lt;strong&gt;比特受损&lt;/strong&gt;外，底层信道还会&lt;strong&gt;丢包&lt;/strong&gt;。协议现在必须处理另外两个关注的问题：&lt;strong&gt;怎样检测丢包以及发生丢包后该做些什么&lt;/strong&gt;。在rdt2.2中已经研发的技术：使用&lt;strong&gt;校验和、序号、ACK分组和重传&lt;/strong&gt;等。使得可以解决第二个问题，对于第一个问题，还需要增加一种新的协议机制。&lt;/p&gt;
&lt;p&gt;有很多可能的方法用于解决丢包问题（在本章结尾的习题中研究了几种其他方法）。在这里，我们让发送端负责检测和恢复丢包工作。假定发送端传输一个数据分组，该分组或者接收端对该分组的 ACK 发生了丢失。在这两种情况下，发送端都收不到应当到来的接收端的响应。&lt;/p&gt;
&lt;p&gt;因此实践中采取的方法是发送方明智地选择一个时间值，以判定可能发生了丢包(尽管不能确保)如果在这个时间内没有收到ACK，则&lt;strong&gt;重传&lt;/strong&gt;该分组。
注意，如果一个分组经历了一个大的时延，发送方可能会重传该分组，既是数据分组和ACK均没有发生丢失。这就需要考虑冗余数据分组的可能性。rdt2.2协议已经有足够的功能（即&lt;strong&gt;序号&lt;/strong&gt;）来处理分组情况，接收方可丢弃重复冗余分组。&lt;/p&gt;
&lt;p&gt;为了实现基于时间的重传机制，需要一个&lt;strong&gt;倒计数定时器&lt;/strong&gt;，在一个给定的时间量过期后，可中断发送方。因此，发送方需要能做到: ①每次发送一个分组(包括第一次分组和重传分组)时，便启动一个定时器。②响应定时器中断(采取适当的动作) ③终止定时器&lt;/p&gt;
&lt;p&gt;rdt3.0有时被称为&lt;strong&gt;比特交替协议(alternating-bit protocol)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goie9j0yo0j30jt0eraca.jpg&#34; alt=&#34;CwR3zp6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据传输协议的要点：在检验和、序号、定时器、肯定和否定确认分组这些技术中，每种机制都在协议的运行中起到了必不可少的作用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goieay18f6j30md0non18.jpg&#34; alt=&#34;uXjj0Db.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pipelined-reliable-data-transfer-protocols&#34;&gt;Pipelined Reliable Data Transfer Protocols&lt;/h4&gt;
&lt;p&gt;rdt3.0 性能问题的核心在于它是一个停等协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goieokyod6j30jp0almxp.jpg&#34; alt=&#34;stop-and-wait.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goienr373jj30jp0bb0th.jpg&#34; alt=&#34;pipelined.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决这种特殊的性能问题的一个简单方法是：不使用停等方式运行，允许发送方发送多个分组而无需等待确认。这种技术为&lt;strong&gt;流水线&lt;/strong&gt; (pipeline)：因为许多从发送方向接收方输送的分组可以被看成是填充到一条流水线中。&lt;/p&gt;
&lt;p&gt;流水线技术对可靠数据传输协议带来如下影响：&lt;/p&gt;
&lt;p&gt;1）必须增加序号范围：因为每个输送中的分组必须有一个唯一的序号，而且也许有多个在输送中未确认的报文。&lt;/p&gt;
&lt;p&gt;2）协议的发送方和接收方两端也许必须缓存多个分组。&lt;/p&gt;
&lt;p&gt;3）所需序号范围和对缓冲的要求取决于数据传输协议如何处理丢失、损坏及延时过大的分组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决流水线的差错恢复&lt;/strong&gt;有两种基本的方法：&lt;strong&gt;回退N步(G0-Back-N,GBN)&lt;/strong&gt;，和&lt;strong&gt;选择重传(Selective Repeat,SR)&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;go-back-n-gbn&#34;&gt;Go-Back-N (GBN)&lt;/h4&gt;
&lt;p&gt;在回退N步协议中，允许发送方发送多个分组(当有多个分组可用时)而不需等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。建议操作本书配套Web网站上的GBN Java小程序（这是个非常好的Java程序）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goifh815zoj30vg088jsw.jpg&#34; alt=&#34;Network_GBN-sender.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;base&lt;/code&gt;对应的分组被确认之后，窗口才会向右移动。&lt;code&gt;N&lt;/code&gt;被称为&lt;strong&gt;窗口长度&lt;/strong&gt;。限制窗口长度是要进行流量控制与拥塞控制。&lt;/p&gt;
&lt;p&gt;在实现中，一个分组的序号承载在分组首部的一个固定长度的字段中。如果分组序号字段的比特数是$k$，则该序号范围是$[0,2^k-1]$。在一个有限的序号范围内，所有涉及序号的运算必须使用模$2^k$运算。（即序号空间可被看作是一个长度为2k的环，其中序号2k-1紧接着序号0。）TCP有一个32比特的序号字段，其中的TCP序号是按字节流中的字节进行计数的，而不是按分组计数。&lt;/p&gt;
&lt;p&gt;基于ACK、无NAK的GBN协议的发送方和接收放这两端的扩展FSM：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goifwgy8xjj30uk0lm78r.jpg&#34; alt=&#34;Network_GBN-sender(1).png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/0083FLjsgy1goifws85l8j30ka0e6jty.jpg&#34; alt=&#34;Network_GBN-receiver.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;selective-repeat-sr&#34;&gt;Selective Repeat (SR)&lt;/h4&gt;
&lt;h2 id=&#34;connection-oriented-transport-tcp&#34;&gt;Connection-Oriented Transport: TCP&lt;/h2&gt;
&lt;h4 id=&#34;the-tcp-connection&#34;&gt;The TCP Connection&lt;/h4&gt;
&lt;h4 id=&#34;tcp-segment-structure&#34;&gt;TCP Segment Structure&lt;/h4&gt;
&lt;h4 id=&#34;round-trip-time-estimation-and-timeout&#34;&gt;Round-Trip Time Estimation and Timeout&lt;/h4&gt;
&lt;h4 id=&#34;reliable-data-transfer&#34;&gt;Reliable Data Transfer&lt;/h4&gt;
&lt;h4 id=&#34;flow-control&#34;&gt;Flow Control&lt;/h4&gt;
&lt;h4 id=&#34;tcp-connection-management&#34;&gt;TCP Connection Management&lt;/h4&gt;
&lt;h2 id=&#34;principles-of-congestion-control&#34;&gt;Principles of Congestion Control&lt;/h2&gt;
&lt;h4 id=&#34;the-causes-and-the-costs-of-congestion&#34;&gt;The Causes and the Costs of Congestion&lt;/h4&gt;
&lt;h4 id=&#34;approaches-to-congestion-control&#34;&gt;Approaches to Congestion Control&lt;/h4&gt;
&lt;h4 id=&#34;network-assisted-congestion-control-example-atm-abr-congestion-control&#34;&gt;Network-Assisted Congestion-Control Example: ATM ABR Congestion Control&lt;/h4&gt;
&lt;h2 id=&#34;tcp-congestion-control&#34;&gt;TCP Congestion Control&lt;/h2&gt;
&lt;h4 id=&#34;fairness&#34;&gt;Fairness&lt;/h4&gt;
&lt;h2 id=&#34;programming-assignments&#34;&gt;Programming Assignments&lt;/h2&gt;
&lt;h2 id=&#34;wireshark-lab-exploring-tcp&#34;&gt;Wireshark Lab: Exploring TCP&lt;/h2&gt;
&lt;h2 id=&#34;wireshark-lab-exploring-udp&#34;&gt;Wireshark Lab: Exploring UDP&lt;/h2&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pearson.com/us/higher-education/product/Kurose-Computer-Networking-A-Top-Down-Approach-6th-Edition/9780132856201.html?tab=contents&#34;&gt;Computer Networking: A Top-Down Approach, 6th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Application Layer</title>
      <link>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-2/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-2/</guid>
      
        <description>&lt;h2 id=&#34;principles-of-network-applications&#34;&gt;Principles of Network Applications&lt;/h2&gt;
&lt;p&gt;研究网络应用程序的核心是写出能够运行在不同的端系统和通过网络彼此通信的程序。不需要写在网络核心设备如路由器或链路层交换机上运行的软件。&lt;/p&gt;
&lt;h4 id=&#34;network-application-architectures&#34;&gt;Network Application Architectures&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在**客户-服务器体系结构 (client-server architecture)**中，有一个总是打开的主机称为服务器，它服务于来自许多其他称为客户的主机的请求。著名的应用程序包括Web、FTP、Telnet和电子邮件。&lt;/li&gt;
&lt;li&gt;在一个&lt;strong&gt;P2P体系结构(P2P architecture)&lt;strong&gt;中,对位于数据中心的专用服务器有最小的(或者没有)依赖。相反，应用程序在间断连接的主机对之间使用直接通信，这些主机对被称为&lt;/strong&gt;对等方&lt;/strong&gt;。这些应用包括文件共享（例如BitTorrent）、对等放协助下载加速器（如迅雷）、因特网电话（例如Skype）和IPTV（如迅雷看看）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;processes-communicating&#34;&gt;Processes Communicating&lt;/h4&gt;
&lt;p&gt;在操作系统术语中，进行通信的实际上是&lt;strong&gt;进程（process）&lt;/strong&gt;。一个进程可以被认为是运行在端系统中的一个程序。当程序运行在相同的端系统上时，它们使用进程间通信机制相互通信。在不同端系统上的进程，通过跨越计算机网络交换报文（message）而相互通信。&lt;/p&gt;
&lt;h6 id=&#34;客户与服务器进程&#34;&gt;客户与服务器进程&lt;/h6&gt;
&lt;p&gt;在一对进程之间的通信会话场景中，发起通信(即在该会话开始时发起与其他进程的联系)的进程被标识为客户（client），在会话开始时等待联系的进程是服务器（server）。&lt;/p&gt;
&lt;h6 id=&#34;进程与计算机网络之间的接口&#34;&gt;进程与计算机网络之间的接口&lt;/h6&gt;
&lt;p&gt;进程通过一个称为**套接字(socket)**的软件接口向网络发送报文和从网络接收报文。应用程序可以控制套接字在应用层端的一切，但是对该套接字的运输层几片没有控制权。除选择运输层协议与设定几个运输层参数，如最大缓存和最大报文段长度等。&lt;/p&gt;
&lt;h6 id=&#34;进程寻址&#34;&gt;进程寻址&lt;/h6&gt;
&lt;p&gt;为了标识接受进程的地址，需要定义两种信息，主机的地址和定义在目的主机中的接收进程的标识符。主机友IP地址（IP address）标识。目的地端口号标识进程。&lt;/p&gt;
&lt;p&gt;Web服务器用端口号80来标识，邮件服务器进程(使用SMTP协议)用端口号25来标识。&lt;/p&gt;
&lt;h4 id=&#34;transport-services-available-to-applications&#34;&gt;Transport Services Available to Applications&lt;/h4&gt;
&lt;p&gt;一个运输层协议能够为调用它的应用程序提供什么样的服务呢？从四个方面对应用程序服务要求进行分类：可靠数据传输、吞吐量、定时、安全性.&lt;/p&gt;
&lt;h4 id=&#34;transport-services-provided-by-the-internet&#34;&gt;Transport Services Provided by the Internet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP服务&lt;/p&gt;
&lt;p&gt;TCP服务模型包括&lt;strong&gt;面向连接服务&lt;/strong&gt;和&lt;strong&gt;可靠数据传输&lt;/strong&gt;服务，TCP还提供&lt;strong&gt;拥塞控制&lt;/strong&gt;机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向连接：客户机/服务器进程间需建立连接。握手过程提示客户和服务器，使它们为大量分组的到来做好准备。在握手阶段后，一个TCP连接（TCP connection）就在两个进程的套接字之间建立了。这条连接是全双工的，即连接双方的进程可以在此连接上同时进行报文收发。&lt;/li&gt;
&lt;li&gt;可靠的传输：通信进程能够依靠TCP，无差错、按适当顺序交付所有发送的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　UDP是一种不提供不需要服务的轻量级运输协议，无连接：它不需在两主机间建立连接，提供&lt;strong&gt;不可靠的数据传输&lt;/strong&gt;，UDP协议并不保证该报文将到达接收进程。不仅如此，到达接收进程的报文也可能是乱序到达的。没有包括拥塞控制机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因特网运输协议所不提供的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论TCP还是UDP都没有提供任何加密机制，TCP的加强版本称为&lt;strong&gt;安全套接字层（Secure Sockets Layer, SSL）&lt;/strong&gt;，包括加密、数据完整性和端点鉴别。SSL不是与TCP和UDP在相同层次上的第三种运输协议，**是在应用层上实现的强化。**如果一个应用要使用SSL的服务，需要在该应用程序的客户端和服务端包括SSL代码（利用现有的、高度优化的库和类）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-a62b18a6ceee21254425f68cba7496f5_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;application-layer-protocols&#34;&gt;Application-Layer Protocols&lt;/h4&gt;
&lt;p&gt;应用层协议(application-layer protocol)定义了运行在不同 端系统上的应用程序进程如何相互传递报文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公开协议：由RFC定义，Web的应用层协议是HTTP,它定义了在浏览器和Web服务器之间传输的报文格式和序列。用于电子邮件的主要应用层协议就是SMTP&lt;/li&gt;
&lt;li&gt;私有协议：多数P2P文件共享应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-web-and-http&#34;&gt;The Web and HTTP&lt;/h2&gt;
&lt;h4 id=&#34;overview-of-http&#34;&gt;Overview of HTTP&lt;/h4&gt;
&lt;p&gt;Web的应用层协议是&lt;strong&gt;超文本传输协议(HyperText Transfer Protocol, HTTP)&lt;/strong&gt;,它是Web 的核心，在[RFC 1945]和[RFC 2616]中进行了定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web页面=多个对象组成（对象只是一个文件，如一个html文件，一个图形，一个java小程序或一个视频）。每个对象通过一个对应的URL寻址。&lt;/li&gt;
&lt;li&gt;HTTP使用TCP作为它的支撑运输协议。&lt;/li&gt;
&lt;li&gt;HTTP客户首先发起一个与服务器的TCP连接。一旦连接建立，该浏览器和服务器进程就可以通过套接字接口访问TCP 。&lt;/li&gt;
&lt;li&gt;一旦客户向它的套接字接口发送了一个请求报文，该报文就脱离了客户控制并进入TCP的控制。 因为TCP协议，一个客户进程发出的每个HTTP请求报文最终能完整地到达服务器&lt;/li&gt;
&lt;li&gt;HTTP服务器并不保存关于客户的任何信息，所以我们说HTTP是一个无状态协议(stateless protocol)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;non-persistent-and-persistent-connections&#34;&gt;Non-Persistent and Persistent Connections&lt;/h4&gt;
&lt;p&gt;每个请求/响应对是经一个单独的TCP连接发送，还是所有的请求及其响应经相同的TCP连接发送呢?采用前一种方法，该应用程序被称为使用非持续连接(non-persistent connection); 采用后一种方法，该应用程序被称为使用持续连接(persistent connection) 。&lt;/p&gt;
&lt;p&gt;使用持续连接或非持续连接是由应用层决定的（HTTP默认使用的是持续连接）&lt;/p&gt;
&lt;h6 id=&#34;采用非持续连接的http&#34;&gt;采用非持续连接的HTTP&lt;/h6&gt;
&lt;p&gt;每个TCP连接只传输一个请求报文和一个响应报文。每次服务器发送响应报文后，会通知该TCP断开该TCP连接。HTTP客户接收响应报文，TCP连接关闭。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-7172e4c449549b0887fe70294748815e_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户向服务器发送一个TCP报文段，服务器用TCP报文段做出响应，客户向服务器返回确认。三次握手中前两个部分所耗费时间占一个RTT。完成了三次握手的前两部分后，客户结合三次握手的第三部分(确认)向该TCP连接发送一个请求报文。一旦请求报文到达服务器，服务器就在服务器就在该TCP连接上发送 HTML文件。TCP三次握手以及时间分析，总计两个往返时间RTT（Round-Trip Time, RTT）+服务器传输Html文件的时间。因此非持续连接是非常低效率的。&lt;/p&gt;
&lt;p&gt;非持续连接的两个缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要为每个请求的对象建立一个连接，对于每个连接，客户和服务器中都要分配TCP缓冲区和保持TCP变量，给服务器带来严重负担；&lt;/li&gt;
&lt;li&gt;每个对象都要遭受两倍RTT的交付时延，一个RTT用来创建TCP，另一个RTT用来请求和接受一个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;采用持续连接的http&#34;&gt;采用持续连接的HTTP&lt;/h6&gt;
&lt;p&gt;服务器在发送响应之后保持该TCP连接打开。因此，位于同一台服务器的多个Web页面都可以在单个TCP上进行传输。请求可以一个接一个地发而不必等待未决请求的回答（流水线）。如果一条连接经过一定时间间隔（一个可配置的超时间隔）仍未被使用，HTTP服务器就关闭该连接。&lt;/p&gt;
&lt;p&gt;HTTTP的默认模式是使用带流水线的持续连接。&lt;/p&gt;
&lt;h4 id=&#34;http-message-format&#34;&gt;HTTP Message Format&lt;/h4&gt;
&lt;h6 id=&#34;http请求报文&#34;&gt;HTTP请求报文&lt;/h6&gt;
&lt;p&gt;一个典型的http请求报文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /somedir/page.html HTTP/1.1
Host: www.hans941.tk
Connection: close
User-agent: Chrome/57.0
Accept-language: ch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Host首部行是Web代理高速缓存所要求的。Connection:close高速浏览器不希望使用持续连接，服务器发送完请求对象后就关闭连接。&lt;/p&gt;
&lt;p&gt;User-agent服务器可以为不同类型的用户发送相同对象的不同的版本。&lt;/p&gt;
&lt;p&gt;下图是请求报文的通用格式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;https://img2018.cnblogs.com/blog/226988/201905/226988-20190525102530882-1860346972.jpg&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首部行后面的 实体体(Entity body),在使用 POST 方法时存储用户提交的表单。&lt;/p&gt;
&lt;h6 id=&#34;http响应报文&#34;&gt;HTTP响应报文&lt;/h6&gt;
&lt;p&gt;http响应报文由三部分组成：一个初始状态行（status line），之后有6个首部行（header line），然后是实体体（entity body）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Connection: close
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Length: 6821
Content-Type: text/html

(data data data data data ......)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;服务器永Connection: close首部行高速客户，发送完报文后就关闭该TCP连接。Date首部行指的是服务器从文件系统中检索到对象，插入响应报文的时间，而不是对象创建或最后修改的时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last-Modified首部行指示了对象创建或者最后修改的日期和时间，对既可能在本地客户也可能在网络缓存服务器上的对象缓存来说非常重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个HTTP响应报文的通用格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2018.cnblogs.com/blog/226988/201905/226988-20190525103019639-986868984.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;常见状态码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 OK&lt;/li&gt;
&lt;li&gt;301 Moved Permanently&lt;/li&gt;
&lt;li&gt;400 Bad Request&lt;/li&gt;
&lt;li&gt;404 Not Found&lt;/li&gt;
&lt;li&gt;505 HTTP Version Not Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;user-server-interaction-cookies&#34;&gt;User-Server Interaction: Cookies&lt;/h4&gt;
&lt;p&gt;HTTP服务器是无状态化的，这简化了服务器的设计，这让工程师可以去开发能同时处理大量数据的高性能服务器。但是有时Web站点希望能去识别用户，为此HTTP使用了cookie来进行用户跟踪。&lt;/p&gt;
&lt;p&gt;　　cookie技术有4个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 HTTP 响应报文中的一个 cookie 首部行；&lt;/li&gt;
&lt;li&gt;在 HTTP 请求报文中的一个 cookie 首部行；&lt;/li&gt;
&lt;li&gt;在用户端系统中保留有一个 cookie 文件，并由用户的浏览器进行管理；&lt;/li&gt;
&lt;li&gt;位于 Web 站点的一个后端数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　&lt;img src=&#34;https://img2018.cnblogs.com/blog/226988/201905/226988-20190525103608022-1309036437.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;cookie可以用于标识一个用户，cookie可以在无状态的HTTP之上建立一个用户会话层。&lt;/p&gt;
&lt;p&gt;站点不必知道用户身份，可以记录按什么顺序，在什么时间，访问了哪些页面。能够根据过去访问的网页对用户推荐产品。&lt;/p&gt;
&lt;h4 id=&#34;web-caching&#34;&gt;Web Caching&lt;/h4&gt;
&lt;p&gt;Web缓存器(Web cache)也叫代理服务器(proxy server)，它是能够代表初始Web服务器来满足HTTP请求的网络实体.Web缓存器有自己的磁盘存储空间，并在存储空间中保存最近请求过的对象的副本。&lt;/p&gt;
&lt;p&gt;客户对过Web缓存器请求对象:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&#34;https://img2018.cnblogs.com/blog/226988/201905/226988-20190525104346988-822885012.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器建立一个到Web缓存器的TCP连接，并向Web缓存器中的对象发送一个HTTP请求。&lt;/li&gt;
&lt;li&gt;Web缓存器进行检查，看看本地是否缓存了该对象副本。如果有，Web缓存器就向客户浏览器用HTTP响应报文返回该对象。&lt;/li&gt;
&lt;li&gt;如果web缓存器没有该对象，就打开一个与该对象的初始服务器的TCP连接，Web缓存器向初始服务器的TCP连接上发送一个HTTP请求。&lt;/li&gt;
&lt;li&gt;Web缓存器收到该对象，本地存储空间存储副本，并向客户浏览器利用现有TCP连接发送HTTP响应包含该副本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Web缓存器既是服务器又是客户。当它接收浏览器的请求并发回响应 时，它是一个服务器。当它向初始服务器发出请求并接收响应时，它是一个客户。&lt;/p&gt;
&lt;p&gt;Web缓存器通常由ISP购买并安装。Web缓存器可以减少成本，降低响应时间。&lt;/p&gt;
&lt;p&gt;通过使用内容分发网络（Content Distribution Network, CDN），Web缓存服务器正在因特网中发挥着越来越重要的作用。&lt;/p&gt;
&lt;h4 id=&#34;the-conditional-get&#34;&gt;The Conditional GET&lt;/h4&gt;
&lt;p&gt;那么Web缓存器什么时候才会去刷新缓存下来的页面，以保存提供给客户是最新的对象呢？&lt;/p&gt;
&lt;p&gt;HTTP协议有一处机制&amp;mdash;&amp;ndash;条件GET(conditional GET)方法。&lt;/p&gt;
&lt;p&gt;若同时满足以下两点的则称为 条件 GET 方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求报文使用 GET 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求报文中包含一个 &lt;strong&gt;If-Modified-Since&lt;/strong&gt;: 首部行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原始服务器向Web缓存器中返回HTTP响应时包含&lt;strong&gt;Last-Modified&lt;/strong&gt;首部行，缓存器在存储该对象的同事也存储了最后修改日期。&lt;/p&gt;
&lt;p&gt;Web缓存器向原始Web服务器发送请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1
Host: www.sina.com.cn:80
If-Modified-Since:Thu, 4 Feb 2010 20:39:13 GMT
Connection: Close
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Web服务器向缓存器发送一个响应报文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.0 304 Not Modified
Date: Thu, 04 Feb 2010 12:38:41 GMT

(empty entity body)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;Not Modified&amp;rdquo;，没有在响应报文中包含所请求的对象，高速缓存器可以使用该对象，向请求浏览器转发代理缓存器缓存的对象副本。&lt;/p&gt;
&lt;h2 id=&#34;dnsthe-internets-directory-service&#34;&gt;DNS–The Internet’s Directory Service&lt;/h2&gt;
&lt;h4 id=&#34;services-provided-by-dns&#34;&gt;Services Provided by DNS&lt;/h4&gt;
&lt;h4 id=&#34;overview-of-how-dns-works&#34;&gt;Overview of How DNS Works&lt;/h4&gt;
&lt;h4 id=&#34;dns-records-and-messages&#34;&gt;DNS Records and Messages&lt;/h4&gt;
&lt;h2 id=&#34;peer-to-peer-applications&#34;&gt;Peer-to-Peer Applications&lt;/h2&gt;
&lt;h4 id=&#34;p2p-file-distribution&#34;&gt;P2P File Distribution&lt;/h4&gt;
&lt;h4 id=&#34;distributed-hash-tables-dhts&#34;&gt;Distributed Hash Tables (DHTs)&lt;/h4&gt;
&lt;h4 id=&#34;case-study-p2p-internet-telephony-with-skype&#34;&gt;Case Study: P2P Internet Telephony with Skype&lt;/h4&gt;
&lt;h2 id=&#34;socket-programming-creating-network-applications&#34;&gt;Socket Programming: Creating Network Applications&lt;/h2&gt;
&lt;p&gt;网络应用程序有两类。&lt;strong&gt;一类是实现在协议标准&lt;/strong&gt;（如一个RFC或某种其他标准文档）&lt;strong&gt;中所定义的操作；这样的应用程序又称为“开放”的&lt;/strong&gt;，因为定义其操作的这些规则人所共知。对于这样的实现，客户程序和服务器程序必须遵守由该RFC所规定的规则。如果一个开发者编写客户程序的代码，另一个开发者编写服务器程序的代码，并且两者都完全遵从该RFC的各种规则，那么这两个程序将能够交互操作。&lt;/p&gt;
&lt;p&gt;另一类网络应用程序是&lt;strong&gt;专用的网络应用程序&lt;/strong&gt;。在这种情况下，由客户和服务器程序应用的应用层协议没有公开发布在某RFC中或其他地方。某单独的开发者（或开发团队）创建了客户和服务器程序，并且该开发者用他的代码完全控制程序的功能。但是因为这些代码并没有实现一个开放的协议，其他独立的开发者将不能开发出和该应用程序交互的代码。&lt;/p&gt;
&lt;p&gt;在研发阶段，开发者必须最先做的一个决定是，应用程序是运行在TCP上还是运行在UDP上。前面讲过TCP是面向连接的，并且为两个端系统之间的数据流动提供可靠的字节流通道。UDP是无连接的，从一个端系统向另一个端系统发送独立的数据分组，不对交付提供任何保证。前面也讲过当客户或服务器程序&lt;strong&gt;实现了一个由某RFC定义的协议，它应当使用与该协议关联的周知端口号&lt;/strong&gt;；与之相反，&lt;strong&gt;当研发一个专用应用程序，研发者必须注意避免使用这样的周知端口号&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;socket-programming-with-udp&#34;&gt;Socket Programming with UDP&lt;/h4&gt;
&lt;p&gt;应用程序开发者在套接字的应用层一侧可以控制所有东西；然而，它几乎无法控制运输层一侧。&lt;/p&gt;
&lt;p&gt;在发送进程能够将数据分组推出套接字之门之前，当使用UDP时，必须先将目的地址附在该分组之上。在该分组传过发送方的套接字之后，因特网将使用该目的地址通过因特网为该分组选路到接收进程的套接字。当分组到达接收套接字时，接收进程将通过该套接字取回分组，进而检查分组的内容并采取适当的动作。&lt;/p&gt;
&lt;p&gt;当生成一个套接字时，就为它分配一个称为端口号（port number）的标识符。因此，如你所期待的，分组的目的地址也包括该套接字的端口号。&lt;/p&gt;
&lt;p&gt;归纳起来，&lt;strong&gt;发送进程为分组附上的目的地址是由目的主机的IP地址和目的地套接字的端口号组成的&lt;/strong&gt;。此外，如我们很快将看到的那样，发送方的源地址也是由源主机的IP地址和源套接字的端口号组成，该源地址也要附在分组之上。然而，将源地址附在分组之上通常并不是由UDP应用程序代码所为，而是由底层操作系统自动完成的。&lt;/p&gt;
&lt;p&gt;下显示了客户和服务器的主要与套接字相关的活动，两者通过UDP运输服务进行通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yqfile.alicdn.com/f3a0f4417d3d8aa377ee4f987f52623a4031c0fc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户程序被称为UDPClient.py，服务器程序被称为UDPServer.py。为了强调关键问题，我们有意提供最少的代码。“好代码”无疑将具有一些更为辅助性的代码行，特别是用于处理出现差错的情况。&lt;/p&gt;
&lt;h6 id=&#34;udpclientpy&#34;&gt;UDPClient.py&lt;/h6&gt;
&lt;p&gt;下面是该应用程序客户端的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from socket import *

# 服务器的P地址（如“128.138.32.126”）或者服务器的主机名（如“cis.poly.edu”）的字符串, 如果我们使用主机名，则将自动执行DNS lookup从而得到IP地址
serverName = ‘hostname’                                           
serverPort = 12000 

# 创建了客户的套接字，第一个参数指示了地址簇；特别是，AF_INET指示了底层网络使用了IPv4。
# 第二个参数指示了该套接字是SOCK_DGRAM类型的，这意味着它是一个UDP套接字
# 没有指定客户套接字的端口号,操作系统会设置
clientSocket = socket(AF_INET, SOCK_DGRAM) 

message = raw_input(’Input lowercase sentence:’) 

# 为报文附上目的地址，并且向进程的套接字clientSocket发送结果分组
# 源地址也附到分组上，尽管这是自动完成的，而不是显式地由代码完成的。
clientSocket.sendto(message.encode(),(serverName, serverPort)) 

# 方法recvfrom也取缓存长度2048作为输入
modifiedMessage, serverAddress = clientSocket.recvfrom(2048) 

print modifiedMessage.decode() 

# 关闭套接字
clientSocket.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;udpserverpy&#34;&gt;UDPServer.py&lt;/h6&gt;
&lt;p&gt;现在来看看这个应用程序的服务器端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from socket import * 

serverPort = 12000 

# 创建套接字类型SOCK_DGRAM（一种UDP套接字）
serverSocket = socket(AF_INET, SOCK_DGRAM) 

# 将端口号12000与个服务器的套接字绑定（即分配）在一起,代码显式地为该套接字分配一个端口号
serverSocket.bind((&#39;&#39;, serverPort)) 

print (“The server is ready to receive”) 

while True: 
    # 当某分组到达该服务器的套接字时，该分组的数据被放置到变量message中，其源地址被放置到变量clientAddress中。
	message, clientAddress = serverSocket.recvfrom(2048) 
	modifiedMessage = message.decode().upper() 
	# UDPServer将利用该源地址信息返回
	# 将该客户的地址（IP地址和端口号）附到大写报文上，并将所得的分组发送到服务器的套接字中。
	# 服务器地址也附在分组上，尽管这是自动而不是显式地由代码完成的。
	serverSocket.sendto(modifiedMessage.encode(), clientAddress)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了测试这对程序，在服务器主机上执行编译的服务器程序UDPServer.py。这在服务器上创建了一个进程，等待着某个客户与之联系。然后，保证在UDPClient.py中包括适当的服务器主机名或IP地址，在客户主机上执行编译的客户器程序UDPClient.py。这在客户上创建了一个进程。最后，在客户上使用应用程序，键入一个句子并以回车结束。&lt;/p&gt;
&lt;h4 id=&#34;socket-programming-with-tcp&#34;&gt;Socket Programming with TCP&lt;/h4&gt;
&lt;p&gt;与UDP不同，TCP是一个面向连接的协议。这意味着在客户和服务器能够开始互相发送数据之前，它们先要握手和创建一个TCP连接。TCP连接的一端与客户套接字相联系，另一端与服务器套接字相联系。当创建该TCP连接时，我们将其与客户套接字地址（IP地址和端口号）和服务器套接字地址（IP地址和端口号）关联起来。使用创建的TCP连接，当一侧要向另一侧发送数据时，它只需经过其套接字将数据丢给TCP连接。这与UDP不同，UDP服务器在将分组丢进套接字之前必须为其附上一个目的地地址。
现在我们仔细观察一下TCP中客户程序和服务器程序的交互。客户具有向服务器发起接触的任务。服务器为了能够对客户的初始接触做出反应，服务器必须已经准备好。这意味着两件事。第一，与在UDP中的情况一样，TCP服务器在客户试图发起接触前必须作为进程运行起来。第二，服务器程序必须具有一扇特殊的门，更精确地说是一个特殊的套接字，该门欢迎来自运行在任意主机上的客户进程的某些初始接触。使用房子/门来比喻进程/套接字，有时我们将客户的初始接触称为“敲欢迎之门”。
随着服务器进程的运行，客户进程能够向服务器发起一个TCP连接。这是由客户程序通过创建一个TCP套接字完成的。当该客户生成其TCP套接字时，它指定了服务器中的欢迎套接字的地址，即服务器主机的IP地址及其套接字的端口号。生成其套接字后，该客户发起了一个三次握手并创建与服务器的一个TCP连接。发生在运输层的三次握手，对于客户和服务器程序是完全透明的。
在三次握手期间，客户进程敲服务器进程的欢迎之门。当该服务器“听”到敲门时，它将生成一扇新门（更精确地讲是一个新套接字），它专门用于特定的客户。在我们下面的例子中，欢迎之门是一个我们称为serverSocket的TCP套接字对象；它专门对客户进行连接的新生成的套接字，称为连接套接字（connection Socket）。初次遇到TCP套接字的学生有时会混淆欢迎套接字（这是所有要与服务器通信的客户的起始接触点）和每个新生成的服务器侧的连接套接字（这是随后为与每个客户通信而生成的套接字）。
从应用程序的观点来看，客户套接字和服务器连接套接字直接通过一根管道连接。如图2-29所示，客户进程可以向它的套接字发送任意字节，并且TCP保证服务器进程能够按发送的顺序接收（通过连接套接字）每个字节。TCP因此在客户和服务器进程之间提供了可靠服务。此外，就像人们可以从同一扇门进和出一样，客户进程不仅能向它的套接字发送字节，也能从中接收字节；类似地，服务器进程不仅从它的连接套接字接收字节，也能向其发送字节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yqfile.alicdn.com/449d86f1fb6c99e9dda16b5e075cf1e77ec2289a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图显示了客户和服务器的主要与套接字相关的活动，两者通过TCP运输服务进行通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yqfile.alicdn.com/4054507a62b63bc6c0ce7c4ac9496aa6979190b6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;tcpclientpy&#34;&gt;TCPClient.py&lt;/h6&gt;
&lt;p&gt;这里给出了应用程序客户端的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from socket import * 

serverName = ’servername’ 
serverPort = 12000 

# 第一个参数仍指示底层网络使用的是IPv4。第二个参数指示该套接字是SOCK_STREAM类型。这表明它是一个TCP套接字（而不是一个UDP套接字）
# 创建该客户套接字时仍未指定其端口号；操作系统会自动附上端口号
clientSocket = socket(AF_INET, SOCK_STREAM) 

# 前面讲过在客户能够使用一个TCP套接字向服务器发送数据之前（反之亦然），必须在客户与服务器之间创建一个TCP连接。
# 这行发起了客户和服务器之间的这条TCP连接。这行代码执行完后，执行三次握手，并在客户和服务器之间创建起一条TCP连接。
clientSocket.connect((serverName,serverPort)) 

sentence = raw_input(‘Input lowercase sentence:’) 

# 该程序并未显式地创建一个分组并为该分组附上目的地址，而使用UDP套接字却要那样做。客户程序只是将字符串sentence中的字节放入该TCP连接中去。
clientSocket.send(sentence.encode()) 

# 等待接收来自服务器的字节，字符继续积累在modifiedSentence中，直到收到回车符才会结束该行。
modifiedSentence = clientSocket.recv(1024) 

print(‘From Server:’, modifiedSentence.decode()) 

# 关闭客户的套接字，因此关闭了客户和服务器之间的TCP连接。它引起客户中的TCP向服务器中的TCP发送一条TCP报文
clientSocket.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;tcpserverpy&#34;&gt;TCPServer.py&lt;/h6&gt;
&lt;p&gt;现在我们看一下服务器程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from socket import * 

serverPort = 12000 

# 服务器创建一个TCP套接字
serverSocket = socket(AF_INET,SOCK_STREAM) 

# 将服务器的端口号serverPort与该套接字关联起来
serverSocket.bind((‘’,serverPort)) 

# 但对TCP而言，serverSocket将是我们的欢迎套接字
# 该行让服务器聆听来自客户的TCP连接请求。其中参数定义了请求连接的最大数（至少为1）
serverSocket.listen(1) 

print ‘The server is ready to receive’ 

while True: 
    # 当客户敲该门时，程序为serverSocket调用accept()，这在服务器中创建了一个称为connectionSocket的新套接字，由这个特定的客户专用。
    # 客户和服务器则完成了握手，在客户的clientSocket和服务器的serverSocket之间创建了一个TCP连接。
    connectionSocket, addr = serverSocket.accept() 
    
    # 借助于创建的TCP连接，客户与服务器现在能够通过该连接相互发送字节。
    sentence = connectionSocket.recv(1024).decode() 
    
    capitalizedSentence = sentence.upper() 
    
    # 使用TCP，从一侧发送的所有字节不仅确保到达另一侧，而且确保按序到达。
    connectionSocket.send(capitalizedSentence)
    
    # 关闭了该连接套接字,但由于serverSocket保持打开，所以另一个客户此时能够敲门并向该服务器发送一个句子要求修改。
    connectionSocket.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在两台单独的主机上运行这两个程序，也可以修改它们以达到稍微不同的目的。你应当将前面两个UDP程序与这两个TCP程序进行比较，观察它们的不同之处。&lt;/p&gt;
&lt;h2 id=&#34;socket-programming-assignments&#34;&gt;Socket Programming Assignments&lt;/h2&gt;
&lt;p&gt;The companion Web site includes six socket programming assignments. The first four assignments are summarized below. The fifth assignment makes use of the ICMP protocol and is summarized at the end of Chapter 4. The sixth assignment employs multimedia protocols and is summarized at the end of Chapter 7. It is highly recommended that students complete several, if not all, of these assignments.  Students can find full details of these assignments, as well as important snippets of the Python code, at the Web site &lt;a href=&#34;http://www.awl.com/kurose-ross&#34;&gt;http://www.awl.com/kurose-ross&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;assignment-1-web-server&#34;&gt;Assignment 1: Web Server&lt;/h4&gt;
&lt;p&gt;In this assignment, you will develop a simple Web server in Python that is capable of processing only one request. Specifically, your Web server will (i) create a con- nection socket when contacted by a client (browser); (ii) receive the HTTP request from this connection; (iii) parse the request to determine the specific file being requested; (iv) get the requested file from the server’s file system; (v) create an HTTP response message consisting of the requested file preceded by header lines; and (vi) send the response over the TCP connection to the requesting browser. If a browser requests a file that is not present in your server, your server should return a “404 Not Found” error message.&lt;/p&gt;
&lt;p&gt;In the companion Web site, we provide the skeleton code for your server. Your job is to complete the code, run your server, and then test your server by sending requests from browsers running on different hosts. If you run your server on a host that already has a Web server running on it, then you should use a different port than port 80 for your Web server.&lt;/p&gt;
&lt;h4 id=&#34;assignment-2-udp-pinger&#34;&gt;Assignment 2: UDP Pinger&lt;/h4&gt;
&lt;p&gt;In this programming assignment, you will write a client ping program in Python.  Your client will send a simple ping message to a server, receive a corresponding pong message back from the server, and determine the delay between when the client sent the ping message and received the pong message. This delay is called the Round Trip Time (RTT). The functionality provided by the client and server is similar to the functionality provided by standard ping program available in modern operating systems. However, standard ping programs use the Internet Control Mes- sage Protocol (ICMP) (which we will study in Chapter 4). Here we will create a nonstandard (but simple!) UDP-based ping program.  Your ping program is to send 10 ping messages to the target server over UDP.  For each message, your client is to determine and print the RTT when the correspon- ding pong message is returned. Because UDP is an unreliable protocol, a packet sent by the client or server may be lost. For this reason, the client cannot wait indefinitely for a reply to a ping message. You should have the client wait up to one second for a reply from the server; if no reply is received, the client should assume that the packet was lost and print a message accordingly.&lt;/p&gt;
&lt;p&gt;In this assignment, you will be given the complete code for the server (avail- able in the companion Web site). Your job is to write the client code, which will be very similar to the server code. It is recommended that you first study carefully the server code. You can then write your client code, liberally cutting and pasting lines from the server code.&lt;/p&gt;
&lt;h4 id=&#34;assignment-3-mail-client&#34;&gt;Assignment 3: Mail Client&lt;/h4&gt;
&lt;p&gt;The goal of this programming assignment is to create a simple mail client that sends email to any recipient. Your client will need to establish a TCP connection with a mail server (e.g., a Google mail server), dialogue with the mail server using the SMTP protocol, send an email message to a recipient (e.g., your friend) via the mail server, and finally close the TCP connection with the mail server.&lt;/p&gt;
&lt;p&gt;For this assignment, the companion Web site provides the skeleton code for your client. Your job is to complete the code and test your client by sending email to different user accounts. You may also try sending through different servers (for example, through a Google mail server and through your university mail server).&lt;/p&gt;
&lt;h4 id=&#34;assignment-4-multi-threaded-web-proxy&#34;&gt;Assignment 4: Multi-Threaded Web Proxy&lt;/h4&gt;
&lt;p&gt;In this assignment, you will develop a Web proxy. When your proxy receives an HTTP request for an object from a browser, it generates a new HTTP request for the same object and sends it to the origin server. When the proxy receives the corresponding HTTP response with the object from the origin server, it creates a new HTTP response, including the object, and sends it to the client. This proxy will be multi-threaded, so that it will be able to handle multiple requests at the same time.&lt;/p&gt;
&lt;p&gt;For this assignment, the companion Web site provides the skeleton code for the proxy server. Your job is to complete the code, and then test it by having different browsers request Web objects via your proxy.&lt;/p&gt;
&lt;h2 id=&#34;wireshark-lab-http&#34;&gt;Wireshark Lab: HTTP&lt;/h2&gt;
&lt;p&gt;In this lab, we’ll explore several aspects of the HTTP protocol: &lt;strong&gt;the basic GET/response interaction&lt;/strong&gt;, &lt;strong&gt;HTTP message formats&lt;/strong&gt;, &lt;strong&gt;retrieving large HTML files&lt;/strong&gt;, &lt;strong&gt;retrieving HTML files with embedded objects&lt;/strong&gt;, and &lt;strong&gt;HTTP authentication and security&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;the-basic-http-getresponse-interaction&#34;&gt;The Basic HTTP GET/response interaction&lt;/h4&gt;
&lt;p&gt;Let’s begin our exploration of HTTP by downloading a very simple HTML file - one that is very short, and contains no embedded objects. Do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start up your web browser.&lt;/li&gt;
&lt;li&gt;Start up the Wireshark packet sniffer, as described in the Introductory lab (but don’t yet begin packet capture). Enter “http” (just the letters, not the quotation marks) in the display-filter-specification window, so that only captured HTTP messages will be displayed later in the packet-listing window. (We’re only interested in the HTTP protocol here, and don’t want to see the clutter of all captured packets).&lt;/li&gt;
&lt;li&gt;Wait a bit more than one minute (we’ll see why shortly), and then begin Wireshark packet capture.&lt;/li&gt;
&lt;li&gt;Enter the following to your browser &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html&lt;/a&gt; Your browser should display the very simple, one-line HTML file.&lt;/li&gt;
&lt;li&gt;Stop Wireshark packet capture.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your Wireshark window should look similar to the window shown in Figure 1. If you are unable to run Wireshark on a live network connection, you can download a packet trace that was created when the steps above were followed.&lt;/p&gt;
&lt;p&gt;Figure 1: Wireshark Display after &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/&lt;/a&gt; HTTPwireshark-file1.html has been retrieved by your browser&lt;/p&gt;
&lt;p&gt;The example in Figure 1 shows in the packet-listing window that two HTTP messages were captured: the GET message (from your browser to the gaia.cs.umass.edu web server) and the response message from the server to your browser. The packet-contents window shows details of the selected message (in this case the HTTP OK message, which is highlighted in the packet-listing window). Recall that since the HTTP message was carried inside a TCP segment, which was carried inside an IP datagram, which was carried within an Ethernet frame, Wireshark displays the Frame, Ethernet, IP, and TCP packet information as well. We want to minimize the amount of non-HTTP data displayed (we’re interested in HTTP here, and will be investigating these other protocols is later labs), so make sure the boxes at the far left of the Frame, Ethernet, IP and TCP information have a plus sign or a right-pointing triangle (which means there is hidden, undisplayed information), and the HTTP line has a minus sign or a down-pointing triangle (which means that all information about the HTTP message is displayed).&lt;/p&gt;
&lt;p&gt;Download the zip file &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip&lt;/a&gt; and extract the file http-ethereal-trace-1. The traces in this zip file were collected by Wireshark running on one of the author’s computers, while performing the steps indicated in the Wireshark lab. Once you have downloaded the trace, you can load it into Wireshark and view the trace using the File pull down menu, choosing Open, and then selecting the http-ethereal-trace-1 trace file. The resulting display should look similar to Figure 1. (The Wireshark user interface displays just a bit differently on different operating systems, and in different versions of Wireshark).&lt;/p&gt;
&lt;p&gt;(Note: You should ignore any HTTP GET and response for favicon.ico. If you see a reference to this file, it is your browser automatically asking the server if it (the server) has a small icon file that should be displayed next to the displayed URL in your browser. We’ll ignore references to this pesky file in this lab.).&lt;/p&gt;
&lt;p&gt;By looking at the information in the HTTP GET and response messages, answer the following questions. When answering the following questions, you should print out the GET and response messages (see the introductory Wireshark lab for an explanation of how to do this) and indicate where in the message you’ve found the information that answers the following questions. When you hand in your assignment, annotate the output so that it’s clear where in the output you’re getting the information for your answer (e.g., for our classes, we ask that students markup paper copies with a pen, or annotate electronic copies with text in a colored font).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is your browser running HTTP version 1.0 or 1.1? What version of HTTP is the server running?&lt;/li&gt;
&lt;li&gt;What languages (if any) does your browser indicate that it can accept to the server?&lt;/li&gt;
&lt;li&gt;What is the IP address of your computer? Of the gaia.cs.umass.edu server?&lt;/li&gt;
&lt;li&gt;What is the status code returned from the server to your browser?&lt;/li&gt;
&lt;li&gt;When was the HTML file that you are retrieving last modified at the server?R&lt;/li&gt;
&lt;li&gt;How many bytes of content are being returned to your browser?&lt;/li&gt;
&lt;li&gt;By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window? If so, name one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In your answer to question 5 above, you might have been surprised to find that the document you just retrieved was last modified within a minute before you downloaded the document. That’s because (for this particular file), the gaia.cs.umass.edu server is setting the file’s last-modified time to be the current time, and is doing so once per minute. Thus, if you wait a minute between accesses, the file will appear to have been recently modified, and hence your browser will download a “new” copy of the document.&lt;/p&gt;
&lt;h4 id=&#34;the-http-conditional-getresponse-interaction&#34;&gt;The HTTP CONDITIONAL GET/response interaction&lt;/h4&gt;
&lt;p&gt;Recall from Section 2.2.5 of the text, that most web browsers perform object caching and thus perform a conditional GET when retrieving an HTTP object. Before performing the steps below, make sure your browser’s cache is empty. (To do this under Firefox, select Tools-&amp;gt;Clear Recent History and check the Cache box, or for Internet Explorer, select Tools-&amp;gt;Internet Options-&amp;gt;Delete File; these actions will remove cached files from your browser’s cache.) Now do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start up your web browser, and make sure your browser’s cache is cleared, as discussed above.&lt;/li&gt;
&lt;li&gt;Start up the Wireshark packet sniffer&lt;/li&gt;
&lt;li&gt;Enter the following URL into your browser &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html&lt;/a&gt; Your browser should display a very simple five-line HTML file.&lt;/li&gt;
&lt;li&gt;Quickly enter the same URL into your browser again (or simply select the refresh button on your browser)&lt;/li&gt;
&lt;li&gt;Stop Wireshark packet capture, and enter “http” in the display-filter-specification window, so that only captured HTTP messages will be displayed later in the packet-listing window.&lt;/li&gt;
&lt;li&gt;(Note: If you are unable to run Wireshark on a live network connection, you can use the http-ethereal-trace-2 packet trace to answer the questions below; see footnote 1. This trace file was gathered while performing the steps above on one of the author’s computers.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Answer the following questions:&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Inspect the contents of the first HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?&lt;/li&gt;
&lt;li&gt;Inspect the contents of the server response. Did the server explicitly return the contents of the file? How can you tell?&lt;/li&gt;
&lt;li&gt;Now inspect the contents of the second HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET? If so, what information follows the “IF-MODIFIED-SINCE:” header?&lt;/li&gt;
&lt;li&gt;What is the HTTP status code and phrase returned from the server in response to this second HTTP GET? Did the server explicitly return the contents of the file? Explain.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;retrieving-long-documents&#34;&gt;Retrieving Long Documents&lt;/h4&gt;
&lt;p&gt;In our examples thus far, the documents retrieved have been simple and short HTML files. Let’s next see what happens when we download a long HTML file. Do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start up your web browser, and make sure your browser’s cache is cleared, as discussed above.&lt;/li&gt;
&lt;li&gt;Start up the Wireshark packet sniffer&lt;/li&gt;
&lt;li&gt;Enter the following URL into your browser &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html&lt;/a&gt; Your browser should display the rather lengthy US Bill of Rights.&lt;/li&gt;
&lt;li&gt;Stop Wireshark packet capture, and enter “http” in the display-filter-specification window, so that only captured HTTP messages will be displayed.&lt;/li&gt;
&lt;li&gt;(Note: If you are unable to run Wireshark on a live network connection, you can use the http-ethereal-trace-3 packet trace to answer the questions below; see footnote 1. This trace file was gathered while performing the steps above on one of the author’s computers.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the packet-listing window, you should see your HTTP GET message, followed by a multiple-packet TCP response to your HTTP GET request. This multiple-packet response deserves a bit of explanation. Recall from Section 2.2 (see Figure 2.9 in the text) that the HTTP response message consists of a status line, followed by header lines, followed by a blank line, followed by the entity body. In the case of our HTTP GET, the  entity body in the response is the entire requested HTML file. In our case here, the HTML file is rather long, and at 4500 bytes is too large to fit in one TCP packet. The single HTTP response message is thus broken into several pieces by TCP, with each piece being contained within a separate TCP segment (see Figure 1.24 in the text). In recent versions of Wireshark, Wireshark indicates each TCP segment as a separate packet, and the fact that the single HTTP response was fragmented across multiple TCP packets is indicated by the “TCP segment of a reassembled PDU” in the Info column of the Wireshark display. Earlier versions of Wireshark used the “Continuation” phrase to indicated that the entire content of an HTTP message was broken across multiple TCP segments.. We stress here that there is no “Continuation” message in HTTP!&lt;/p&gt;
&lt;p&gt;Answer the following questions:&lt;/p&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;How many HTTP GET request messages did your browser send? Which packet number in the trace contains the GET message for the Bill or Rights?&lt;/li&gt;
&lt;li&gt;Which packet number in the trace contains the status code and phrase associated with the response to the HTTP GET request?&lt;/li&gt;
&lt;li&gt;What is the status code and phrase in the response?&lt;/li&gt;
&lt;li&gt;How many data-containing TCP segments were needed to carry the single HTTP response and the text of the Bill of Rights?&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;html-documents-with-embedded-objects&#34;&gt;HTML Documents with Embedded Objects&lt;/h4&gt;
&lt;p&gt;Now that we’ve seen how Wireshark displays the captured packet traffic for large HTML files, we can look at what happens when your browser downloads a file with embedded objects, i.e., a file that includes other objects (in the example below, image files) that are stored on another server(s).&lt;/p&gt;
&lt;p&gt;Do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start up your web browser, and make sure your browser’s cache is cleared, as discussed above.&lt;/li&gt;
&lt;li&gt;Start up the Wireshark packet sniffer&lt;/li&gt;
&lt;li&gt;Enter the following URL into your browser &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html&lt;/a&gt; Your browser should display a short HTML file with two images. These two images are referenced in the base HTML file. That is, the images themselves are not contained in the HTML; instead the URLs for the images are contained in the downloaded HTML file. As discussed in the textbook, your browser will have to retrieve these logos from the indicated web sites. Our publisher’s logo is retrieved from the gaia.cs.umass.edu web site. The image of the cover for our 5th edition (one of our favorite covers) is stored at the caite.cs.umass.edu server. (These are two different web servers inside cs.umass.edu).&lt;/li&gt;
&lt;li&gt;Stop Wireshark packet capture, and enter “http” in the display-filter-specification window, so that only captured HTTP messages will be displayed.&lt;/li&gt;
&lt;li&gt;(Note: If you are unable to run Wireshark on a live network connection, you can use the http-ethereal-trace-4 packet trace to answer the questions below; see footnote 1. This trace file was gathered while performing the steps above on one of the author’s computers.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Answer the following questions:&lt;/p&gt;
&lt;ol start=&#34;16&#34;&gt;
&lt;li&gt;How many HTTP GET request messages did your browser send? To which Internet addresses were these GET requests sent?&lt;/li&gt;
&lt;li&gt;Can you tell whether your browser downloaded the two images serially, or whether they were downloaded from the two web sites in parallel? Explain.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;http-authentication&#34;&gt;HTTP Authentication&lt;/h4&gt;
&lt;p&gt;Finally, let’s try visiting a web site that is password-protected and examine the sequence of HTTP message exchanged for such a site. The URL &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html&lt;/a&gt; is password protected. The username is “wireshark-students” (without the quotes), and the password is “network” (again, without the quotes). So let’s access this “secure” password-protected site. Do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure your browser’s cache is cleared, as discussed above, and close down your browser. Then, start up your browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start up the Wireshark packet sniffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the following URL into your browser &lt;a href=&#34;http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html&#34;&gt;http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html&lt;/a&gt; Type the requested user name and password into the pop up box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop Wireshark packet capture, and enter “http” in the display-filter-specification window, so that only captured HTTP messages will be displayed later in the packet-listing window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Note: If you are unable to run Wireshark on a live network connection, you can use the http-ethereal-trace-5 packet trace to answer the questions below; see footnote 2. This trace file was gathered while performing the steps above on one of the author’s computers.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let’s examine the Wireshark output. You might want to first read up on HTTP authentication by reviewing the easy-to-read material on “HTTP Access Authentication Framework” at &lt;a href=&#34;http://frontier.userland.com/stories/storyReader$2159&#34;&gt;http://frontier.userland.com/stories/storyReader$2159&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Answer the following questions:&lt;/p&gt;
&lt;ol start=&#34;18&#34;&gt;
&lt;li&gt;What is the server’s response (status code and phrase) in response to the initial HTTP GET message from your browser?&lt;/li&gt;
&lt;li&gt;When your browser’s sends the HTTP GET message for the second time, what new field is included in the HTTP GET message?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The username (wireshark-students) and password (network) that you entered are encoded in the string of characters (d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=) following  the “Authorization: Basic” header in the client’s HTTP GET message. While it may appear that your username and password are encrypted, they are simply encoded in a format known as Base64 format. The username and password are not encrypted! To see this, go to &lt;a href=&#34;http://www.motobit.com/util/base64-decoder-encoder.asp&#34;&gt;http://www.motobit.com/util/base64-decoder-encoder.asp&lt;/a&gt; and enter the base64-encoded string d2lyZXNoYXJrLXN0dWRlbnRz and decode. Voila! You have translated from Base64 encoding to ASCII encoding, and thus should see your username! To view the password, enter the remainder of the string Om5ldHdvcms= and press decode. Since anyone can download a tool like Wireshark and sniff packets (not just their own) passing by their network adaptor, and anyone can translate from Base64 to ASCII (you just did it!), it should be clear to you that simple passwords on WWW sites are not secure unless additional measures are taken.&lt;/p&gt;
&lt;p&gt;Fear not! As we will see in Chapter 8, there are ways to make WWW access more secure. However, we’ll clearly need something that goes beyond the basic HTTP authentication framework!&lt;/p&gt;
&lt;h2 id=&#34;wireshark-lab-dns&#34;&gt;Wireshark Lab: DNS&lt;/h2&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pearson.com/us/higher-education/product/Kurose-Computer-Networking-A-Top-Down-Approach-6th-Edition/9780132856201.html?tab=contents&#34;&gt;Computer Networking: A Top-Down Approach, 6th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaia.cs.umass.edu/kurose_ross/wireshark.htm&#34;&gt;&lt;strong&gt;Wireshark Labs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Computer Networks and the Internet</title>
      <link>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-1/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/computer-networking/computer-networks-1/</guid>
      
        <description>&lt;h2 id=&#34;what-is-the-internet&#34;&gt;What Is the Internet?&lt;/h2&gt;
&lt;h4 id=&#34;a-nuts-and-bolts-description&#34;&gt;A Nuts-and-Bolts Description&lt;/h4&gt;
&lt;p&gt;设备：称为&lt;strong&gt;主机（host）&lt;strong&gt;或&lt;/strong&gt;端系统（end system）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;端系统通过**通信链路（communication link）&lt;strong&gt;和&lt;/strong&gt;分组交换机（packet switch）**连接到一起。&lt;/p&gt;
&lt;p&gt;通信链路的物理媒体包含：电缆、铜线、光纤和无线电频谱。&lt;/p&gt;
&lt;p&gt;端系统向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节，形成的信息包称为&lt;strong&gt;分组（packet）&lt;/strong&gt;，分组到目的端系统被装配成初始数据。&lt;/p&gt;
&lt;p&gt;分组交换机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**路由器（router）**通常用于网络核心中&lt;/li&gt;
&lt;li&gt;**链路层交换机（link-layer swtich）**通常用于接入网中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;端系统通过**因特网服务提供商（Internet Service Provider, ISP）**接入因特网。每个ISP自身就是一个由多台分组交换机和多段通信链路组成的网络。因特网就是将端系统互联，因此为端系统提供的ISP也必须互联起来。无论是较高层还是较低层ISP网络,它们每个都是独立管理的,运行着IP协议,遵从一定的命名和地址规则。&lt;/p&gt;
&lt;p&gt;端系统、分组交换机和其他因特网部件都要运行一系列&lt;strong&gt;协议(protocol)&lt;/strong&gt;,这些协议控制因特网中信息的接收和发送。**TCP(Transmission Control Protocol, 传输控制协议)&lt;strong&gt;和&lt;/strong&gt;IP(Intemnet Protocol,网际协议)**是因特网中两个最为重要的协议。IP协议定义了在路由器和端系统之间发送和接收的分组格式。&lt;strong&gt;因特网的主要协议统称为TCP/IP。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;a-services-description&#34;&gt;A Services Description&lt;/h4&gt;
&lt;p&gt;涉及多个相互交换数据的端系统的应用程序, 被称为&lt;strong&gt;分布式应用程序(distributed application)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;与因特网相连的端系统提供了一个&lt;strong&gt;套接字接口（socket interface）&lt;/strong&gt;,该接口规定了运行在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交付数据的方式。&lt;/p&gt;
&lt;h4 id=&#34;what-is-a-protocol&#34;&gt;What Is a Protocol?&lt;/h4&gt;
&lt;p&gt;**协议（protocol）**定义了在两个或多个通信实体之间交换的报文的格式和顺序,以及报文发送和/或接收一条报文或其他事件所采取的动作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;掌握计算机网络领域知识的过程就是理解网络协议的构成、原理和工作方式的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-network-edge&#34;&gt;The Network Edge&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主机 = 端系统&lt;/strong&gt;。主机有时又被进一步划分为两类：&lt;strong&gt;客户（client）&lt;strong&gt;和&lt;/strong&gt;服务器(server)&lt;/strong&gt;。今天, 大部分提供搜索结果、电子邮件、Web页面和视频的服务器都属于&lt;strong&gt;大型数据中心(data center)&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;access-networks&#34;&gt;Access Networks&lt;/h4&gt;
&lt;p&gt;接入网是指将端系统物理连接到其**边缘路由器（edge rounter）**的物理链路。边缘路由器是端系统到任何其他远程端系统的路径上的第一台路由器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家庭接人:数字用户线（Digital Subscriber Line, DSL）、电缆（Cable）、光纤入户（FTTH）、拨号（很慢）和卫星&lt;/li&gt;
&lt;li&gt;企业(和家庭)接人:以太网和WiFi，以太网是用局域网（LAN）技术，WIFI是无线LAN。现在家庭通常电缆或DSL可以与无线局域网结合使用&lt;/li&gt;
&lt;li&gt;广域无线接人:3G和LTE，通过蜂窝网提供商运营的基站发送接收分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;physical-media&#34;&gt;Physical Media&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;双绕铜线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;li&gt;陆地无线电信道&lt;/li&gt;
&lt;li&gt;卫星无线电信道&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-network-core&#34;&gt;The Network Core&lt;/h2&gt;
&lt;h4 id=&#34;packet-switching&#34;&gt;Packet Switching&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在各种网络应用中,端系统彼此交换&lt;strong&gt;报文(message)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;报文能够包含协议设计者需要的任何东西。&lt;strong&gt;报文可以执行一种控制功能,也可以包含数据&lt;/strong&gt;, 例如电子邮件数据、JPEC图像或MP3音频文件。&lt;/li&gt;
&lt;li&gt;为了从源端系统向目的端系统发送一个报文, 源将长报文划分为较小的数据块,称之为&lt;strong&gt;分组(packet)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在源和目的地之间,每个分组都通过通信链路和**分组交换机(packet switch)**传送。(交换机主要有两类:&lt;strong&gt;路由器(router)&lt;strong&gt;和&lt;/strong&gt;链路层交换机(link-layer switch)&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;存储转发传输&#34;&gt;存储转发传输&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;多数分组交换机在链路的输人端使用**存储转发传输(store-and-forward transmission)**机制。存储转发传输是指在交换机能够开始向输出链路传输该分组的第一个比特之前,必须接收到整个分组。&lt;/li&gt;
&lt;li&gt;通过由N条速率均为R的链路组成的路径，有N-1台路由器，从源到目的地发送一个分组，端到端时延是$$N\frac{L}{R}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;排队时延和分组丢失&#34;&gt;排队时延和分组丢失&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;每台分组交换机有多条链路与之相连。对于每条相连的链路,该分组交换机具有一个&lt;strong&gt;输出缓存(output buffer,也称为输出队列(output queue))&lt;/strong&gt;,它用于存储路由器准备发往那条链路的分组。该输出缓存在分组交换中起着重要的作用。&lt;/li&gt;
&lt;li&gt;除了存储转发时延以外,分组还要承受输出缓存的&lt;strong&gt;排队时延(queuing delay)&lt;/strong&gt;。这些时延是变化的,变化的程度取决于网络的拥塞程度。因为缓存空间的大小是有限的,一个到达的分组可能发现该缓存已被其他等待传输的分组完全充满了。在此情况下,将出现&lt;strong&gt;分组丢失(丢包)(packet loss)&lt;/strong&gt;,到达的分组或已经排队的分组之一将被丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;转发表和路由选择协议&#34;&gt;转发表和路由选择协议&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;在因特网中，每个端系统具有一个称为&lt;strong&gt;IP地址&lt;/strong&gt;的地址。&lt;/li&gt;
&lt;li&gt;每台路由器具有一个&lt;strong&gt;转发表(forwarding table)&lt;/strong&gt;,用于将目的地址（或目的地址的一部分）映射成为输出链路。&lt;/li&gt;
&lt;li&gt;因特网具有一些特殊的&lt;strong&gt;路由选择协议（routing protocol）&lt;/strong&gt; ，用于自动地设置这些转发表。&lt;/li&gt;
&lt;li&gt;使用Traceroute程序可以看到分组在因特网中所走的端到端路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;circuit-switching&#34;&gt;Circuit Switching&lt;/h4&gt;
&lt;p&gt;通过网络链路和交换机移动数据有两种基本方法:&lt;strong&gt;电路交换(circuit switching)&lt;strong&gt;和&lt;/strong&gt;分组交换(packet switching)&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;a-network-of-networks&#34;&gt;A Network of Networks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;因为接入ISP向全球传输ISP付费,故接人ISP被认为是&lt;strong&gt;客户(customer)&lt;/strong&gt;,而全球传输ISP被认为是&lt;strong&gt;提供商(provider)&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;在任何给定的区域,可能有一个&lt;strong&gt;区域ISP(regional ISP)&lt;/strong&gt;，区域中的接人ISP与之连接。每个区域ISP则与&lt;strong&gt;第一层ISP(tier-1 ISP)连接&lt;/strong&gt;。第一层ISP类似于我们假想的全球传输ISP,尽管它不是在世界上每个城市中都存在,但它确实存在。&lt;/li&gt;
&lt;li&gt;任何ISP〔(除了第一层ISP)可以选择&lt;strong&gt;多宿(multi-home)&lt;/strong&gt;,即可以与两个或更多提供商ISP连接。例如,一个接人ISP可能与两个区域ISP多宿,既可以与两个区域ISP多宿,也可以与多个第一层ISP多宿。当一个ISP提供商出现故障，能够继续发送和接收分组。&lt;/li&gt;
&lt;li&gt;位于相同等级结构层次的邻近一对ISP能够&lt;strong&gt;对等(peer)&lt;/strong&gt;, 也就是说,能够直接将它们的网络连到一起,使它们之间的所有流量经直接连接而不是通过上游的中间ISP传输。当两个ISP对等时,通常不进行结算,即任一个ISP不向其对等付费。因特网交换点（Internet Exchange Point, IXP）多个ISP能够在这里共同对等。&lt;/li&gt;
&lt;li&gt;顶部有&lt;strong&gt;内容提供商网络（content provider network）&lt;/strong&gt;，数据中心绕过较高层ISP，直接与较低层ISP连接。&lt;/li&gt;
&lt;li&gt;今天的因特网是一个&lt;strong&gt;网络的网络&lt;/strong&gt;，其结构复杂，由十多个第一层ISP和数十万个较低层ISP组成。较低层的ISP与较高层的ISP相连,较高层ISP彼此互联。用户和内容提供商是较低层ISP的客户,较低层ISP是较高层ISP的客户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-aeb1ce8889ea9b88cb57afbe5c49cc6c_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;delay-loss-and-throughput-in-packet-switched-networks&#34;&gt;Delay, Loss, and Throughput in Packet-Switched Networks&lt;/h2&gt;
&lt;h4 id=&#34;overview-of-delay-in-packet-switched-networks&#34;&gt;Overview of Delay in Packet-Switched Networks&lt;/h4&gt;
&lt;p&gt;当分组从一个节点(主机或路由器)沿着这条路径到后继节点(主机或路由器),该分组在沿途的冬个节点经受了几种不同类型的时延。这些时延最为重要的是&lt;strong&gt;节点处理时延(nodalprocessing delay)&lt;/strong&gt;、&lt;strong&gt;排队时延(queuing delay)&lt;/strong&gt;、&lt;strong&gt;传输时延(transmission delay)&lt;strong&gt;和&lt;/strong&gt;传播时延(propagation delay)&lt;/strong&gt;,这些时延总体累加起来是&lt;strong&gt;节点总时延(totalnodal delay)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-5d5e8ce120b48b8ea632f8e6564480f0_1440w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处理时延&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;检查分组首部和决定将该分组导向何处所需要的时间是&lt;strong&gt;处理时延&lt;/strong&gt;的一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排队时延&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在队列中,当分组在链路上等待传输时,它经受&lt;strong&gt;排队时延&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输时延&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用L比特表示该分组的长度,用Rbps(即b/s)表示从路由器A到路由器B的链路传输速率。链路,速率史=10Mbps;对于100Mbps的以太网链路,速率R=100Mbps。&lt;strong&gt;传输时延是L/R&lt;/strong&gt;。这是将所有分组的比特推向链路(即传输,或者说发射)所需要的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传播时延&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一旦一个比特被推向链路,该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是&lt;strong&gt;传播时延&lt;/strong&gt;。该比特以该链路的传播速率传播。该传播速率取决于该链路的物理媒体(即光纤、双绞铜线等),其速率范围是2x10~3x10m/s,这等于或略小于光速。该传播时延等于两台路由器之间的距离除以传播速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传输时延是路由器将分组推出所需要的时间，是分组长度和链路传输速率的函数，而与两台路由器之间的距离无关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传播时延是一个比特从一台路由器向另一台路由器传播所需要的时间，是两台路由器之间距离的函数，而与分组长度或链路传播速率无关。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;queuing-delay-and-packet-loss&#34;&gt;Queuing Delay and Packet Loss&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;节点时延的最为复杂和有趣的成分是排队时延。&lt;/li&gt;
&lt;li&gt;与其他三项时延（即、 和 ）不同的是，排队时延对不同的分组可能是不同的&lt;/li&gt;
&lt;li&gt;令 $a$ 表示分组到达队列的平均速率（单位：分组/秒，即 $pkt/s$）；$R$是传输速率，即从队列中推出比特的速率（单位 $bps$：，即$b/s$）；假定所以分组都是由$L$比特组成的**，**则比特到达队列的平均速率是$La/R &amp;gt; 1$。假定该队列非常大，因此它基本能容纳无限数量的比特。比率$La/R$被称为**流量强度（traffic intensity）**。&lt;/li&gt;
&lt;li&gt;如果，则比特到达队列的平均速率超过从该队列传输出去的速率，该队列趋向于无限增加，并且排队时延将趋向无穷大！因此，流量工程的一条金科玉律是：&lt;strong&gt;设计系统时流量强度不能大于1&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在上述讨论中,我们已经假设队列能够容纳无穷多的分组。在现实中,一条链路前的队列只有有限的容量,尽管排队容量极大地依赖于路由器设计和成本。因为该排队容量是有限的,随着流量强度接近1,排队时延并不真正趋向无穷大。相反,到达的分组将发现一个满的队列。由于没有地方存储这个分组,路由器将&lt;strong&gt;丢弃(drop)&lt;strong&gt;该分组,即该分组将会&lt;/strong&gt;丢失(lost)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分组丢失的比例随着流量强度增加而增加&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;end-to-end-delay&#34;&gt;End-to-End Delay&lt;/h4&gt;
&lt;p&gt;假定在源主机和目的主机之间有台路由器。我们还要假设该网络此时是无拥塞的(因此排队时延是微不足道的),在每台路由器和源主机上的处理时延是$d_{proc}$。,每台路由器和源主机的输出速率是$R$ bps,每条链路的传播时延是$d_{prop}$。节点时延累加起来, 得到端到端时延:$d_{end-end}=N(d_{proc}+d_{trans}+d_{prop})$  式中，其中$L$是分组长度，$d_{trans} = L/R$&lt;/p&gt;
&lt;h4 id=&#34;throughput-in-computer-networks-计算机网络中的吞吐量&#34;&gt;Throughput in Computer Networks (计算机网络中的吞吐量)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;考虑从主机A到主机B跨越计算机网络传送一个大文件，在任何时间瞬间的&lt;strong&gt;瞬时吞吐量（instantaneous throughput）&lt;strong&gt;是主机B接收到该文件的&lt;/strong&gt;速率&lt;/strong&gt;（以计）。&lt;/li&gt;
&lt;li&gt;如果该文件由比特组成，主机B接收到所有F比特用去秒，则文件传送的**平均吞吐量（average throughout）**是&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protocol-layers-and-their-service-models&#34;&gt;Protocol Layers and Their Service Models&lt;/h2&gt;
&lt;h4 id=&#34;layered-architecture&#34;&gt;Layered Architecture&lt;/h4&gt;
&lt;h6 id=&#34;协议分层&#34;&gt;协议分层&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议分层的优缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：协议分层具有概念化和结构化的优点。分层提供了一种结构化方式来讨论系统组件。模块化使更新系统组件更为容易。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：分层的一个潜在缺点是一层可能冗余较低层的功能。第二个潜在的缺点 是某层的功能可能需要仅在其他某层才出现的信息（如时间戳值），这违反了层次分离的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各层的所有协议被称为协议栈(protocol stack)。&lt;/p&gt;
&lt;p&gt;五层因特网协议栈:&lt;strong&gt;物理层、链路层、网络层、运输层和应用层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;七层ISO OSI参考模型：&lt;strong&gt;物理层、链路层、网络层、运输层、会话层、表示层和应用层&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因特网协议栈自顶向下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;p&gt;因特网的应用层包括许多协议，例如HTTP（Web文档请求和传送）、SMTP（电子邮件报文的传输）、FTP（两个端系统之间的文件传送）、DNS（域名系统）等。&lt;/p&gt;
&lt;p&gt;应用层协议分布在多个端的系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息的分组。应用层的信息分组称为&lt;strong&gt;报文(message)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运输层&lt;/p&gt;
&lt;p&gt;因特网的运输层在应用程序端点之间&lt;strong&gt;传送应用层报文&lt;/strong&gt;。因特网中有两个运输协议，即TCP和UDP，两个都可以运输应用层报文。&lt;/p&gt;
&lt;p&gt;TCP是面向连接的，这种服务包括了应用层报文向目的地的&lt;strong&gt;确保传递&lt;/strong&gt;和&lt;strong&gt;流量控制&lt;/strong&gt;，TCP也将长报文&lt;strong&gt;划分为短报文&lt;/strong&gt;，并提供&lt;strong&gt;拥塞控制&lt;/strong&gt;机制，因此当网络拥塞时，源地址会抑制其传输速率。&lt;/p&gt;
&lt;p&gt;UDP协议提供无连接服务，这是一种不提供不必要服务的服务，&lt;strong&gt;没有可靠性，没有流量控制，也没有拥塞控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;运输层分组称为&lt;strong&gt;报文段(segment)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层
网络层的分组称为 &lt;strong&gt;数据报(datagram)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因特网的网络层把数据包从一台主机移动到另一台主机。在一台源主机中的因特网运输层协议（TCP或UDP）向网络层&lt;strong&gt;递交运输层报文段和目的地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网络层中包括&lt;strong&gt;IP协议&lt;/strong&gt;，该协议定义了数据包中的各个字段以及端系统和路由器如何作用于这些字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路层
因特网的网络层通过源和目的地之间的一系列路由器路由数据报。网络层依靠链路层的服务来将分组从结点(主机或路由器)移动到路径上的下一个结点。在每一个结点，网络层将数据报下，链路层沿着路径将数据报传递给下一个结点，在下一个结点，链路层将数据报上传给网络层。&lt;/p&gt;
&lt;p&gt;某些协议基于链路层提供可靠传递，从传输结点跨越一条链路到接收结点，这种可靠传输不同于TCP的可靠传输。(从一个端系统到另一个端系统)&lt;/p&gt;
&lt;p&gt;链路层分组称为 &lt;strong&gt;帧(frame)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理层
链路层的任务是把整个帧从一个网络元素移动到邻近的网络元素，物理层的任务则是把&lt;strong&gt;该帧中的一个个比特从一个结点移动到下一个结点&lt;/strong&gt;，这些仍是和链路相关的，但是是与链路的实际传输媒体相关的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OSI模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表示层&lt;/p&gt;
&lt;p&gt;表示层的作用是使通信的应用程序能够解释交换数据的含义。这些服务包括数据压缩、数据加密以及数据描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会话层&lt;/p&gt;
&lt;p&gt;会话层提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因特网缺少了OSI模型中的两层，这两层留给应用程序开发者处理。&lt;/p&gt;
&lt;h4 id=&#34;encapsulation&#34;&gt;Encapsulation&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-9a7b7f552162bcb27dd2c4986c03568a_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据从发送端系统的协议栈向下，向上和向下经过中间的链路层交换机和路由器协议栈，进而向上到达接收端系统的协议栈。&lt;/p&gt;
&lt;p&gt;路由器和链路层交换机并不实现协议栈中的所有层次。链路层交换机实现了链路层和物理层，路由器实现了链路层、物理层和网络层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装（encapsulation）&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运输层收到&lt;strong&gt;应用层报文(application-layer message)&lt;strong&gt;并附上运输层首部信息，构成了&lt;/strong&gt;运输层报文端（transport-layer segment）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;网络层增加了如源和目的端系统地址和网络层首部信息，产生&lt;strong&gt;网络层数据报（network-layer datagram）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;链路层增加链路层首部信息并创建&lt;strong&gt;链路层帧（link-layer frame）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在每一层，一个分组都具有两种类型的字段：&lt;strong&gt;首部字段和有效载荷字段（payload field）&lt;/strong&gt;，有效符合通常来自上一层的分组。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pearson.com/us/higher-education/product/Kurose-Computer-Networking-A-Top-Down-Approach-6th-Edition/9780132856201.html?tab=contents&#34;&gt;Computer Networking: A Top-Down Approach, 6th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>How the Internet Works</title>
      <link>http://www.yezheng.pro/post/specialization/computer-networking/how-the-internet-works/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/computer-networking/how-the-internet-works/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;Multiple packets in pipeline at same time&lt;/li&gt;
&lt;li&gt;Packets may be &lt;strong&gt;damaged&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Packets may arrive &lt;strong&gt;out of order&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Packets may be &lt;strong&gt;duplicated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;They may not arrive at all!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summary so far: Applications send and receive data in &lt;strong&gt;packets&lt;/strong&gt; over an Internet that is &lt;strong&gt;unreliable&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-packets-find-their-way-across-the-internet&#34;&gt;How packets find their way across the Internet?&lt;/h3&gt;
&lt;h6 id=&#34;internet-addresses&#34;&gt;Internet addresses&lt;/h6&gt;
&lt;p&gt;| Data | Internet &amp;ldquo;IP&amp;rdquo; Address |&lt;/p&gt;
&lt;p&gt;All Internet packets carry a destination IP address. We usually write the IP address like this: 171.64.74.58&lt;/p&gt;
&lt;h6 id=&#34;routers-forward-packets-one-at-a-time&#34;&gt;Routers forward packets one at a time&lt;/h6&gt;
&lt;p&gt;Routers look at IP addresses, then send packets to a router closer to the destination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The IP address tells a router where to send the packet next.&lt;/strong&gt;
IP addresses have structure:
A network in The Stanford the computer CS department University yuba.stanford.edu at Stanford University
171.64.74.58
An address managed by RIPE. An address  The computer at (European Koç University &lt;a href=&#34;http://www.ku.edu.tr&#34;&gt;www.ku.edu.tr&lt;/a&gt; IP Networks)
88.255.96.208&lt;/p&gt;
&lt;h4 id=&#34;can-we-see-the-path-our-packets-take&#34;&gt;Can we see the path our packets take?&lt;/h4&gt;
&lt;p&gt;On your computer, try: “&lt;strong&gt;ping&lt;/strong&gt; yuba.stanford.edu” and “&lt;strong&gt;traceroute&lt;/strong&gt; yuba.stanford.edu”
(Windows: “tracert yuba.stanford.edu”)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Round Trip Time (RTT)&lt;/strong&gt; is the length time it takes for a data packet to be sent to a destination plus the time it takes for an acknowledgment of that packet to be received back at the origin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packets are forwarded hop-by-hop based on the final destination address.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Internet cannot be trusted!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Internet doesn’t promise to deliver packets in order.&lt;/li&gt;
&lt;li&gt;It doesn’t promise to deliver packets quickly, or on time.&lt;/li&gt;
&lt;li&gt;It doesn’t even promise to deliver them at all!&lt;/li&gt;
&lt;li&gt;It just makes a “best-effort” attempt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sending data reliably over an Internet that is unreliable.&lt;/p&gt;
&lt;h4 id=&#34;how-network-applications-communicate&#34;&gt;How Network Applications Communicate&lt;/h4&gt;
&lt;p&gt;The most common method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Communication is in both directions – “bidirectional”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communication is reliable&lt;/p&gt;
&lt;p&gt;(if there is a working path between the two computers).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s like an unformatted pipe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You push data in at one end, and it pops out correctly at the other end.&lt;/li&gt;
&lt;li&gt;The applications decide how the data is formatted inside the pipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Byte Stream Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup connection&lt;/li&gt;
&lt;li&gt;Stream of bytes&lt;/li&gt;
&lt;li&gt;Close connection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;World Wide Web (HTTP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Setup connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stream of bytes&lt;/p&gt;
&lt;p&gt;GET/HTTP/1.1 index.html&lt;/p&gt;
&lt;p&gt;HTTP/1.1 200 OK &amp;lt;&amp;hellip;contents of index.html&amp;hellip;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close connection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP makes sure all the data is delivered&lt;/p&gt;
&lt;h4 id=&#34;tcps-job&#34;&gt;TCP’s job&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Makes sure all data is delivered correctly. Delivers data to the application in the right order.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add sequence numbers to every packet (so the receiver can check if any are missing, and put them in right order)&lt;/li&gt;
&lt;li&gt;When a packet arrives, send an acknowledgment of receipt or “&lt;strong&gt;ACK&lt;/strong&gt;” back to the sender&lt;/li&gt;
&lt;li&gt;If no acknowledgment is received, resend the data&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;packets-are-encapsulated-by-different-layers-of-processing&#34;&gt;Packets are “encapsulated” by different “layers” of processing&lt;/h4&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Applications send and receive data in packets over an Internet that is unreliable.&lt;/p&gt;
&lt;p&gt;Packets are forwarded hop-by-hop using the IP destination address.&lt;/p&gt;
&lt;p&gt;Our applications use TCP to make sure they are delivered and put back in the correct order.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>evaluate the quality of the training phrases in intents</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/evaluate-the-quality-of-the-training-phrases-in-intents/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/evaluate-the-quality-of-the-training-phrases-in-intents/</guid>
      
        <description>&lt;p&gt;This tutorial shows you how to analyze and evaluate the quality of the training phrases supplied to your &lt;a href=&#34;https://dialogflow.com/&#34;&gt;Dialogflow&lt;/a&gt; agent&amp;rsquo;s intents. The purpose of this analysis is to avoid confusing the agent with phrases irrelevant to the intents supplied to, or more relevant to, other intents.&lt;/p&gt;
&lt;p&gt;The approach you take is to generate semantic embeddings of the training phrases by using the &lt;a href=&#34;https://www.tensorflow.org/hub/&#34;&gt;TensorFlow Hub&lt;/a&gt; (&lt;code&gt;tf.Hub&lt;/code&gt;) Universal Sentence Encoder module. You then compute cohesion and separation measurements based on the similarity between embeddings within the same intents and different intents. The tutorial also identifies &amp;ldquo;confusing&amp;rdquo; training phrases, where they are nearer—in the embedding space—to intents that are different from the ones supplied for.&lt;/p&gt;
&lt;p&gt;You can find the code for this tutorial in this &lt;a href=&#34;https://colab.research.google.com/drive/1QQblWJX5aZ6TajVXNAogFpVJlzYDbMtX&#34;&gt;Colab notebook&lt;/a&gt;. The article assumes that you have a basic background knowledge of Dialogflow. To learn more about Dialogflow, see this &lt;a href=&#34;https://cloud.google.com/solutions/building-and-deploying-chatbot-dialogflow&#34;&gt;multi-part tutorial&lt;/a&gt; on how to build, secure, and scale a chatbot by using Dialogflow Enterprise Edition on Google Cloud.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dialogflow.com/&#34;&gt;Dialogflow&lt;/a&gt; lets you build conversational interfaces on top of your products and services by providing a powerful natural-language understanding (NLU) engine to process and understand natural language input. Use cases for Dialogflow include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building booking and reservation bots for airlines, cinemas, and so on.&lt;/li&gt;
&lt;li&gt;Simplifying a system for ordering fast food for delivery.&lt;/li&gt;
&lt;li&gt;Enabling efficient customer service through semi-automated call centers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although you can implement complex conversational flows to handle a user utterance, Dialogflow fundamentally performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user asks questions like, &amp;ldquo;What is the total of my bill for the last month?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;agent&lt;/em&gt; parses the input and matches it to an &lt;em&gt;intent&lt;/em&gt; such as &lt;code&gt;bill_value_inquiry&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The agent also extracts &lt;em&gt;entities&lt;/em&gt; information, like &amp;ldquo;last month&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Given the intent of the extracted entities, the agent then invokes a &lt;em&gt;fulfillment&lt;/em&gt; to respond to the user&amp;rsquo;s request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following table describes the key concepts in the Dialogflow platform.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Term&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://dialogflow.com/docs/agents&#34;&gt;agent&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Agents are best described as NLU modules that can be integrated into your system. An agent converts text or spoken user requests into actionable data, when a user&amp;rsquo;s input matches an intent in your agent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://dialogflow.com/docs/intents&#34;&gt;intent&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;In a conversation, intents map user input to responses. In each intent, you define examples (training phrases) of user utterances that can trigger the intent, what to extract from each utterance, and how to respond.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://dialogflow.com/docs/entities&#34;&gt;entities&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Where intents allow your agent to understand the motivation behind a particular user input, entities are used to pick out specific pieces of information that your users mention. For example, street addresses, product names, or amounts with units can be used to fulfill the user&amp;rsquo;s request.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://dialogflow.com/docs/fulfillment&#34;&gt;fulfillment&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fulfillment allows you to use the entity information extracted by the agent to generate dynamic responses or trigger actions on your backend on an intent-by-intent basis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more details on Dialogflow concepts, see the &lt;a href=&#34;https://dialogflow.com/docs/&#34;&gt;Dialogflow documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Intents are essential to a Dialogflow system, because they link the user request to the right business logic to fulfill it. For example, a Dialogflow system for a telecom services provider might have intents like &lt;code&gt;bill_value_inquiry&lt;/code&gt;, &lt;code&gt;pay_bill&lt;/code&gt;, &lt;code&gt;upgrade_contract&lt;/code&gt;, &lt;code&gt;cancel_contract&lt;/code&gt;, and &lt;code&gt;add_service&lt;/code&gt;. However, in order to match the user utterance (text or speech) to the right intent, intents need to be trained with a set of relevant training phrases. For example, for a weather inquiry intent, training phrases might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;What is the weather like right now?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;What is the temperature in Cairo tomorrow?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Do I need to take an umbrella with me to Zurich next week?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you create several intents in your system, some phrases you supply to an intent might be confusing or misleading—for example, a phrase that&amp;rsquo;s more relevant to another intent might be used to train the wrong intent. For example, suppose you have a Dialogflow agent that serves as the source of truth for a sales organization. You might have two intents for fetching contacts: one for the internal account teams and one for the customer. You might call these &lt;code&gt;get_internal_contacts&lt;/code&gt; and &lt;code&gt;get_external_contacts&lt;/code&gt;. A typical training phrase for each intent would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_internal_contacts&lt;/code&gt;: &amp;ldquo;Who is the point of contact for Customer X?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_external_contacts&lt;/code&gt;: &amp;ldquo;How do I get in contact with Customer X?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose that your users supplied the following request as they were looking for the external contacts: &amp;ldquo;Contacts for Customer X&amp;rdquo;. This request can confuse the Dialogflow agent because the phrase can match both intents. If the wrong intent matches, users will have a poor experience because they must change the formulation of the request, which is annoying and time consuming.&lt;/p&gt;
&lt;p&gt;Therefore, you want to make sure that phrases within the same intent are more similar, while phrases between different intents are less similar. The rest of the tutorial explains how to evaluate the quality of the training phrase supplied for each intent, and how to identify potentially confusing training phrases.&lt;/p&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;The approach used in this tutorial is to compute the similarity between two phrases and, by extension, to compute the similarity matrix for all the training phrases. Once you have that matrix, you can compute the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cohesion&lt;/strong&gt;: The average similarity value between each pair of phrases in the same intent. That value is computed for each intent. The higher the intent cohesion value, the better the intent training phrases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separation&lt;/strong&gt;: Given two intents, the average distance between each pair of training phrases in the two intents.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confusing phrases&lt;/strong&gt;: Training phrases that are highly similar to training phrases in other intents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To compute a similarity value between two phrases, you must convert each phrase to a real-value feature vector, which represents the semantics of the phrase (&lt;a href=&#34;https://developers.google.com/machine-learning/glossary/#embeddings&#34;&gt;embeddings&lt;/a&gt;). To help with this task, the tutorial uses &lt;a href=&#34;https://www.tensorflow.org/hub/&#34;&gt;TensorFlow Hub&lt;/a&gt; (&lt;code&gt;tf.Hub&lt;/code&gt;), a library used for the publication, discovery, and consumption of reusable &lt;a href=&#34;https://tfhub.dev/&#34;&gt;modules&lt;/a&gt; of machine learning models. These modules can be pre-trained models or embeddings that are extracted from text, images, and so on. You can browse the &lt;a href=&#34;https://tfhub.dev/s?module-type=text-embedding&#34;&gt;available text embeddings&lt;/a&gt;. The tutorial uses the &lt;a href=&#34;https://tfhub.dev/google/universal-sentence-encoder/2&#34;&gt;Universal Sentence Encoder&lt;/a&gt; (v2) module, which is used to encode text into 512 dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural-language tasks.&lt;/p&gt;
&lt;p&gt;In this tutorial, you use &lt;a href=&#34;https://wikipedia.org/wiki/Cosine_similarity&#34;&gt;cosine similarity&lt;/a&gt; as a proximity metric between two embedding vectors. Given two real-value vectors (in our example, two embedding vectors extracted from two training phrases), cosine similarity calculates the cosine of the angle between them, using the following formula:&lt;/p&gt;
&lt;p&gt;$$ \cos(A,B) = \frac{\sum_{i=1}^{n}A_iB_i}{\sqrt{\sum_{i=1}^{n}{A_i^2}}\sqrt{\sum_{i=1}^{n}{B_i^2}}} $$&lt;/p&gt;
&lt;p&gt;cos⁡(A,B)=∑i=1nAiBi∑i=1nAi2∑i=1nBi2&lt;/p&gt;
&lt;p&gt;In this formula, &lt;em&gt;n&lt;/em&gt; is the number of elements in the vector. The smaller the angle between the vectors, the bigger the cosine value of this angle, indicating higher similarity. The cosine similarity value between any two vectors is always between 0 and 1.&lt;/p&gt;
&lt;p&gt;Figure 1 shows an overview of the approach:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-eval-intents.svg&#34; alt=&#34;Overview of evaluating intents cohesion and separation&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;: Overview of evaluating intents cohesion and separation&lt;/p&gt;
&lt;p&gt;The figure illustrates the following sequence:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Import the intents and their training phrases.&lt;/li&gt;
&lt;li&gt;Generate embeddings for the training phrases using the &lt;code&gt;tf.Hub&lt;/code&gt; Universal Sentence Encoder pre-trained module.&lt;/li&gt;
&lt;li&gt;Create a visualization of the generated embeddings in a two-dimensional space.&lt;/li&gt;
&lt;li&gt;Compute the embeddings cosine similarity matrix containing the pairwise similarity values between all the training phrases in different intents.&lt;/li&gt;
&lt;li&gt;Calculate the cohesion and separation metrics.&lt;/li&gt;
&lt;li&gt;Identify the confusing phrases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(Optional) Create a Dialogflow agent.&lt;/li&gt;
&lt;li&gt;Import intents with training phrases.&lt;/li&gt;
&lt;li&gt;Run the Colab notebook for intent quality assessment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;costs&#34;&gt;Costs&lt;/h2&gt;
&lt;p&gt;This tutorial uses the following billable components of Google Cloud:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dialogflow&lt;/strong&gt;: Standard Edition is free, while Enterprise Edition offers paid enterprise support. You can choose which edition to use when you create your Dialogflow agent. Your account can include agents from both editions. For more details, refer to the &lt;a href=&#34;https://dialogflow.com/pricing&#34;&gt;Dialogflow Pricing page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the Google Cloud Console, on the project selector page, select or create a Google Cloud project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you don&amp;rsquo;t plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/projectselector2/home/dashboard&#34;&gt;Go to the project selector page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that billing is enabled for your Cloud project. &lt;a href=&#34;https://cloud.google.com/billing/docs/how-to/modify-project&#34;&gt;Learn how to confirm that billing is enabled for your project&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable the Dialogflow API.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=dialogflow.googleapis.com&#34;&gt;Enable the API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a service account to call the Dialogflow API.&lt;/p&gt;
&lt;p&gt;Create service account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Service account details&lt;/strong&gt; dialog, enter the account name and description as shown in the following screenshot, and then click &lt;strong&gt;Create&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the role to &lt;strong&gt;Dialogflow API Client&lt;/strong&gt; and click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;completing-the-tutorial-in-the-colab-notebook&#34;&gt;Completing the tutorial in the Colab notebook&lt;/h2&gt;
&lt;p&gt;The following sections walk through the steps discussed in the &lt;a href=&#34;https://cloud.google.com/solutions/assessing-the-quality-of-training-phrases-in-dialogflow-intents#approach&#34;&gt;approach&lt;/a&gt; section to calculate the cohesion and separation metrics and to identify confusing phrases.&lt;/p&gt;
&lt;h3 id=&#34;getting-started-with-the-colab-notebook&#34;&gt;Getting started with the Colab notebook&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to the Colab notebook: &lt;a href=&#34;https://colab.research.google.com/drive/1QQblWJX5aZ6TajVXNAogFpVJlzYDbMtX&#34;&gt;https://colab.research.google.com/drive/&amp;hellip;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a local copy to your Google Drive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-copy.png&#34; alt=&#34;Copying the notebook to your Google Drive&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Cloud Shell, install the Python libraries needed for the rest of the tutorial, before importing the required libraries and modules.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!pip install --quiet --upgrade tensorflow dialogflow scipy tensorflow-hub seaborn
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set your Google Cloud &lt;code&gt;PROJECT_ID&lt;/code&gt; and the &lt;code&gt;SERVICE_ACCOUNT_EMAIL&lt;/code&gt; that you created in the &lt;a href=&#34;https://cloud.google.com/solutions/assessing-the-quality-of-training-phrases-in-dialogflow-intents#before-you-begin&#34;&gt;Before you begin&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-id-email.png&#34; alt=&#34;Set your Google Cloud PROJECT_ID and SERVICE_ACCOUNT_EMAIL&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authenticate your session to create a key for your service account:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth.authenticate_user()
!gcloud config set project {PROJECT_ID}
!gcloud iam service-accounts keys create sa-key.json \
    --iam-account={SERVICE_ACCOUNT_EMAIL} --project={PROJECT_ID}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you run these commands, a link is displayed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the link to authenticate your user account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the authentication code from the web page, and paste it in the &lt;strong&gt;Enter verification code&lt;/strong&gt; field in the notebook:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-verification.png&#34; alt=&#34;Enter verification code field in the notebook&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;setting-up-a-dialogflow-agent&#34;&gt;Setting up a Dialogflow agent&lt;/h3&gt;
&lt;p&gt;If you already have a Dialogflow agent that you want to use in this tutorial, you can skip this step. However, if you don&amp;rsquo;t have an agent, or you want to set up a new one, you can download a zip file with the content of an exported Dialogflow agent, called &lt;code&gt;intents-healthcheck&lt;/code&gt;. You import this agent into your Dialogflow account as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the zip file of the imported agent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gsutil cp gs://dialogflow-intent-health-check/intent-quality-demo.zip .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://dialogflow.com/&#34;&gt;https://dialogflow.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;a href=&#34;https://console.dialogflow.com/api-client/#/login&#34;&gt;Go to Console&lt;/a&gt; button on the top right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the left menu, click &lt;strong&gt;Create new agent&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-console.png&#34; alt=&#34;Create new agent&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the &lt;strong&gt;agent name&lt;/strong&gt;: &lt;code&gt;intents-healthcheck&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select your Google Cloud project from the &lt;strong&gt;Google Project&lt;/strong&gt; list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Google Cloud project can have only one Dialogflow agent. So if you don&amp;rsquo;t find your Google Cloud project in the list, an agent is already associated with your project.&lt;/li&gt;
&lt;li&gt;If you select &lt;strong&gt;Create a new project&lt;/strong&gt;, Dialogflow creates a Google Cloud project with the same name as your agent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-agent-info.png&#34; alt=&#34;Entering information about the agent&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the left-hand menu, select the new agent and then click the &lt;strong&gt;Settings&lt;/strong&gt; &lt;em&gt;settings&lt;/em&gt; icon. Then in the menu in the middle of the page, select &lt;strong&gt;Export and Import&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-import-export.png&#34; alt=&#34;Export and Import dialog&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Restore from zip&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the &lt;code&gt;agent-backup.zip&lt;/code&gt; file you downloaded in step 1.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;RESTORE&lt;/code&gt; in the text box at the bottom of the form to confirm.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Restore&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-zip-restore.png&#34; alt=&#34;Restore the agent from a zip file&#34;&gt;&lt;/p&gt;
&lt;p&gt;After restoring the agent, Dialogflow creates five intents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify the imported intents by selecting &lt;strong&gt;Intents&lt;/strong&gt; from the menu on the left. You find the following intents:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-imported-intents.png&#34; alt=&#34;Verifying the imported intents&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You use this restored agent for the rest of the tutorial.&lt;/p&gt;
&lt;h2 id=&#34;walking-through-the-code-in-the-colab-notebook&#34;&gt;Walking through the code in the Colab notebook&lt;/h2&gt;
&lt;p&gt;The sections that follow describe what the code in the notebook does when you run it.&lt;/p&gt;
&lt;h3 id=&#34;fetching-your-intents&#34;&gt;Fetching your intents&lt;/h3&gt;
&lt;p&gt;The following code fetches intents and their training phrases from the Dialogflow agent using the &lt;code&gt;fetch_intents_training_phrases&lt;/code&gt; method. This method returns a dictionary, where the keys are the intents named in your Dialogflow agent, and each value is a list of the training phrases in each entity. In the code, &lt;code&gt;project&lt;/code&gt; references the project to which your agent belongs, and &lt;code&gt;service_account_file&lt;/code&gt; references the file that you created earlier.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def get_intents(service_account_file, project):

    dialogflow_entity_client =  dialogflow.EntityTypesClient.from_service_account_file(service_account_file)
    parent = dialogflow_entity_client.project_agent_path(project)
    entities = list(dialogflow_entity_client.list_entity_types(parent))

    dialogflow_intents_client = dialogflow.IntentsClient.from_service_account_file(service_account_file)
    parent = dialogflow_intents_client.project_agent_path(project)
    intents = list(dialogflow_intents_client.list_intents(
        parent=parent,
        intent_view=dialogflow.enums.IntentView.INTENT_VIEW_FULL))

    entities_name_to_value = {}
    for intent in intents:
        entities_used = {entity.display_name
            for entity in intent.parameters}

        for entity in entities:
            if entity.display_name in entities_used \
                    and entity.display_name not in entities_name_to_value:
                entities_name_to_value[entity.display_name] = np.random.choice(
                    np.random.choice(entity.entities).synonyms, replace=False)

    intent_to_training_phrases = defaultdict(list)
    for intent in intents:
        for training_phrase in intent.training_phrases:
            parts = [entities_name_to_value[part.alias] if part.entity_type else part.text
                for part in training_phrase.parts]
            intent_to_training_phrases[intent.display_name].append(&amp;quot;&amp;quot;.join(parts))
        # Remove intents with no training phrases
        if not intent_to_training_phrases[intent.display_name]:
            del intent_to_training_phrases[intent.display_name]
    return intent_to_training_phrases
 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following code verifies the retrieved intents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;intent_training_phrases = fetch_intents_training_phrases(&amp;quot;sa-key.json&amp;quot;, project_id)
for intent in intent_training_phrases:
    print(&amp;quot;{}:{}&amp;quot;.format(intent, len(intent_training_phrases[intent])))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;fetch_intents_training_phrases&lt;/code&gt; method returns the following listing. This code snippet shows the intents in the demo &lt;code&gt;intents-healthcheck&lt;/code&gt; agent, followed by the count of the training phrases available in each intent.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start_conversation:4
close_conversation:5
get_internal_contacts:17
request_help:7
get_external_contacts:6
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;generating-embeddings-for-the-training-phrases&#34;&gt;Generating embeddings for the training phrases&lt;/h3&gt;
&lt;p&gt;The following code downloads the &lt;code&gt;tf.Hub&lt;/code&gt; Universal Sentence Encoder pre-trained module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;embed_module = hub.Module(&amp;quot;https://tfhub.dev/google/universal-sentence-encoder/2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the first use, the module is cached locally.&lt;/p&gt;
&lt;p&gt;The following code implements a method that accepts a list of sentences and returns a list of embeddings based on the &lt;code&gt;tf.Hub&lt;/code&gt; module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def make_embeddings_fn():
    placeholder = tf.placeholder(dtype=tf.string)
    embed = embed_module(placeholder)
    session = tf.Session()
    session.run([tf.global_variables_initializer(), tf.tables_initializer()])
    def _embeddings_fn(sentences):
        computed_embeddings = session.run(
            embed, feed_dict={placeholder: sentences})
        return computed_embeddings
    return _embeddings_fn

generate_embeddings = make_embeddings_fn()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method ensures that the &lt;code&gt;tf.Session&lt;/code&gt; is created and that the embedding module is loaded only once, not every time the method is called.&lt;/p&gt;
&lt;p&gt;The following code generates embeddings for the training phrases in the intents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    intent: {
        training_phrase&#39;: [embedding_array]
    }
}

training_phrases_with_embeddings = defaultdict(list)
for intent_name, training_phrases_list in intent_training_phrases.items():
    computed_embeddings = generate_embeddings(training_phrases_list)
    training_phrases_with_embeddings[intent_name] = dict(zip(training_phrases_list, computed_embeddings))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code snippet creates the &lt;code&gt;training_phrases_with_embeddings&lt;/code&gt; nested dictionary.&lt;/p&gt;
&lt;p&gt;The following code verifies the generated embeddings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;training_phrases_with_embeddings = defaultdict(list)
for intent_name, training_phrases_list in intent_training_phrases.items():
    computed_embeddings = generate_embeddings(training_phrases_list)
    training_phrases_with_embeddings[intent_name] = dict(zip(training_phrases_list, computed_embeddings))
 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following code snippet shows each training phrase in the &lt;code&gt;start_conversation&lt;/code&gt; intent, along with the first five elements of the embedding vector of each phrase. The Universal Sentence Encoder generates a 512-dimension embedding vector for each training phrase.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ciao!:[-0.03649221  0.02498418 -0.03456857  0.02827227  0.00471277]
Howdy!:[-0.02732556 -0.00821852 -0.00794602  0.06356855 -0.03726532]
Hello!:[-0.0255452   0.00690543 -0.00611844  0.05633081 -0.0142823 ]
Hi!:[-0.03227544 -0.00985429 -0.01329378  0.06012927 -0.03646606]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;visualizing-embeddings-in-two-dimensional-space&#34;&gt;Visualizing embeddings in two-dimensional space&lt;/h3&gt;
&lt;p&gt;The following code reduces the dimensionality of the embeddings from 512 to 2 by using &lt;a href=&#34;https://en.wikipedia.org/wiki/Principal_component_analysis&#34;&gt;Principal Component Analysis&lt;/a&gt; to compute the principal components:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sklearn.decomposition import PCA
embedding_vectors = None

for intent in training_phrases_with_embeddings:
    embeddings = list(training_phrases_with_embeddings[intent].values())
    if embedding_vectors is None:
        embedding_vectors = embeddings
    else:
        embedding_vectors = np.concatenate((only_embeddings, embeddings))

pca = PCA(n_components=3)
pca.fit(embedding_vectors)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code snippet uses the &lt;code&gt;PCA&lt;/code&gt; class in &lt;code&gt;sklearn&lt;/code&gt; to generate a 2D representation of the training phrases embeddings.&lt;/p&gt;
&lt;p&gt;The following code generates a visualization of the phrase embeddings with the reduced dimensionality:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import matplotlib.pyplot as plt

fig = plt.figure(figsize=(15,10))
ax = fig.add_subplot(111)

legend = []

for color, intent in enumerate(training_phrases_with_embeddings):
    phrases = list(training_phrases_with_embeddings[intent].keys())
    embeddings = list(training_phrases_with_embeddings[intent].values())
    points = pca.transform(embeddings)
    xs = points[:,0]
    ys = points[:,1]
    ax.scatter(xs, ys, marker=&#39;o&#39;, s=100, c=&amp;quot;C&amp;quot;+str(color))
    for i, phrase in enumerate(phrases):
        ax.annotate(phrase, (xs[i], ys[i]))
    legend.append(intent)

ax.legend(legend)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following figure shows the resulting visualization: &lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-visualize-embeddings.png&#34; alt=&#34;Visualizing the phrase embeddings with the reduced dimensionality&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;computing-pairwise-similarity-between-phrases&#34;&gt;Computing pairwise similarity between phrases&lt;/h3&gt;
&lt;p&gt;The following code computes the pairwise cosine similarity for the training phrases embeddings, using &lt;code&gt;sklearn.metrics.pairwise.cosine_similarity&lt;/code&gt;. The code creates a Dataframe, &lt;code&gt;similarity_df&lt;/code&gt;, with the pairwise similarity values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sklearn.metrics.pairwise import cosine_similarity

flatten = []
for intent in training_phrases_with_embeddings:
        for phrase in training_phrases_with_embeddings[intent]:
            flatten.append((intent, phrase, training_phrases_with_embeddings[intent][phrase]))

data = []
for i in range(len(flatten)):
    for j in range(i+1, len(flatten)):
        intent_1 = flatten[i][0]
        phrase_1 = flatten[i][1]
        embedd_1 = flatten[i][2]
        intent_2 = flatten[j][0]
        phrase_2 = flatten[j][1]
        embedd_2 = flatten[j][2]
        similarity = cosine_similarity([embedd_1], [embedd_2])[0][0]
        record = [intent_1, phrase_1, intent_2, phrase_2, similarity]
        data.append(record)

similarity_df = pd.DataFrame(data,
    columns=[&amp;quot;Intent A&amp;quot;, &amp;quot;Phrase A&amp;quot;, &amp;quot;Intent B&amp;quot;, &amp;quot;Phrase B&amp;quot;, &amp;quot;Similarity&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following code displays sample similarity records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;different_intent = similarity_df[&#39;Intent A&#39;] != similarity_df[&#39;Intent B&#39;]
display(similarity_df[different_intent].sort_values(&#39;Similarity&#39;,
ascending=False).head(5))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following code snippet shows the most similar training phrases that don&amp;rsquo;t belong to the same intent:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-similar-phrases.png&#34; alt=&#34;The most similar training phrases that don&amp;rsquo;t belong to the same intent&#34;&gt;&lt;/p&gt;
&lt;p&gt;Phrases in different intents that have high similarity value can be confusing to the Dialogflow agent, and could lead to directing the user input to the wrong intent.&lt;/p&gt;
&lt;h3 id=&#34;measuring-cohesion-and-separation-of-intents&#34;&gt;Measuring cohesion and separation of intents&lt;/h3&gt;
&lt;p&gt;The following code computes a cohesion value for each intent, as described in the &lt;a href=&#34;https://cloud.google.com/solutions/assessing-the-quality-of-training-phrases-in-dialogflow-intents#approach&#34;&gt;Approach section&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;same_intent = similarity_df[&#39;Intent A&#39;] == similarity_df[&#39;Intent B&#39;]
cohesion_df = pd.DataFrame(similarity_df[different_intent].groupby(&#39;Intent A&#39;, as_index=False)[&#39;Similarity&#39;].mean())
cohesion_df.columns = [&#39;Intent&#39;, &#39;Cohesion&#39;]
display(cohesion_df)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is a cohesion value for each intent:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-cohesion-values.png&#34; alt=&#34;Computing a cohesion value for each intent&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following code computes the pairwise separation between intents, as described in the &lt;a href=&#34;https://cloud.google.com/solutions/assessing-the-quality-of-training-phrases-in-dialogflow-intents#approach&#34;&gt;Approach section&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;different_intent = similarity_df[&#39;Intent A&#39;] != similarity_df[&#39;Intent B&#39;]
separation_df = pd.DataFrame(similarity_df[different_intent].groupby([&#39;Intent A&#39;, &#39;Intent B&#39;], as_index=False)[&#39;Similarity&#39;].mean())
separation_df[&#39;Separation&#39;] = 1 - separation_df[&#39;Similarity&#39;]
del separation_df[&#39;Similarity&#39;]
display(separation_df.sort_values(&#39;Separation&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is the pairwise separation between intents:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/assessing-quality-of-training-phrases-pairwise-separation.png&#34; alt=&#34;Computing the pairwise separation between intents&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;further-improvements&#34;&gt;Further improvements&lt;/h2&gt;
&lt;p&gt;To improve the quality of the training phrases for your intents, consider the following approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the phrases in different intents with high similarity, and change or remove them.&lt;/li&gt;
&lt;li&gt;Find the phrases with the most similar phrases that belong to different intents.&lt;/li&gt;
&lt;li&gt;Add more training phrases in intents with low cohesion, and investigate training phrases in intents with low separation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cleaning-up&#34;&gt;Cleaning up&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: Deleting a project has the following effects:&lt;strong&gt;Everything in the project is deleted.&lt;/strong&gt; If you used an existing project for this tutorial, when you delete it, you also delete any other work you&amp;rsquo;ve done in the project.&lt;strong&gt;Custom project IDs are lost.&lt;/strong&gt; When you created this project, you might have created a custom project ID that you want to use in the future. To preserve the URLs that use the project ID, such as an &lt;code&gt;appspot.com&lt;/code&gt; URL, delete selected resources inside the project instead of deleting the whole project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Cloud Console, go to the&lt;/p&gt;
&lt;p&gt;Manage resources&lt;/p&gt;
&lt;p&gt;page.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/iam-admin/projects&#34;&gt;Go to Manage resources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the project list, select the project that you want to delete, and then click &lt;strong&gt;Delete&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the dialog, type the project ID, and then click &lt;strong&gt;Shut down&lt;/strong&gt; to delete the project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://cloud.google.com/solutions/machine-learning/overview-extracting-and-serving-feature-embeddings-for-machine-learning&#34;&gt;Overview of extracting and serving feature embeddings for machine learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For more details about embeddings and &lt;code&gt;tf.Hub&lt;/code&gt;, see &lt;a href=&#34;https://cloud.google.com/solutions/machine-learning/overview-extracting-and-serving-feature-embeddings-for-machine-learning&#34;&gt;Overview of extracting and serving feature embeddings for machine learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn about the &lt;a href=&#34;https://cloud.google.com/solutions/architecture-of-a-serverless-ml-model&#34;&gt;Architecture of a serverless machine learning model&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn about &lt;a href=&#34;https://cloud.google.com/solutions/comparing-ml-model-predictions-using-cloud-dataflow-pipelines&#34;&gt;Comparing machine learning models for predictions in Cloud Dataflow pipelines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Take the 5-course Coursera specialization on Machine Learning with &lt;a href=&#34;https://www.coursera.org/specializations/machine-learning-tensorflow-gcp&#34;&gt;TensorFlow on Google Cloud&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn about best practices for ML engineering in &lt;a href=&#34;https://developers.google.com/machine-learning/guides/rules-of-ml/&#34;&gt;Rules of ML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Try out other Google Cloud features for yourself. Have a look at our &lt;a href=&#34;https://cloud.google.com/docs/tutorials&#34;&gt;tutorials&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/solutions/assessing-the-quality-of-training-phrases-in-dialogflow-intents&#34;&gt;Assessing the quality of training phrases in Dialogflow intents&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Joint intent and slot classification</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/joint-intent-and-slot-classification/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/joint-intent-and-slot-classification/</guid>
      
        <description>&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/NVIDIA/NeMo/blob/main/tutorials/nlp/Joint_Intent_and_Slot_Classification.ipynb&#34;&gt;Joint_Intent_and_Slot_Classification.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Named Entity Recognition using Spacy and Tensorflow</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/named-entity-recognition/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/named-entity-recognition/</guid>
      
        <description>&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://aihub.cloud.google.com/p/products%2F2290fc65-0041-4c87-a898-0289f59aa8ba&#34;&gt;Named Entity Recognition using Spacy and Tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Building a Recommendation System in TensorFlow</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/building-a-recommendation-system-in-tensorflow/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/building-a-recommendation-system-in-tensorflow/</guid>
      
        <description>&lt;h2 id=&#34;background-theory-for-recommendations&#34;&gt;Background theory for recommendations&lt;/h2&gt;
&lt;p&gt;the background theory for matrix factorization-based collaborative filtering as applied to recommendation systems.&lt;/p&gt;
&lt;h3 id=&#34;collaborative-filtering-for-recommendation-systems&#34;&gt;Collaborative filtering for recommendation systems&lt;/h3&gt;
&lt;p&gt;Collaborative filtering relies only on &lt;strong&gt;observed user behavior&lt;/strong&gt; to make recommendations—no profile data or content access is necessary.&lt;/p&gt;
&lt;p&gt;The basic &lt;strong&gt;assumption&lt;/strong&gt; is that similar user behavior reflects similar fundamental preferences, allowing a recommendation engine to make suggestions accordingly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;, suppose User 1 has viewed items A, B, C, D, E, and F. User 2 has viewed items A, B, D, E and F, but not C. Because both users viewed five of the same six items, it&amp;rsquo;s likely that they share some basic preferences. User 1 liked item C, and it&amp;rsquo;s probable that User 2 would also like item C if the user were aware of its existence.&lt;/p&gt;
&lt;h3 id=&#34;matrix-factorization-for-collaborative-filtering&#34;&gt;Matrix factorization for collaborative filtering&lt;/h3&gt;
&lt;p&gt;The collaborative filtering problem can be solved using matrix factorization.&lt;/p&gt;
&lt;p&gt;Suppose you have a &lt;strong&gt;matrix&lt;/strong&gt; consisting of &lt;strong&gt;user IDs&lt;/strong&gt; and their interactions with your products. &lt;strong&gt;Each row&lt;/strong&gt; corresponds to a unique user, and &lt;strong&gt;each column&lt;/strong&gt; corresponds to an &lt;strong&gt;item&lt;/strong&gt;. Each entry in the matrix captures a user&amp;rsquo;s rating or preference for a single item. The rating could be &lt;strong&gt;explicit&lt;/strong&gt;, directly generated by user feedback, or it could be &lt;strong&gt;implicit&lt;/strong&gt;, based on user purchases or time spent interacting with an article or video.&lt;/p&gt;
&lt;p&gt;Ratings in the &lt;code&gt;MovieLens&lt;/code&gt; dataset range from 1 to 5. Empty rating entries have value 0, meaning that a given user hasn&amp;rsquo;t rated the item.&lt;/p&gt;
&lt;h4 id=&#34;defining-the-matrix-factorization-method&#34;&gt;Defining the matrix factorization method&lt;/h4&gt;
&lt;p&gt;A ratings matrix consists of a matrix $R$, where entries $r_{ij}$ are ratings of user $i$ for item $j$.&lt;/p&gt;
&lt;p&gt;The matrix factorization method &lt;strong&gt;assumes&lt;/strong&gt; that there is a set of &lt;strong&gt;attributes&lt;/strong&gt; common to all items, with &lt;strong&gt;items differing&lt;/strong&gt; in the &lt;strong&gt;degree&lt;/strong&gt; to which they &lt;strong&gt;express these attributes&lt;/strong&gt;. Furthermore, the matrix factorization method &lt;strong&gt;assumes&lt;/strong&gt; that each user has their own expression for each of these attributes, independent of the items.  In this way, a &lt;strong&gt;user&amp;rsquo;s item rating can be approximated by summing&lt;/strong&gt; the user&amp;rsquo;s strength for each attribute weighted by the degree to which the item expresses this attribute. These attributes are sometimes called &lt;strong&gt;hidden or &lt;em&gt;latent&lt;/em&gt; factors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Intuitively, it&amp;rsquo;s easy to see that these hypothetical latent factors actually exist. In the case of movies, it&amp;rsquo;s clear that many users prefer certain genres, actors, or directors.  Much of the power of the matrix factorization approach to collaborative filtering derives from the fact that it&amp;rsquo;s not necessary to know the number of  hypothetical latent factors that might comprise the entirety of a given user&amp;rsquo;s preferences. It&amp;rsquo;s &lt;strong&gt;simply assumed there are an arbitrary number of hypothetical latent factors&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;transforming-the-matrix-to-represent-latent-factors&#34;&gt;Transforming the matrix to represent latent factors&lt;/h4&gt;
&lt;p&gt;To translate the existence of latent factors into the matrix of ratings, you do this: for a set of users $U$ of size $u$ and items $I$ of size $i$, you &lt;strong&gt;pick an arbitrary number $k$ of latent factors&lt;/strong&gt; and &lt;strong&gt;factorize&lt;/strong&gt; the large matrix $R$ into two much smaller matrices $X$ (the &amp;ldquo;row factor&amp;rdquo;) and $Y$ (the &amp;ldquo;column factor&amp;rdquo;). Matrix $X$ has dimension $u × k$, and $Y$ has dimension $k × i$.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;In linear algebra this is called a &lt;strong&gt;low-rank approximation&lt;/strong&gt;. Every user is represented by a vector in this $k$-dimensional space, and each row $x_u$ in $X$ corresponds to the strength of the user&amp;rsquo;s preferences for these $k$ factors. Similarly, every item represented by a vector in this $k$-dimensional space has a column $y_i$ in $Y$ corresponding to the item&amp;rsquo;s expression of the same $k$ factors.&lt;/p&gt;
&lt;p&gt;To calculate the predicted rating of user &lt;em&gt;u&lt;/em&gt; for item &lt;em&gt;i&lt;/em&gt;, you take the dot product of the two vectors:
$$
r_{ui} = x_u^T . y_i
$$
You can define a loss function measuring the accuracy of the approximation in the following way, sum the squared difference between the approximate rating $x_u^T⋅y_i$ and the actual rating from the training set $r_{ui}$.:
$$
L=\sum_{u,i}(r_{ui}−x_u^T⋅y_i)^2
$$
It&amp;rsquo;s common practice to add **regularization terms** to this loss function to help prevent **overfitting**. Adding **L2 regularization terms** for both row and column factors gives the following:
$$
L=\sum_{u,i}(r_{ui}−x_u^T⋅y_i)^2 + \lambda\sum_{u}||x_u||^2 + \lambda\sum_{i}||y_i||^2
$$
Here, $λ$ is a **regularization constant**, one of the model’s hyperparameters.&lt;/p&gt;
&lt;h3 id=&#34;the-wals-method-of-matrix-factorization&#34;&gt;The WALS method of matrix factorization&lt;/h3&gt;
&lt;h4 id=&#34;alternating-least-squares-method-交替最小二乘法&#34;&gt;Alternating least squares method (交替最小二乘法)&lt;/h4&gt;
&lt;p&gt;The alternating least squares method of matrix factorization is an &lt;strong&gt;iterative&lt;/strong&gt; method for determining the &lt;strong&gt;optimal factors&lt;/strong&gt; $X$ and $Y$ that best approximate $R$. In each iteration, &lt;strong&gt;one of&lt;/strong&gt; the row or column factors &lt;strong&gt;is held fixed&lt;/strong&gt; and &lt;strong&gt;the other is computed&lt;/strong&gt; by minimizing the loss function with respect to the other factor.&lt;/p&gt;
&lt;p&gt;First, you begin with the row factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the column factors to constant values.&lt;/li&gt;
&lt;li&gt;Take the derivative of the loss function with respect to the row factors.&lt;/li&gt;
&lt;li&gt;Set the equation equal to zero.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
\frac {\partial{L}} {\partial{x_u}} = −2 \sum_i (r_{ui} − x_u^T⋅y_i)y_i^T + 2\lambda_{xu}^T
$$&lt;/p&gt;
&lt;p&gt;$$
0 = −(r_u − x_u^TY^T)Y + \lambda x_u^T
$$&lt;/p&gt;
&lt;p&gt;$$
x_u^T(Y^TY + \lambda I) = r_uY
$$&lt;/p&gt;
&lt;p&gt;$$
x_u^T = r_uY(Y^TY + \lambda I)^{−1}
$$&lt;/p&gt;
&lt;p&gt;Alternating row and column factors, the iterative process is repeated until convergence.&lt;/p&gt;
&lt;h4 id=&#34;weighted-alternating-least-squares-wals-method-加权交替最小二乘法&#34;&gt;Weighted alternating least squares (WALS) method (加权交替最小二乘法)&lt;/h4&gt;
&lt;p&gt;$$
L^w = {W} \sum_{u,i}(r_{ui}−x_u^T⋅y_i)^2
$$&lt;/p&gt;
&lt;p&gt;In this equation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$$w_{ui} = \omega_{0}$$                                  for zero (unobserved) entries in the ratings matrix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$$w_{ui} = \omega_{0} + f(c_{i})$$                   for observed entries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$$c_{i} = \sum_{u,i}1 \text{  if  } r_{ui} &amp;gt; 0$$            the sum of the number of nonzero entries for column $i$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The weight is scaled by the sum of the nonzero entries in a row to normalize the weight for users who have rated a different number of items. This type of weighting allows for a more flexible model of the user&amp;rsquo;s preferences and produces better empirical results than the unweighted version.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The function $f$ varies&lt;/strong&gt; according to the dataset and whether ratings are explicit or implicit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MovieLens&lt;/code&gt; dataset contains &lt;strong&gt;explicit ratings&lt;/strong&gt;. In this case, a better choice for $f$ is one that weighs the observed entries linearly:&lt;/p&gt;
&lt;p&gt;$$f = \omega_{k}c_{i}$$   where $\omega_{k}$ is the observed weight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;implicit ratings&lt;/strong&gt; related to dynamic events, where each rating corresponds to the number of times a video has been watched, an article read, or a web page viewed, the rating itself may have an exponential distribution due to user behavior. There will be many low-value ratings as users click on a page or video and navigate away quickly. There will be fewer large implicit ratings as users read an entire article, watch an entire video, or watch a given scheduled show multiple times. In this case, an appropriate $f$ is one that weights the observed ratings to account &lt;strong&gt;for this distribution&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$f = \left(\frac{1}{c_{i}}\right)^{e}$   where $e$ is the feature weight exponent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wals-compared-to-other-techniques&#34;&gt;WALS compared to other techniques&lt;/h3&gt;
&lt;p&gt;Many matrix factorization techniques are used for collaborative filtering, including &lt;strong&gt;SVD&lt;/strong&gt; and &lt;strong&gt;Stochastic Gradient Descent&lt;/strong&gt;. In some cases these techniques give better reduced-rank approximations than WALS. It&amp;rsquo;s worth noting the following advantages of WALS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The weights used in WALS make it suitable for &lt;strong&gt;implicit ratings&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WALS includes &lt;strong&gt;algorithmic optimizations&lt;/strong&gt; that make it easy to incorporate weights and efficiently calculate row and column factor updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s relatively straightforward to create a &lt;strong&gt;distributed version&lt;/strong&gt; of the algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-the-model&#34;&gt;Create the Model&lt;/h2&gt;
&lt;h3 id=&#34;create-docker-image-environment&#34;&gt;Create Docker image environment&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;docker pull tensorflow/tensorflow:1.15.4-py3-jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/GoogleCloudPlatform/tensorflow-recommendation-wals
cd tensorflow-recommendation-wals
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;vim Dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# Use an official tensorflow runtime as a parent image
FROM tensorflow/tensorflow:1.15.4-py3-jupyter

# Set the working directory to /app
WORKDIR /app

# Copy the requirement list into the container at /app
ADD requirements.txt /app

# Change mirrors and install vim
RUN sed -i &amp;quot;s@http://archive.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g&amp;quot; /etc/apt/sources.list &amp;amp;&amp;amp; sed -i &amp;quot;s@http://security.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g&amp;quot; /etc/apt/sources.list &amp;amp;&amp;amp; rm -Rf /var/lib/apt/lists/* &amp;amp;&amp;amp; apt-get update &amp;amp;&amp;amp; apt-get install -y vim

# Upgrading pip
RUN pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U

# set package index url
RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Make port 8888 available to the world outside this container
EXPOSE 8888
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;docker build -t tfrec:latest --no-cache --network=host .
docker image ls
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;download-the-movielens-dataset&#34;&gt;Download the &lt;code&gt;MovieLens&lt;/code&gt; dataset&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;curl -O &#39;http://files.grouplens.org/datasets/movielens/ml-100k.zip&#39;
umzip ml-100k.zip
mkdir /data/datasets/ml-100k
cp ml-100k/u.data /data/datasets/ml-100k/
rm -r ml-100k ml-100k.zip
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;run-jupyter-notebook&#34;&gt;Run Jupyter notebook&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm -v $PWD:/app -v /data/datasets/ml-100k:/datasets -w /app -p 8888:8888 tfrec:latest bash
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;jupyter notebook --ip 0.0.0.0 --no-browser --allow-root ./notebooks/Part1.ipynb
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;train-and-tune-the-model&#34;&gt;Train and tune the model&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd wals_ml_engine
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;docker run -it --rm -v $PWD:/app -v /data/datasets/ml-100k:/datasets -w /app tfrec:latest python -m trainer.task --job-dir=/app --train-file=/datasets/u.data --data-type=ratings --delimiter=&#39;\t&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install miniconda&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yay -S miniconda3
$ echo &amp;quot;export PATH=/opt/miniconda3/bin/:$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;quot;[ -f /opt/miniconda3/etc/profile.d/conda.sh ] &amp;amp;&amp;amp; source /opt/miniconda3/etc/profile.d/conda.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install the Python packages and TensorFlow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda create -y -n tfrec                     # -y:  Do not ask for confirmation, -n: Name of environment.
$ conda install -y -n tfrec --file conda.txt   # --file FILE: Read package versions from the given file
$ source activate tfrec
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ conda deactivate
$ conda remove -n tfrec --all
$ conda create -y -n tfrec python=3.7          # with a specific version of Python
$ pip install -r requirements.txt
$ pip install tensorflow==1.15
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;api-and-predict&#34;&gt;API and Predict&lt;/h2&gt;
&lt;p&gt;ensure that the application bind to &lt;code&gt;0.0.0.0&lt;/code&gt; and not &lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --rm -v $PWD:/app -v /data/datasets/ml-100k:/datasets -w /app tfrec:latest python -m trainer.task --job-dir=/app --train-file=/datasets/u.data --data-type=ratings --delimiter=&#39;\t&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;deploy-the-recommendation-system&#34;&gt;Deploy the Recommendation System&lt;/h2&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/solutions/machine-learning/recommendation-system-tensorflow-overview&#34;&gt;Building a Recommendation System in TensorFlow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/machine-learning/recommendation&#34;&gt;&lt;strong&gt;Recommendation Systems&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://aihub.cloud.google.com/p/products%2F88c7d41c-bc75-4e36-a966-50a0aa38fa2a&#34;&gt;Recommender System with Matrix Factorization&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.gcp.expert/recommendation-system-tensorflow-overview/&#34;&gt;如何在 TensorFlow 內建立推薦系統：總覽&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/19711823&#34;&gt;有哪些好用的开源推荐系统？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tensorflow/models/tree/08bb9eb5ad79e6bceffc71aeea6af809cc78694b/official/recommendation&#34;&gt;Recommendation Model&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/57902387/matrix-factorization-in-tensorflow-2-0-using-wals-method&#34;&gt;Matrix Factorization in tensorflow 2.0 using WALS Method&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reviewing &lt;a href=&#34;https://github.com/tensorflow/models/tree/08bb9eb5ad79e6bceffc71aeea6af809cc78694b/official/recommendation&#34;&gt;https://github.com/tensorflow/models/tree/08bb9eb5ad79e6bceffc71aeea6af809cc78694b/official/recommendation&lt;/a&gt; for how to get started&lt;/p&gt;
&lt;p&gt;I was able to dig around and find a very similar approach in the tutorials
&lt;a href=&#34;https://developers.google.com/machine-learning/recommendation/dnn/softmax&#34;&gt;https://developers.google.com/machine-learning/recommendation/dnn/softmax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(props to whoever put those tutorials together was helpful getting another look at the approach and tradeoffs)&lt;/p&gt;
&lt;p&gt;note for anyone else looking for example apps I bumped into a couple by Nvidia
&lt;a href=&#34;https://github.com/NVIDIA/DeepLearningExamples/tree/master/PyTorch/Recommendation/NCF&#34;&gt;https://github.com/NVIDIA/DeepLearningExamples/tree/master/PyTorch/Recommendation/NCF&lt;/a&gt;
&lt;a href=&#34;https://github.com/NVIDIA/DeepLearningExamples/tree/master/TensorFlow/Recommendation/NCF&#34;&gt;https://github.com/NVIDIA/DeepLearningExamples/tree/master/TensorFlow/Recommendation/NCF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cool overview for intel&amp;rsquo;s analytics zoo (office depot) across models MF, ncf, wide &amp;amp; deep, and session recommender
&lt;a href=&#34;https://software.intel.com/en-us/articles/real-time-product-recommendations-for-office-depot-using-apache-spark-and-analytics-zoo-on&#34;&gt;https://software.intel.com/en-us/articles/real-time-product-recommendations-for-office-depot-using-apache-spark-and-analytics-zoo-on&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;it looks like Google&amp;rsquo;s official example leverages apache spark&amp;rsquo;s als model
&lt;a href=&#34;https://cloud.google.com/solutions/recommendations-using-machine-learning-on-compute-engine&#34;&gt;https://cloud.google.com/solutions/recommendations-using-machine-learning-on-compute-engine&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>data lakes</title>
      <link>http://www.yezheng.pro/post/specialization/big-data/data-lakes/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/big-data/data-lakes/</guid>
      
        <description>&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://delta.io/&#34;&gt;Delta Lake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html&#34;&gt;What is a Lakehouse?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>edX Analytics Pipeline</title>
      <link>http://www.yezheng.pro/post/specialization/big-data/edx-analytics-pipeline/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/big-data/edx-analytics-pipeline/</guid>
      
        <description>&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://edx.readthedocs.io/projects/edx-installing-configuring-and-running/en/latest/insights/install_insights.html&#34;&gt;edX Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edx-analytics-pipeline-reference.readthedocs.io/en/latest/index.html&#34;&gt;edX Analytics Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edx/edx-analytics-pipeline&#34;&gt;edx-analytics-pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;luigi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Machine Learning Models for Predictions in Cloud Dataflow Pipelines</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/ml-model-predictions-in-dataflow-pipelines/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/ml-model-predictions-in-dataflow-pipelines/</guid>
      
        <description>&lt;p&gt;This solution describes and compares the different design approaches for calling a machine learning model during a Dataflow pipeline, and examines the tradeoffs involved in choosing one approach or another. We present the results of a series of experiments that we ran to explore different approaches and illustrate these tradeoffs, both in batch and stream processing pipelines. This solution is designed for people who integrate trained models into data processing pipelines, rather than for data scientists who want to build machine learning models.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As the person responsible for integrating this ML model into the Dataflow pipeline, you might wonder what the various approaches are, and which one suits best system requirements. Several considerations need your attention, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s not always easy to balance these considerations, but this solution can help you navigate the decision-making process based on your priorities. The solution compares three approaches for making predictions with a TensorFlow-trained machine learning (ML) model in batch and stream data pipelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a deployed model as a REST/HTTP API for streaming pipelines.&lt;/li&gt;
&lt;li&gt;Using AI Platform (AI Platform) batch prediction jobs for batch pipelines.&lt;/li&gt;
&lt;li&gt;Using Dataflow direct-model prediction for both batch and streaming pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the experiments use an existing trained model, called the Natality dataset, which predicts baby weights based on various inputs. Because the goal of this solution is not to build a model, it doesn&amp;rsquo;t discuss how the model was built or trained. See the &lt;a href=&#34;https://cloud.google.com/solutions/comparing-ml-model-predictions-using-cloud-dataflow-pipelines#heading=h.eskc9ld7ie95&#34;&gt;Next Steps&lt;/a&gt; section for more details about the Natality dataset.&lt;/p&gt;
&lt;h2 id=&#34;platform&#34;&gt;Platform&lt;/h2&gt;
&lt;p&gt;There are various ways to run a data pipeline and call a trained ML model. But the functional requirements are always the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Ingesting&lt;/em&gt; data from a bounded (batch) or unbounded (streaming) source. Examples of sources from which to ingest data include sensor data, website interactions, and financial transactions.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Transforming and enriching&lt;/em&gt; the input data by calling ML models for predictions. An example is parsing a JSON file to extract relevant fields to predict a maintenance date, make a product recommendation, or detect fraud.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Storing&lt;/em&gt; the transformed data and predictions for analytics or for backup, or to pass to a queuing system to trigger a new event or additional pipelines. Examples include detecting potential fraud in real time or storing maintenance schedule information in a store that&amp;rsquo;s accessible from a dashboard.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you transform and enrich data with predictions in a batch ETL process, you aim for maximizing throughputs in order to reduce the overall amount of time needed for the whole data batch. On the other hand, when you process streaming data for online prediction, you aim for minimizing latency in order to receive each prediction in (near) real time. Thus, calling the model might become a bottleneck.&lt;/p&gt;
&lt;h3 id=&#34;core-components&#34;&gt;Core components&lt;/h3&gt;
&lt;p&gt;The batch and streaming experiments in this solution use three main technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beam.apache.org/&#34;&gt;Apache Beam&lt;/a&gt; running on Dataflow to process the data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;TensorFlow&lt;/a&gt; to implement and train the ML model.&lt;/li&gt;
&lt;li&gt;For some experiments, &lt;a href=&#34;https://cloud.google.com/ml-engine&#34;&gt;AI Platform&lt;/a&gt; as a hosting platform for the trained ML models to perform batch and online predictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We chose &lt;strong&gt;Apache Beam running on Dataflow&lt;/strong&gt; to run data pipelines in this solution because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache Beam is an open-source unified programming model that runs both streaming and batch data processing jobs.&lt;/li&gt;
&lt;li&gt;Dataflow is a Google Cloud product that can run Apache Beam jobs without a server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt; is an open-source mathematical library by Google that is used as a machine learning framework. TensorFlow enables building, training, and serving models on a single machine or in distributed environments. Models are portable to various devices and can also leverage available &lt;a href=&#34;https://en.wikipedia.org/wiki/Central_processing_unit&#34;&gt;CPU&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Graphics_processing_unit&#34;&gt;GPU&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Tensor_processing_unit&#34;&gt;TPU&lt;/a&gt; resources for training and serving.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI Platform&lt;/strong&gt; is a serverless platform that can train, tune (using the hyper-parameters tuning functionality), and serve TensorFlow models at scale with minimum management required by DevOps. AI Platform supports deploying trained models as REST APIs for online predictions, as well as submitting batch prediction jobs. AI Platform is one of several options that can serve your model as a microservice.&lt;/p&gt;
&lt;p&gt;The approaches detailed in this solution use Dataflow for the data processing pipeline and AI Platform to host the models as HTTP endpoints. However, these approaches could be replaced with other technologies. The performance comparisons between HTTP and a direct TensorFlow model would not drastically change.&lt;/p&gt;
&lt;h3 id=&#34;processing-batch-and-streaming-data&#34;&gt;Processing batch and streaming data&lt;/h3&gt;
&lt;p&gt;The experiments in this solution include both batch and streaming use cases. Each experiment leverages different Google Cloud products for input and output because unbounded and bounded sources have different operational requirements.&lt;/p&gt;
&lt;h4 id=&#34;batch-processing-a-bounded-dataset&#34;&gt;Batch-processing a bounded dataset&lt;/h4&gt;
&lt;p&gt;Figure 1 shows that in typical batch processing pipelines, raw input data is stored in object storage, such as &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;Cloud Storage&lt;/a&gt;. Structured data storage formats include comma-separated values (CSV), optimized row columnar (ORC), Parquet, or Avro. These formats are often used when data comes from databases or logs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-1-batch-processing.svg&#34; alt=&#34;Architecture of typical batch processing pipelines&#34;&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; Batch-processing architecture&lt;/p&gt;
&lt;p&gt;Some analytical platforms such as &lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;BigQuery&lt;/a&gt; provide storage in addition to query capabilities. BigQuery uses &lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format&#34;&gt;Capacitor&lt;/a&gt; for storage. Apache Beam on Dataflow can read from and write to both BigQuery and Cloud Storage, in addition to other storage options in batch processing pipelines.&lt;/p&gt;
&lt;h4 id=&#34;stream-processing-an-unbounded-datastream&#34;&gt;Stream-processing an unbounded datastream&lt;/h4&gt;
&lt;p&gt;For streaming, the inputs to a data processing pipeline are usually a messaging system, as shown in Figure 2. Technologies such as &lt;a href=&#34;https://cloud.google.com/pubsub&#34;&gt;Pub/Sub&lt;/a&gt; or Kafka are typically used to ingest individual data points in JSON, CSV, or protobuf format.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-2-stream-processing.svg&#34; alt=&#34;Architecture of typical stream processing pipelines&#34;&gt;&lt;strong&gt;Figure 2.&lt;/strong&gt; Stream-processing architecture&lt;/p&gt;
&lt;p&gt;Data points can be processed individually, or as groups in micro-batches by using &lt;a href=&#34;https://beam.apache.org/documentation/programming-guide/#windowing&#34;&gt;windowing&lt;/a&gt; functions to perform temporal event processing. The processed data might go to several destinations, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BigQuery for ad hoc analytics, through the streaming APIs.&lt;/li&gt;
&lt;li&gt;Cloud Bigtable for serving real-time information.&lt;/li&gt;
&lt;li&gt;Pub/Sub topic for triggering subsequent processes/pipelines.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find a complete list of source connectors (input) and sink connectors (output) for both bounded and unbounded data source sinks on the &lt;a href=&#34;https://beam.apache.org/documentation/io/built-in/&#34;&gt;Apache Beam I/O page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;invoking-a-tensorflow-model&#34;&gt;Invoking a TensorFlow model&lt;/h3&gt;
&lt;p&gt;A TensorFlow-trained model can be invoked in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Through an HTTP endpoint for &lt;strong&gt;online&lt;/strong&gt; prediction.&lt;/li&gt;
&lt;li&gt;Directly, by using the saved model file for &lt;strong&gt;batch&lt;/strong&gt; and &lt;strong&gt;online&lt;/strong&gt; predictions.&lt;/li&gt;
&lt;li&gt;Through an AI Platform batch prediction job for &lt;strong&gt;batch&lt;/strong&gt; prediction.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;http-endpoints-for-online-prediction&#34;&gt;HTTP endpoints for online prediction&lt;/h4&gt;
&lt;p&gt;TensorFlow models are deployed as HTTP endpoints to be invoked and give predictions in real time, either through a stream data processing pipeline or through client apps.&lt;/p&gt;
&lt;p&gt;You can deploy a TensorFlow model as an HTTP endpoint for online predictions by using &lt;a href=&#34;https://github.com/tensorflow/serving&#34;&gt;TensorFlow Serving&lt;/a&gt; or any other hosting service, such as &lt;a href=&#34;https://www.seldon.io/&#34;&gt;Seldon&lt;/a&gt;. As shown in Figure 3, you can choose one of the following options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy the model yourself on one or more Compute Engine instances.&lt;/li&gt;
&lt;li&gt;Use a &lt;a href=&#34;https://github.com/tensorflow/serving/tree/master/tensorflow_serving/tools/docker&#34;&gt;Docker image&lt;/a&gt; on &lt;a href=&#34;https://cloud.google.com/compute/docs/containers/deploying-containers&#34;&gt;Compute Engine&lt;/a&gt; or &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;Google Kubernetes Engine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Leverage &lt;a href=&#34;https://github.com/kubeflow/kubeflow&#34;&gt;Kubeflow&lt;/a&gt; to facilitate deployment on &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; or Google Kubernetes Engine.&lt;/li&gt;
&lt;li&gt;Use App Engine with Endpoints to host the model in a web app.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://cloud.google.com/ml-engine&#34;&gt;AI Platform&lt;/a&gt;, the fully managed ML training and serving service on Google Cloud.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-3-different-models-for-http-endpoints.svg&#34; alt=&#34;Options in Dataflow for serving a model as an HTTP endpoint&#34;&gt;&lt;strong&gt;Figure 3.&lt;/strong&gt; Different options in Dataflow for serving a model as an HTTP endpoint&lt;/p&gt;
&lt;p&gt;AI Platform is a fully managed service, so it is easier to implement than the other options. Therefore, in our experiments we use it as the option for serving the model as an HTTP endpoint. We can then focus on the performance of a direct-model versus an HTTP endpoint in AI Platform, rather than comparing the different HTTP model-serving options.&lt;/p&gt;
&lt;h4 id=&#34;serving-online-predictions-with-ai-platform-prediction&#34;&gt;Serving online predictions with AI Platform Prediction&lt;/h4&gt;
&lt;p&gt;Two tasks are required in order to serve online predictions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploying a model.&lt;/li&gt;
&lt;li&gt;Interacting with the deployed model for inference (that is, making predictions).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/ml-engine/docs/tensorflow/deploying-models&#34;&gt;Deploying a model&lt;/a&gt; as an HTTP endpoint using AI Platform Prediction requires the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure that the trained model files are available on Cloud Storage.&lt;/li&gt;
&lt;li&gt;Create a model by using the &lt;code&gt;gcloud ml-engine models create&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Deploy a model version by using the &lt;code&gt;gcloud ml-engine versions create&lt;/code&gt; command, with the model files on Cloud Storage.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can deploy a model by using commands like the following:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/scripts/deploy-cmle.sh&#34;&gt;blogs/tf_dataflow_serving/scripts/deploy-cmle.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/scripts/deploy-cmle.sh&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;PROJECT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PROJECT_ID]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# change to your project name&lt;/span&gt;
REGION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[REGION]&amp;#34;&lt;/span&gt;
BUCKET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[BUCKET]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# change to your bucket name&lt;/span&gt;
MODEL_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;babyweight_estimator&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# change to your estimator name&lt;/span&gt;
MODEL_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# change to your model version&lt;/span&gt;
MODEL_BINARIES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/models/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# upload the local SavedModel to GCS&lt;/span&gt;
gsutil -m cp -r model/trained/v1/* gs://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/models/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# set the current project&lt;/span&gt;
gcloud config set project &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# list model files on GCS&lt;/span&gt;
gsutil ls &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_BINARIES&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# deploy model to GCP&lt;/span&gt;
gcloud ml-engine models create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --regions&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# deploy model version&lt;/span&gt;
gcloud ml-engine versions create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --origin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MODEL_BINARIES&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --runtime-version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code creates an AI Platform Prediction model called babyweight_estimator in the Google Cloud project, with model version v1.&lt;/p&gt;
&lt;p&gt;After the model is deployed, you can invoke it. The following Python code shows a way to invoke a model version in AI Platform Prediction as a REST API:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/model/inference.py&#34;&gt;blogs/tf_dataflow_serving/model/inference.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/model/inference.py&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;cmle_api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_api&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cmle_api

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cmle_api &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        cmle_api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discovery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;,
                              discoveryServiceUrl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://storage.googleapis.com/cloud-ml/discovery/ml_v1_discovery.json&amp;#39;&lt;/span&gt;,
                              cache_discovery&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;estimate_cmle&lt;/span&gt;(instances):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Calls the babyweight estimator API on CMLE to get predictions
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       instances: list of json objects
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        int - estimated baby weight
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    init_api()

    request_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;instances&amp;#39;&lt;/span&gt;: instances}

    model_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;projects/{}/models/{}/versions/{}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(PROJECT, CMLE_MODEL_NAME, CMLE_MODEL_VERSION)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cmle_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;projects()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;request_data, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model_url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
    values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;predictions&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;predictions&amp;#39;&lt;/span&gt;]]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; values
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have a large dataset available in something like BigQuery or Cloud Storage and you want to maximize the throughput of the overall process, serving your ML model as an HTTP endpoint is not recommended for batch prediction. Doing this generates one HTTP request for each data point, which results in a huge volume of HTTP requests. The following section presents better options for batch prediction.&lt;/p&gt;
&lt;h4 id=&#34;direct-model-for-batch-and-online-predictions&#34;&gt;Direct-model for batch and online predictions&lt;/h4&gt;
&lt;p&gt;The direct-model prediction technique leverages a local TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; on the Dataflow instances. The saved model is a copy of the output files created after you have finished building and training the TensorFlow model. The TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part of the pipeline source code that is submitted as a Dataflow job.&lt;/li&gt;
&lt;li&gt;Downloaded from Cloud Storage, as shown in Figure 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-4-direct-model-prediction.png&#34; alt=&#34;Direct-model prediction in Dataflow&#34;&gt;&lt;strong&gt;Figure 4.&lt;/strong&gt; Direct-model prediction in Dataflow&lt;/p&gt;
&lt;p&gt;In this solution, we use a &lt;code&gt;SavedModel&lt;/code&gt; that is part of the &lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/tree/master/blogs/tf_dataflow_serving/model&#34;&gt;source code&lt;/a&gt; on GitHub. To load a model on the instances, you do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you create the Dataflow job, specify the pipeline dependencies to be loaded, including the model file. The following Python code shows the &lt;code&gt;setup.py&lt;/code&gt; file that includes the model files to be submitted with the Dataflow job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/setup.py&#34;&gt;blogs/tf_dataflow_serving/setup.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/setup.py&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setuptools
   
requirements &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
   
setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setup(
    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TF-DATAFLOW-DEMO&amp;#39;&lt;/span&gt;,
    version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;,
    install_requires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requirements,
    packages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_packages(),
    package_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;trained/*&amp;#39;&lt;/span&gt;,
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;trained/v1/*&amp;#39;&lt;/span&gt;,
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;trained/v1/variables/*&amp;#39;&lt;/span&gt;]
                  },
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call the local model files during the pipeline. This produces the prediction for the given instances. The following Python code shows how to do this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/model/inference.py&#34;&gt;blogs/tf_dataflow_serving/model/inference.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/model/inference.py&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;predictor_fn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
   
   
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_predictor&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Loads the TensorFlow saved model to the predictor object
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        predictor_fn
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; predictor_fn
   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; predictor_fn &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
   
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initialising predictor...&amp;#34;&lt;/span&gt;)
        dir_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;realpath(__file__))
        export_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dir_path, SAVED_MODEL_DIR)
   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(export_dir):
            predictor_fn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contrib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predictor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_saved_model(
                export_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;export_dir,
                signature_def_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;predict&amp;#34;&lt;/span&gt;
            )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model not found! - Invalid model path: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(export_dir))
   
   
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;estimate_local&lt;/span&gt;(instances):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Calls the local babyweight estimator to get predictions
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       instances: list of json objects
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        int - estimated baby weight
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
   
    init_predictor()
   
    inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict((k, [v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; instances[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,len(instances)):
        instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instances[i]
   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            inputs[k] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [v]
   
    values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; predictor_fn(inputs)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;predictions&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See the &lt;a href=&#34;https://beam.apache.org/documentation/sdks/python-pipeline-dependencies/#multiple-file-dependencies&#34;&gt;Apache Beam Multiple File Dependencies&lt;/a&gt; page for more details.&lt;/p&gt;
&lt;h4 id=&#34;ai-platform-batch-prediction-job&#34;&gt;AI Platform batch prediction job&lt;/h4&gt;
&lt;p&gt;Besides deploying the model as an HTTP endpoint, AI Platform lets you run a &lt;a href=&#34;https://cloud.google.com/ml-engine/docs/tensorflow/batch-predict&#34;&gt;batch prediction job&lt;/a&gt; by using a deployed model version or a TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; in Cloud Storage.&lt;/p&gt;
&lt;p&gt;An AI Platform batch prediction job takes the Cloud Storage location of the input data files as a parameter. It uses the model to get predictions for that data, and then stores the prediction results in another Cloud Storage output location that is also given as a parameter. The following example shows &lt;code&gt;gcloud&lt;/code&gt; commands that submit an AI Platform batch prediction job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/scripts/predict-batch-cmle.sh&#34;&gt;blogs/tf_dataflow_serving/scripts/predict-batch-cmle.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/scripts/predict-batch-cmle.sh&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;BUCKET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;BUCKET&amp;gt;&amp;#39;&lt;/span&gt;
DATA_FORMAT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TEXT&amp;#34;&lt;/span&gt;
INPUT_PATHS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data/babyweight/experiments/outputs/data-prep-*
OUTPUT_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUCKET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data/babyweight/experiments/outputs/cmle-estimates
MODEL_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;babyweight_estimator&amp;#39;&lt;/span&gt;
VERSION_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;
REGION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;REGION&amp;gt;&amp;#39;&lt;/span&gt;
now&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y%m%d_%H%M%S&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
JOB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;batch_predict_&lt;/span&gt;$MODEL_NAME$now&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
MAX_WORKER_COUNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;

gcloud ml-engine jobs submit prediction $JOB_NAME &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$MODEL_NAME &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --input-paths&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$INPUT_PATHS &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --output-path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$OUTPUT_PATH &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --region&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$REGION &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --data-format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$DATA_FORMAT &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --max-worker-count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$MAX_WORKER_COUNT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;point-by-point-versus-micro-batching-for-online-prediction&#34;&gt;Point-by-point versus micro-batching for online prediction&lt;/h4&gt;
&lt;p&gt;In real-time prediction pipelines, whether you are serving the model as an HTTP endpoint or using the model directly from the workers, you have two options to get predictions for incoming data points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Individual point&lt;/strong&gt;. The obvious option is to send each data point to the model individually and get a prediction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Micro-batches&lt;/strong&gt;. A more optimized option is to use a windowing function to create micro-batches, grouping data points within a specific time period, such as every 5 seconds. The micro-batch is then sent to the model to get predictions for all the instances at at time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following Python code shows how to create time-based micro-batches using a windowing function in an Apache Beam pipeline.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/pipelines/stream_process.py&#34;&gt;blogs/tf_dataflow_serving/pipelines/stream_process.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/pipelines/stream_process.py&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_pipeline_with_micro_batches&lt;/span&gt;(inference_type, project,
                                    pubsub_topic, pubsub_subscription,
                                    bq_dataset, bq_table,
                                    window_size, runner, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):

    prepare_steaming_source(project, pubsub_topic, pubsub_subscription)
    prepare_steaming_sink(project, bq_dataset, bq_table)
    pubsub_subscription_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;projects/{}/subscriptions/{}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(project, pubsub_subscription)
    options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pipeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PipelineOptions(flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;args)

    pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pipeline(runner, options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;options)
    (
            pipeline
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Read from PubSub&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ReadStringsFromPubSub(subscription&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pubsub_subscription_url, id_label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source_id&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Micro-batch - Window Size: {} Seconds&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(window_size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowInto(FixedWindows(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;window_size))
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Estimate Targets - {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(inference_type) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FlatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; messages: estimate(messages, inference_type))
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Write to BigQuery&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; beam&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WriteToBigQuery(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project,
                                                             dataset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bq_dataset,
                                                             table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bq_table
                                                             )
    )

    pipeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The micro-batching approach uses models deployed as HTTP endpoints, which dramatically reduces the number of HTTP requests and reduces latency. Even when the micro-batching technique used with the direct model, sending the model a tensor with N instances for prediction is more efficient than sending a tensor with a length of 1 because of the vectorized operations.&lt;/p&gt;
&lt;h2 id=&#34;batch-experiments&#34;&gt;Batch experiments&lt;/h2&gt;
&lt;p&gt;In the batch experiments, we want to estimate baby weights in the Natality dataset in BigQuery by using a TensorFlow regression model. We then want to save the prediction results in Cloud Storage as CSV files by using a Dataflow batch pipeline. The following section describes different experiments we tried to accomplish this task.&lt;/p&gt;
&lt;h3 id=&#34;approach-1-dataflow-with-direct-model-prediction&#34;&gt;Approach 1: Dataflow with direct-model prediction&lt;/h3&gt;
&lt;p&gt;In this approach, Dataflow workers host the TensorFlow &lt;code&gt;SavedModel&lt;/code&gt;, which is called directly for prediction during the batch processing pipeline for each record. Figure 5 shows the high-level architecture of this approach.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-5-batch-approach-1-dataflow-with-direct-model.png&#34; alt=&#34;Batch Approach 1: Dataflow with direct model prediction&#34;&gt;&lt;strong&gt;Figure 5.&lt;/strong&gt; Batch Approach 1: Dataflow with direct model prediction&lt;/p&gt;
&lt;p&gt;The Dataflow pipeline performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read data from BigQuery.&lt;/li&gt;
&lt;li&gt;Prepare BigQuery record for prediction.&lt;/li&gt;
&lt;li&gt;Call the local TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; to get a prediction for each record.&lt;/li&gt;
&lt;li&gt;Convert the result (input record and estimated baby weight) to a CSV file.&lt;/li&gt;
&lt;li&gt;Write the CSV file to Cloud Storage.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this approach, there are no calls to remote services, such as a deployed model on AI Platform as an HTTP endpoint. The prediction is done locally within each Dataflow worker by using the TensorFlow &lt;code&gt;SavedModel&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;approach-2-dataflow-with-ai-platform-batch-prediction&#34;&gt;Approach 2: Dataflow with AI Platform batch prediction&lt;/h3&gt;
&lt;p&gt;In this approach, the TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; is stored in Cloud Storage and used by AI Platform for prediction. However, instead of making an API call to the deployed model for each record as with the previous approach, the data is prepared for prediction and submitted as a batch.&lt;/p&gt;
&lt;p&gt;This approach has two phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dataflow prepares the data from BigQuery for prediction, and then stores the data in Cloud Storage.&lt;/li&gt;
&lt;li&gt;The AI Platform batch prediction job is submitted with the prepared data, and the prediction results are stored in Cloud Storage.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Figure 6 shows the overall architecture of this two-phased approach.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-6-batch-approach-2-dataflow-with-cloud-ml.png&#34; alt=&#34;Batch Approach 2: Dataflow with AI Platform batch prediction&#34;&gt;&lt;strong&gt;Figure 6.&lt;/strong&gt; Batch Approach 2: Dataflow with AI Platform batch prediction&lt;/p&gt;
&lt;p&gt;The workflow steps, including the Dataflow pipeline, are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read data from BigQuery.&lt;/li&gt;
&lt;li&gt;Prepare BigQuery record for prediction.&lt;/li&gt;
&lt;li&gt;Write JSON data to Cloud Storage. The &lt;code&gt;serving_fn&lt;/code&gt; function in the model expects JSON instances as input.&lt;/li&gt;
&lt;li&gt;Submit an AI Platform batch prediction job with the prepared data in Cloud Storage. This job writes the prediction results to Cloud Storage as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Dataflow job prepares the data for prediction rather than submitting the AI Platform prediction job. In other words, the data preparation task and the batch prediction task are not tightly coupled. Cloud Functions, Airflow, or any scheduler can orchestrate the workflow by executing the Dataflow job and then submitting the AI Platform job for batch prediction.&lt;/p&gt;
&lt;p&gt;AI Platform batch prediction is recommended for both performance and ease of use if your data meets the following criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your data is available in Cloud Storage, in the format expected for prediction, from a previous data ingestion process.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have control of the first phase of the workflow, such as the Dataflow pipeline that prepares the data in Cloud Storage for prediction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;experiment-configurations&#34;&gt;Experiment configurations&lt;/h3&gt;
&lt;p&gt;We used the following configurations in three experiments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data sizes: &lt;code&gt;10K&lt;/code&gt;, &lt;code&gt;100K&lt;/code&gt;, &lt;code&gt;1M&lt;/code&gt;, and &lt;code&gt;10M&lt;/code&gt; rows&lt;/li&gt;
&lt;li&gt;Cloud Storage class: &lt;code&gt;Regional Storage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cloud Storage location: &lt;code&gt;europe-west1-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow region: &lt;code&gt;europe-west1-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow worker machine type: &lt;code&gt;n1-standard-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow Autoscaling for batch data up to 1 million records&lt;/li&gt;
&lt;li&gt;Dataflow &lt;code&gt;num_worker&lt;/code&gt;: &lt;code&gt;20&lt;/code&gt; for batch data up to 10 million records&lt;/li&gt;
&lt;li&gt;AI Platform batch prediction &lt;code&gt;max-worker-count&lt;/code&gt; setting: &lt;code&gt;20&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Cloud Storage location and the Dataflow region should be the same. This solution uses the &lt;code&gt;europe-west1-b&lt;/code&gt; region as an arbitrary value.&lt;/p&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;The following table summarizes the results (timings) of performing the batch predictions and direct-model predictions with different sizes of datasets.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Batch data size&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Metric&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Dataflow then AI Platform batch prediction&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Dataflow with direct-model prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;10K rows&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Running time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;15 min 30 sec  (Dataflow: 7 min 47 sec + AI Platform: 7 min 43 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8 min 24 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total vCPU time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.301 hr  (Dataflow: 0.151 hr + AI Platform: 0.15 hr)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.173 hr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;100K rows&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Running time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16 min 37 sec  (Dataflow: 8 min 39 sec + AI Platform: 7 min 58 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10 min 31 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total vCPU time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.334 hr  (Dataflow: 0.184 hr + AI Platform: 0.15 hr)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.243 hr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;1M rows&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Running time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21 min 11 sec (Dataflow: 11 min 07 sec + AI Platform: 10 min 04 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17 min 12 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total vCPU time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.446 hr  (Dataflow: 0.256 hr + AI Platform: 0.19 hr)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.115 hr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;10M rows&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Running time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;33 min 08 sec (Dataflow: 12 min 15 sec + AI Platform: 20 min 53 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;25 min 02 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total vCPU time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.251 hr  (Dataflow: 3.581 hr + AI Platform: 1.67 hr)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7.878 hr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 7 shows a graph of these results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-7-barchart-batch-results.svg&#34; alt=&#34;Graph showing timings for 3 approaches for 4 different dataset sizes&#34;&gt;&lt;strong&gt;Figure 7.&lt;/strong&gt; Graph showing timings for 3 approaches for 4 different dataset sizes&lt;/p&gt;
&lt;p&gt;As the results show, the AI Platform batch prediction job on its own takes less time to produce predictions for the input data, given that the data is already in Cloud Storage in the format used for prediction. However, when the batch prediction job is combined with a preprocessing step (extracting and preparing the data from BigQuery to Cloud Storage for prediction) and with a post-processing step (storing the data back to BigQuery), the direct-model approach produces better end-to-end execution time. In addition, the performance of the direct-model prediction approach can be further optimized using micro-batching (which we discuss later for the streaming experiments).&lt;/p&gt;
&lt;h2 id=&#34;stream-experiments&#34;&gt;Stream experiments&lt;/h2&gt;
&lt;p&gt;In the streaming experiments, the Dataflow pipeline reads data points from a Pub/Sub topic and writes the data to BigQuery by using the streaming APIs. The Dataflow streaming pipeline processes the data and gets predictions using the TensorFlow baby-weight estimation model.&lt;/p&gt;
&lt;p&gt;The topic receives data from a stream simulator that generates data points, which are the instances to estimate the baby weight for, at a predefined rate of events per second. This simulates a real-world example of an unbounded data source. The following Python code simulates the data stream sent to a Pub/Sub topic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/simulate_stream.py&#34;&gt;blogs/tf_dataflow_serving/simulate_stream.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/blogs/tf_dataflow_serving/simulate_stream.py&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pubsub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;project_id)
topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;topic(PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pubsub_topic)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; topic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Topic does not exist. Please run a stream pipeline first to create the topic.&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Simulation aborted.&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream_sample_size):

    message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_message(topic, index)

    &lt;span style=&#34;color:#75715e&#34;&gt;# for debugging&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show_message:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message {} was sent: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, message)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(sleep_time_per_msg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;approach-1-dataflow-with-ai-platform-online-prediction&#34;&gt;Approach 1: Dataflow with AI Platform online prediction&lt;/h3&gt;
&lt;p&gt;In this approach, the TensorFlow model is deployed and hosted in AI Platform as a REST API. The Dataflow streaming pipeline calls the API for each message consumed from Pub/Sub get predictions. The high-level architecture of this approach is shown in Figure 8.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-8-stream-approach-1-dataflow-with-cloud-ml-online.png&#34; alt=&#34;Stream Approach 1: Dataflow with AI Platform online prediction&#34;&gt;&lt;strong&gt;Figure 8.&lt;/strong&gt; Stream Approach 1: Dataflow with AI Platform online prediction. The HTTP request might include a single data point or a group of data points in a micro-batch.&lt;/p&gt;
&lt;p&gt;In this approach, the Dataflow pipeline performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read messages from a Pub/Sub topic.&lt;/li&gt;
&lt;li&gt;Send an HTTP request to the AI Platform model&amp;rsquo;s API to get predictions for each message.&lt;/li&gt;
&lt;li&gt;Write results to BigQuery by using streaming APIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Micro-batching is a better approach. That is, instead of sending an HTTP request to the model&amp;rsquo;s REST API for each message that is read from Pub/Sub, Dataflow groups messages received during a 1-second window. It then sends this group of messages as a micro-batch in a single HTTP request to the model&amp;rsquo;s API. In this approach, the Dataflow pipeline performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read messages from Pub/Sub topic.&lt;/li&gt;
&lt;li&gt;Apply a 1-second windowing operation to create a micro-batch of messages.&lt;/li&gt;
&lt;li&gt;Send an HTTP request with the micro-batch to the AI Platform model&amp;rsquo;s API to get predictions for the messages.&lt;/li&gt;
&lt;li&gt;Write results to BigQuery by using streaming APIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rationale behind this approach is that it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduces the number of calls to the remote service, such as the AI Platform model.&lt;/li&gt;
&lt;li&gt;Reduces the average latency of serving each message.&lt;/li&gt;
&lt;li&gt;Reduces the overall processing time of the pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this experiment, the time window was set to 1 second. However, the micro-batch size, which is the number of messages sent as a batch to AI Platform mode, varies. The micro-batch size depends on the message generation frequency—the number of messages per second.&lt;/p&gt;
&lt;p&gt;The following section describes experiments with three different frequencies: 50, 100, and 500 messages per second. That is, the micro-batch size is 50, 100, and 500.&lt;/p&gt;
&lt;h3 id=&#34;approach-2-dataflow-with-direct-model-prediction&#34;&gt;Approach 2: Dataflow with direct-model prediction&lt;/h3&gt;
&lt;p&gt;This approach is similar to the approach that was used in the batch experiments. The TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; is hosted on Dataflow workers and is called for prediction during the stream processing pipeline for each record. Figure 9 shows the high-level architecture of this approach.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-9-stream-approach-2-dataflow-with-direct-model.png&#34; alt=&#34;Stream approach 2: Dataflow with direct-model prediction&#34;&gt;&lt;strong&gt;Figure 9.&lt;/strong&gt; Stream approach 2: Dataflow with direct-model prediction&lt;/p&gt;
&lt;p&gt;In this approach, the Dataflow pipeline performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read messages from Pub/Sub topic.&lt;/li&gt;
&lt;li&gt;Call the local TensorFlow &lt;code&gt;SavedModel&lt;/code&gt; to get predictions for each record.&lt;/li&gt;
&lt;li&gt;Write results to BigQuery by using streaming APIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The micro-batching technique can also be used in the stream pipeline with the direct-model prediction approach. Instead of sending a tensor of one data instance to the model, we can send a tensor of N data instances, where N is equal to the messages received within the Dataflow window to the model. This technique uses the vectorized operations of the TensorFlow model and gets several predictions in parallel.&lt;/p&gt;
&lt;h3 id=&#34;experiment-configurations-1&#34;&gt;Experiment configurations&lt;/h3&gt;
&lt;p&gt;We used the following configurations for these experiments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream data size: &lt;code&gt;10K records (messages)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Simulated messages per second (MPS): &lt;code&gt;50&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;, and &lt;code&gt;500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Window size (in micro-batch experiments): &lt;code&gt;1 second&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow region: &lt;code&gt;europe-west1-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow worker machine type: &lt;code&gt;n1-standard-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dataflow &lt;code&gt;num_worker&lt;/code&gt;: &lt;code&gt;5&lt;/code&gt; (no auto-scaling)&lt;/li&gt;
&lt;li&gt;AI Platform model API nodes: &lt;code&gt;3 (manualScale)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;results-1&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;The following table summarizes the results of performing the streaming experiments with different volumes of data (messages per second). &lt;em&gt;Messages frequency&lt;/em&gt; refers to the number of messages sent per second, and &lt;em&gt;simulation time&lt;/em&gt; refers to the time to send all the messages.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Stream messages frequency&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Metric&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Dataflow with AI Platform online prediction&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Dataflow with direct-model prediction&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Single message&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Micro-batching&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Single message&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Micro-batching&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50 msg per sec&lt;/strong&gt;  (Simulation time: 3 min 20 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9 min 34 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7 min 44 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 min 43 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 min 22 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;100 msg per sec&lt;/strong&gt;  (Simulation time**:** 1 min 40 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6 min 03 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 min 34 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 min 51 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 min 41 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;500 msg per sec&lt;/strong&gt;  (Simulation time**:** 20 sec)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://cloud.google.com/ml-engine/docs/tensorflow/quotas&#34;&gt;NA - Default AI Platform Online Prediction Quota&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 min 47 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 min 23 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;48 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 10 shows a graph of these results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/solutions/images/comparing-ml-model-predictions-using-cloud-dataflow-fig-10-barchart-streaming-results.svg&#34; alt=&#34;Graph showing timings for different approaches and frequencies&#34;&gt;&lt;strong&gt;Figure 10.&lt;/strong&gt; Graph showing timings for different approaches and frequencies&lt;/p&gt;
&lt;p&gt;As shown in the results, the micro-batching technique improves the execution performance in both AI Platform online prediction and in direct-model prediction. In addition, using direct-model with streaming pipeline shows 2 times to 4 times the performance improvement compared to calling an external REST/HTTP API for online prediction.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;According to the described approaches and experiment results, we recommend the following approaches.&lt;/p&gt;
&lt;h3 id=&#34;batch-processing&#34;&gt;Batch processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you are building your batch data processing pipeline, and you want prediction as part of the pipeline, use the direct-model approach for the best performance.&lt;/li&gt;
&lt;li&gt;Improve the performance of the direct-model approach by creating micro-batches of the data points before calling the local model for prediction to make use of the parallelization of the vectorized operations.&lt;/li&gt;
&lt;li&gt;If your data is populated to Cloud Storage in the format expected for prediction, use AI Platform batch prediction for the best performance.&lt;/li&gt;
&lt;li&gt;Use AI Platform if you want to use the power of GPUs for batch prediction.&lt;/li&gt;
&lt;li&gt;Do not use AI Platform online prediction for batch prediction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stream-processing&#34;&gt;Stream processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use direct-model in the streaming pipeline for best performance and reduced average latency. Predictions are performed locally, with no HTTP calls to remote services.&lt;/li&gt;
&lt;li&gt;Decouple your model from your data processing pipelines for better maintainability of models used in online predictions. The best approach is to serve your model as an independent microservice by using AI Platform or any other web hosting service.&lt;/li&gt;
&lt;li&gt;Deploy your model as an independent web service to allow multiple data processing pipelines and online apps to consume the model service as an endpoint. In addition, changes to the model are transparent to the apps and pipelines that consume it.&lt;/li&gt;
&lt;li&gt;Deploy multiple instances of the service with load balancing to improve the scalability and the availability of the model web service. With AI Platform, you only need to specify the number of nodes (&lt;code&gt;manualScaling&lt;/code&gt;) or &lt;code&gt;minNodes&lt;/code&gt; (&lt;code&gt;autoScaling&lt;/code&gt;) in the yaml configuration file when you deploy a model version.&lt;/li&gt;
&lt;li&gt;If you deploy your model in a separate microservice, there are extra costs, depending on the underlying serving infrastructure. See the pricing &lt;a href=&#34;https://cloud.google.com/ml-engine/docs/tensorflow/pricing-faq&#34;&gt;FAQ&lt;/a&gt; for AI Platform online prediction.&lt;/li&gt;
&lt;li&gt;Use micro-batching in your streaming data processing pipeline for better performance with both the direct-model and HTTP-model service. Micro-batching reduces the number of HTTP requests to the model service, and uses the vectorized operations of the TensorFlow model to get predictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to build and train the baby-weight model in the &lt;a href=&#34;https://cloud.google.com/solutions/machine-learning/ml-on-structured-data-analysis-prep-1#explore_the_public_natality_dataset&#34;&gt;Machine Learning with Structured Data&lt;/a&gt; solution.&lt;/li&gt;
&lt;li&gt;Have a look at the &lt;a href=&#34;https://github.com/GoogleCloudPlatform/training-data-analyst/tree/master/blogs/tf_dataflow_serving&#34;&gt;companion repository&lt;/a&gt; on GitHub.&lt;/li&gt;
&lt;li&gt;Try out other Google Cloud features for yourself. Have a look at our &lt;a href=&#34;https://cloud.google.com/docs/tutorials&#34;&gt;tutorials&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/solutions/comparing-ml-model-predictions-using-cloud-dataflow-pipelines&#34;&gt;Comparing Machine Learning Models for Predictions in Cloud Dataflow Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>recommendations</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/product-overview/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/product-overview/</guid>
      
        <description>&lt;h2 id=&#34;implementing-recommendations&#34;&gt;Implementing Recommendations&lt;/h2&gt;
&lt;h3 id=&#34;steps&#34;&gt;Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Set up a project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import your &lt;strong&gt;product catalog&lt;/strong&gt;
You can add items to your Recommendations AI product catalog individually by using the import Files or API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Information of the products sold to customers. This includes the product title, description, in stock availability, pricing, and so on.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Record &lt;strong&gt;user events&lt;/strong&gt;
User events track user actions such as clicking on a product, adding an item to a shopping cart, or purchasing an item, and so on. Recommendations AI relies on user event data in order to generate personalized recommendations. User events need to be ingested in real time to accurately reflect the behavior of your users.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;End user behavior on your website. This includes users searching for, viewing, or purchasing a specific item, your website showing users a list of products, and so on.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Determine your &lt;strong&gt;recommendation types&lt;/strong&gt; and &lt;strong&gt;placements&lt;/strong&gt;
Reviewing the available recommendation types, optimization objectives, and other model tuning options to determine the best options for your business objectives. The location of the recommendation panel and the objective for that panel impact model tuning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import historical user events
Your models need sufficient training data before they can provide accurate predictions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your model
After you have met the data requirements, create your model to initiate model training and tuning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your placements and preview your recommendations
After your model has been activated, you can create your placements and &lt;strong&gt;preview&lt;/strong&gt; the recommendations from your model to &lt;strong&gt;ensure&lt;/strong&gt; your setup is functioning as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up an A/B experiment (Optional)
You can compare the performance of your website with Recommendations AI recommendations to a &lt;strong&gt;baseline&lt;/strong&gt; version of your website without Recommendations AI recommendations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate your model
You can associate recommendations and user events and Recommendations AI provides reporting of metrics to help you determine how incorporating the recommendations is affecting your business, then view recommendation metrics for your project in the Dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can upload and manage product catalog information and user event logs for your websites. Recommendations AI uses this information to train and update recommendation models.&lt;/p&gt;
&lt;h2 id=&#34;recommendation-model-types&#34;&gt;Recommendation model types&lt;/h2&gt;
&lt;p&gt;When you request recommendations from Recommendations AI, you provide the &lt;code&gt;placement&lt;/code&gt; value, which determines which model is used to return your recommendations.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Model type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Optimization objective&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;placement&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;User event types&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Minimum data requirement&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Data collection window&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Recommended for you&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Click-through rate&lt;/td&gt;
&lt;td&gt;home_page&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;detail-page-view&lt;/code&gt; &lt;code&gt;add-to-cart&lt;/code&gt; &lt;code&gt;purchase-complete&lt;/code&gt; &lt;code&gt;home-page-view&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 week, with an average of 10 &lt;code&gt;detail-page-view&lt;/code&gt; events per joined catalog item.OR60 days with at least one joined &lt;code&gt;detail-page-view&lt;/code&gt; event.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Recommended for you&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Conversion rate&lt;/td&gt;
&lt;td&gt;home_page&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;detail-page-view&lt;/code&gt; &lt;code&gt;add-to-cart&lt;/code&gt; &lt;code&gt;purchase-complete&lt;/code&gt; &lt;code&gt;home-page-view&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 week, with an average of 10 &lt;code&gt;add-to-cart&lt;/code&gt; events per joined catalog item.OR60 days with at least one joined &lt;code&gt;add-to-cart&lt;/code&gt; event.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Others you may like&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Click-through rate&lt;/td&gt;
&lt;td&gt;product_detail&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;detail-page-view&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 week, with an average of 10 &lt;code&gt;detail-page-view&lt;/code&gt; events per joined catalog item.OR60 days with at least one joined &lt;code&gt;detail-page-view&lt;/code&gt; event.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Others you may like&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Conversion rate&lt;/td&gt;
&lt;td&gt;product_detail&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;add-to-cart&lt;/code&gt; &lt;code&gt;detail-page-view&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 week, with an average of 10 &lt;code&gt;add-to-cart&lt;/code&gt; events per joined catalog item.OR60 days with at least one joined &lt;code&gt;add-to-cart&lt;/code&gt; event.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Frequently bought together&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;revenue per order&lt;/td&gt;
&lt;td&gt;shopping_cart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;purchase-complete&lt;/code&gt; &lt;code&gt;detail-page-view&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;An average of 10 &lt;code&gt;purchase-complete&lt;/code&gt; events per joined catalog item.OR90 days of &lt;code&gt;purchase-complete&lt;/code&gt; events.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12 months&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;user-events&#34;&gt;User events&lt;/h2&gt;
&lt;h3 id=&#34;event-type-priority&#34;&gt;Event type priority&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Priority&lt;/th&gt;
&lt;th&gt;User Events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Required for initial live experiment&lt;/td&gt;
&lt;td&gt;add-to-cart, detail-page-view, home-page-view, purchase-complete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Important for improving model quality over time&lt;/td&gt;
&lt;td&gt;checkout-start, category-page-view, remove-from-cart, search, shopping-cart-page-view&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nice to have&lt;/td&gt;
&lt;td&gt;add-to-list, page-visit, refund, remove-from-list&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;user-event-type-examples-and-schemas&#34;&gt;User event type examples and schemas&lt;/h3&gt;
&lt;p&gt;Hadoop/Bigquery/Snowflake/Redshift&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/recommendations-ai/docs/setting-up&#34;&gt;recommendations-ai&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>algorithms interview questions</title>
      <link>http://www.yezheng.pro/post/interview/algorithms/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/algorithms/</guid>
      
        <description>&lt;h2 id=&#34;1-红黑树&#34;&gt;1 红黑树&lt;/h2&gt;
&lt;p&gt;红黑树与AVL的比较：&lt;/p&gt;
&lt;p&gt;AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；&lt;/p&gt;
&lt;p&gt;红黑是用非严格的平衡来换取增删节点时候旋转次数的降低；&lt;/p&gt;
&lt;p&gt;所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。&lt;/p&gt;
&lt;p&gt;红黑树详解: &lt;a href=&#34;https://xieguanglei.github.io/blog/post/red-black-tree.html&#34;&gt;https://xieguanglei.github.io/blog/post/red-black-tree.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;教你透彻了解红黑树: &lt;a href=&#34;https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md&#34;&gt;https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>computer networks interview questions</title>
      <link>http://www.yezheng.pro/post/interview/computer-networks/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/computer-networks/</guid>
      
        <description>&lt;h2 id=&#34;1-三次握手&#34;&gt;1 三次握手&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。&lt;/li&gt;
&lt;li&gt;服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。&lt;/li&gt;
&lt;li&gt;最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-四次挥手&#34;&gt;2 四次挥手&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.&lt;/li&gt;
&lt;li&gt;服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.&lt;/li&gt;
&lt;li&gt;服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.&lt;/li&gt;
&lt;li&gt;客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图解: &lt;a href=&#34;http://blog.csdn.net/whuslei/article/details/6667471&#34;&gt;http://blog.csdn.net/whuslei/article/details/6667471&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-arp协议&#34;&gt;3 ARP协议&lt;/h2&gt;
&lt;p&gt;地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。&lt;/p&gt;
&lt;h2 id=&#34;4-urllib和urllib2的区别&#34;&gt;4 urllib和urllib2的区别&lt;/h2&gt;
&lt;p&gt;这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。&lt;/li&gt;
&lt;li&gt;urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-post和get&#34;&gt;5 Post和Get&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html&#34;&gt;GET和POST有什么区别？及为什么网上的多数答案都是错的&lt;/a&gt; &lt;a href=&#34;https://www.zhihu.com/question/31640769?rf=37401322&#34;&gt;知乎回答&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;get: &lt;a href=&#34;http://tools.ietf.org/html/rfc2616#section-9.3&#34;&gt;RFC 2616 - Hypertext Transfer Protocol &amp;ndash; HTTP/1.1&lt;/a&gt; post: &lt;a href=&#34;http://tools.ietf.org/html/rfc2616#section-9.5&#34;&gt;RFC 2616 - Hypertext Transfer Protocol &amp;ndash; HTTP/1.1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-cookie和session&#34;&gt;6 Cookie和Session&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Cookie&lt;/th&gt;
&lt;th&gt;Session&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;储存位置&lt;/td&gt;
&lt;td&gt;客户端&lt;/td&gt;
&lt;td&gt;服务器端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;目的&lt;/td&gt;
&lt;td&gt;跟踪会话，也可以保存用户偏好设置或者保存用户名密码等&lt;/td&gt;
&lt;td&gt;跟踪会话&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全性&lt;/td&gt;
&lt;td&gt;不安全&lt;/td&gt;
&lt;td&gt;安全&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。&lt;/p&gt;
&lt;h2 id=&#34;7-apache和nginx的区别&#34;&gt;7 apache和nginx的区别&lt;/h2&gt;
&lt;p&gt;nginx 相对 apache 的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级，同样起web 服务，比apache 占用更少的内存及资源&lt;/li&gt;
&lt;li&gt;抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能&lt;/li&gt;
&lt;li&gt;配置简洁&lt;/li&gt;
&lt;li&gt;高度模块化的设计，编写模块相对简单&lt;/li&gt;
&lt;li&gt;社区活跃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;apache 相对nginx 的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rewrite ，比nginx 的rewrite 强大&lt;/li&gt;
&lt;li&gt;模块超多，基本想到的都可以找到&lt;/li&gt;
&lt;li&gt;少bug ，nginx 的bug 相对较多&lt;/li&gt;
&lt;li&gt;超稳定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-网站用户密码保存&#34;&gt;8 网站用户密码保存&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;明文保存&lt;/li&gt;
&lt;li&gt;明文hash后保存,如md5&lt;/li&gt;
&lt;li&gt;MD5+Salt方式,这个salt可以随机&lt;/li&gt;
&lt;li&gt;知乎使用了Bcrypy(好像)加密&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-http和https&#34;&gt;9 HTTP和HTTPS&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态码&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1xx 报告&lt;/td&gt;
&lt;td&gt;接收到请求，继续进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2xx 成功&lt;/td&gt;
&lt;td&gt;步骤成功接收，被理解，并被接受&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3xx 重定向&lt;/td&gt;
&lt;td&gt;为了完成请求,必须采取进一步措施&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4xx 客户端出错&lt;/td&gt;
&lt;td&gt;请求包括错的顺序或不能完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5xx 服务器出错&lt;/td&gt;
&lt;td&gt;服务器无法完成显然有效的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;403: Forbidden 404: Not Found&lt;/p&gt;
&lt;p&gt;HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA&lt;/p&gt;
&lt;h2 id=&#34;10-xsrf和xss&#34;&gt;10 XSRF和XSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSRF(Cross-site request forgery)跨站请求伪造&lt;/li&gt;
&lt;li&gt;XSS(Cross Site Scripting)跨站脚本攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSRF重点在请求,XSS重点在脚本&lt;/p&gt;
&lt;h2 id=&#34;11-幂等-idempotence&#34;&gt;11 幂等 Idempotence&lt;/h2&gt;
&lt;p&gt;HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的&lt;strong&gt;副作用&lt;/strong&gt;。(注意是副作用)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET http://www.bank.com/account/123456&lt;/code&gt;，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。&lt;code&gt;GET http://www.news.com/latest-news&lt;/code&gt;这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。&lt;/p&gt;
&lt;p&gt;DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：&lt;code&gt;DELETE http://www.forum.com/article/4231&lt;/code&gt;，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。&lt;/p&gt;
&lt;p&gt;POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：&lt;code&gt;POST http://www.forum.com/articles&lt;/code&gt;的语义是在&lt;code&gt;http://www.forum.com/articles&lt;/code&gt;下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。&lt;/p&gt;
&lt;p&gt;PUT所对应的URI是要创建或更新的资源本身。比如：&lt;code&gt;PUT http://www.forum/articles/4231&lt;/code&gt;的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。&lt;/p&gt;
&lt;h2 id=&#34;12-restful架构soaprpc&#34;&gt;12 RESTful架构(SOAP,RPC)&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;http://www.ruanyifeng.com/blog/2011/09/restful.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-soap&#34;&gt;13 SOAP&lt;/h2&gt;
&lt;p&gt;SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。&lt;/p&gt;
&lt;h2 id=&#34;14-rpc&#34;&gt;14 RPC&lt;/h2&gt;
&lt;p&gt;RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。&lt;/p&gt;
&lt;p&gt;总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了.&lt;/p&gt;
&lt;p&gt;进化的顺序: RPC -&amp;gt; SOAP -&amp;gt; RESTful&lt;/p&gt;
&lt;h2 id=&#34;15-cgi和wsgi&#34;&gt;15 CGI和WSGI&lt;/h2&gt;
&lt;p&gt;CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。 CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。&lt;/p&gt;
&lt;p&gt;WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。&lt;/p&gt;
&lt;p&gt;官方说明：&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/&#34;&gt;PEP-3333&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;16-中间人攻击&#34;&gt;16 中间人攻击&lt;/h2&gt;
&lt;p&gt;在GFW里屡见不鲜的,呵呵.&lt;/p&gt;
&lt;p&gt;中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。&lt;/p&gt;
&lt;h2 id=&#34;17-c10k问题&#34;&gt;17 c10k问题&lt;/h2&gt;
&lt;p&gt;所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。 推荐: &lt;a href=&#34;https://my.oschina.net/xianggao/blog/664275&#34;&gt;https://my.oschina.net/xianggao/blog/664275&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;18-socket&#34;&gt;18 socket&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml&#34;&gt;http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Socket=Ip address+ TCP/UDP + port&lt;/p&gt;
&lt;h2 id=&#34;19-浏览器缓存&#34;&gt;19 浏览器缓存&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html&#34;&gt;http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;304 Not Modified&lt;/p&gt;
&lt;h2 id=&#34;20-http10和http11&#34;&gt;20 HTTP1.0和HTTP1.1&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://blog.csdn.net/elifefly/article/details/3964766&#34;&gt;http://blog.csdn.net/elifefly/article/details/3964766&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求头Host字段,一个服务器多个网站&lt;/li&gt;
&lt;li&gt;长链接&lt;/li&gt;
&lt;li&gt;文件断点续传&lt;/li&gt;
&lt;li&gt;身份认证,状态管理,Cache缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTTP请求8种方法介绍 HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。&lt;/p&gt;
&lt;p&gt;GET&lt;/p&gt;
&lt;p&gt;GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。&lt;/p&gt;
&lt;p&gt;GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。&lt;/p&gt;
&lt;p&gt;HEAD&lt;/p&gt;
&lt;p&gt;HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。&lt;/p&gt;
&lt;p&gt;POST&lt;/p&gt;
&lt;p&gt;POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。&lt;/p&gt;
&lt;p&gt;PUT&lt;/p&gt;
&lt;p&gt;PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。&lt;/p&gt;
&lt;p&gt;DELETE&lt;/p&gt;
&lt;p&gt;DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。&lt;/p&gt;
&lt;p&gt;CONNECT&lt;/p&gt;
&lt;p&gt;CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。&lt;/p&gt;
&lt;p&gt;OPTIONS&lt;/p&gt;
&lt;p&gt;OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许&lt;/p&gt;
&lt;p&gt;TRACE&lt;/p&gt;
&lt;p&gt;TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。&lt;/p&gt;
&lt;p&gt;HTTP/1.1之后增加的方法&lt;/p&gt;
&lt;p&gt;在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法：&lt;/p&gt;
&lt;p&gt;PATCH&lt;/p&gt;
&lt;p&gt;PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：&lt;/p&gt;
&lt;p&gt;但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。 当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。&lt;/p&gt;
&lt;h2 id=&#34;21-ajax&#34;&gt;21 Ajax&lt;/h2&gt;
&lt;p&gt;AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>databases interview questions</title>
      <link>http://www.yezheng.pro/post/interview/databases/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/databases/</guid>
      
        <description>&lt;h2 id=&#34;1-事务&#34;&gt;1 事务&lt;/h2&gt;
&lt;p&gt;数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 彻底理解数据库事务: &lt;a href=&#34;http://www.hollischuang.com/archives/898&#34;&gt;http://www.hollischuang.com/archives/898&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-数据库索引&#34;&gt;2 数据库索引&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://tech.meituan.com/mysql-index.html&#34;&gt;http://tech.meituan.com/mysql-index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codinglabs.org/articles/theory-of-mysql-index.html&#34;&gt;MySQL索引背后的数据结构及算法原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理&lt;/p&gt;
&lt;h2 id=&#34;3-redis原理&#34;&gt;3 Redis原理&lt;/h2&gt;
&lt;h3 id=&#34;redis是什么&#34;&gt;Redis是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;是一个完全开源免费的key-value内存数据库&lt;/li&gt;
&lt;li&gt;通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;redis数据库&#34;&gt;Redis数据库&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万&lt;/li&gt;
&lt;li&gt;持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)&lt;/li&gt;
&lt;li&gt;自动操作：对不同数据类型的操作都是自动的，很安全&lt;/li&gt;
&lt;li&gt;快速的主&amp;ndash;从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。&lt;/li&gt;
&lt;li&gt;Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis缺点&#34;&gt;Redis缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。&lt;/li&gt;
&lt;li&gt;Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-乐观锁和悲观锁&#34;&gt;4 乐观锁和悲观锁&lt;/h2&gt;
&lt;p&gt;悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作&lt;/p&gt;
&lt;p&gt;乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。&lt;/p&gt;
&lt;p&gt;乐观锁与悲观锁的具体区别: &lt;a href=&#34;http://www.cnblogs.com/Bob-FD/p/3352216.html&#34;&gt;http://www.cnblogs.com/Bob-FD/p/3352216.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-mvcc&#34;&gt;5 MVCC&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;mysqlhttplibcsdnnetbasemysql的innodb引擎是如何实现mvcc的&#34;&gt;&lt;a href=&#34;http://lib.csdn.net/base/mysql&#34;&gt;MySQL&lt;/a&gt;的innodb引擎是如何实现MVCC的&lt;/h3&gt;
&lt;p&gt;innodb会为每一行添加两个字段，分别表示该行&lt;strong&gt;创建的版本&lt;/strong&gt;和&lt;strong&gt;删除的版本&lt;/strong&gt;，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（&lt;a href=&#34;http://blog.csdn.net/chosen0ne/article/details/10036775&#34;&gt;事务的隔离级别请看这篇文章&lt;/a&gt;）下，具体各种数据库操作的实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select：满足以下两个条件innodb会返回该行数据：
&lt;ul&gt;
&lt;li&gt;该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。&lt;/li&gt;
&lt;li&gt;该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;insert：将新插入的行的创建版本号设置为当前系统的版本号。&lt;/li&gt;
&lt;li&gt;delete：将要删除的行的删除版本号设置为当前系统的版本号。&lt;/li&gt;
&lt;li&gt;update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。&lt;/p&gt;
&lt;p&gt;由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。&lt;/p&gt;
&lt;p&gt;通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;http://blog.csdn.net/chosen0ne/article/details/18093187&#34;&gt;MVCC浅析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;6-myisam和innodb&#34;&gt;6 MyISAM和InnoDB&lt;/h2&gt;
&lt;p&gt;MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。&lt;/p&gt;
&lt;p&gt;InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。&lt;/p&gt;
&lt;p&gt;mysql 数据库引擎: &lt;a href=&#34;http://www.cnblogs.com/0201zcr/p/5296843.html&#34;&gt;http://www.cnblogs.com/0201zcr/p/5296843.html&lt;/a&gt; MySQL存储引擎－－MyISAM与InnoDB区别: &lt;a href=&#34;https://segmentfault.com/a/1190000008227211&#34;&gt;https://segmentfault.com/a/1190000008227211&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-索引是什么原理有什么优缺点&#34;&gt;7 索引是什么原理？有什么优缺点？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&#34;http://blog.csdn.net/kennyrose/article/details/7532032&#34;&gt;数据库索引的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-乐观锁和悲观锁是什么&#34;&gt;8 乐观锁和悲观锁是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/934&#34;&gt;深入理解乐观锁与悲观锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-你为什么选择-redis-而不是-mongodb-或者其他的有个项目用了-redis&#34;&gt;9 你为什么选择 Redis 而不是 MongoDB 或者其他的？（有个项目用了 Redis）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000002588088/a-1020000002589415&#34;&gt;redis、memcache、mongoDB有哪些区别？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-sql-和-nosql-区别&#34;&gt;10 SQL 和 NoSQL 区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/b32fe4fe45a3&#34;&gt;SQL 和 NoSQL 的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>LeetCode Top 100 Liked Questions</title>
      <link>http://www.yezheng.pro/post/interview/leetcode-top-liked/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/leetcode-top-liked/</guid>
      
        <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Train of thought&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum&#34;&gt;Two Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;return &lt;em&gt;indices of the two numbers in an array such that they add up to &lt;code&gt;target&lt;/code&gt;&lt;/em&gt;. Can we use additional space somehow? Like maybe a hash map to speed up the search?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/add-two-numbers&#34;&gt;Add Two Numbers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists stored in &lt;strong&gt;reverse order&lt;/strong&gt; representing two non-negative integers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-without-repeating-characters&#34;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The reason is that if $s[j]$ have a duplicate in the range $[i, j)$ with index $j&#39;$, we don&amp;rsquo;t need to increase $i$ little by little. We can skip all the elements in the range $[i, j&#39;]$ and let $i$ to be $j&#39; + 1$ directly.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/median-of-two-sorted-arrays&#34;&gt;Median of Two Sorted Arrays&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring&#34;&gt;Longest Palindromic Substring&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/container-with-most-water&#34;&gt;Container With Most Water&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/3sum&#34;&gt;3Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/letter-combinations-of-a-phone-number&#34;&gt;Letter Combinations of a Phone Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-nth-node-from-end-of-list&#34;&gt;Remove Nth Node From End of List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-parentheses&#34;&gt;Valid Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-two-sorted-lists&#34;&gt;Merge Two Sorted Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/generate-parentheses&#34;&gt;Generate Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-k-sorted-lists&#34;&gt;Merge k Sorted Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-valid-parentheses&#34;&gt;Longest Valid Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/search-in-rotated-sorted-array&#34;&gt;Search in Rotated Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array&#34;&gt;Find First and Last Position of Element in Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum&#34;&gt;Combination Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/first-missing-positive&#34;&gt;First Missing Positive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/trapping-rain-water&#34;&gt;Trapping Rain Water&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game-ii&#34;&gt;Jump Game II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/permutations&#34;&gt;Permutations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/rotate-image&#34;&gt;Rotate Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/group-anagrams&#34;&gt;Group Anagrams&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-intervals&#34;&gt;Merge Intervals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-path-sum&#34;&gt;Minimum Path Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/climbing-stairs&#34;&gt;Climbing Stairs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;72&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance&#34;&gt;Edit Distance&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-colors&#34;&gt;Sort Colors&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-window-substring&#34;&gt;Minimum Window Substring&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/subsets&#34;&gt;Subsets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-search&#34;&gt;Word Search&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-rectangle-in-histogram&#34;&gt;Largest Rectangle in Histogram&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-rectangle&#34;&gt;Maximal Rectangle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-inorder-traversal&#34;&gt;Binary Tree Inorder Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-binary-search-trees&#34;&gt;Unique Binary Search Trees&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/validate-binary-search-tree&#34;&gt;Validate Binary Search Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/symmetric-tree&#34;&gt;Symmetric Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-level-order-traversal&#34;&gt;Binary Tree Level Order Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-depth-of-binary-tree&#34;&gt;Maximum Depth of Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal&#34;&gt;Construct Binary Tree from Preorder and Inorder Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/flatten-binary-tree-to-linked-list&#34;&gt;Flatten Binary Tree to Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock&#34;&gt;Best Time to Buy and Sell Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-maximum-path-sum&#34;&gt;Binary Tree Maximum Path Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-consecutive-sequence&#34;&gt;Longest Consecutive Sequence&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;136&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number&#34;&gt;Single Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/copy-list-with-random-pointer&#34;&gt;Copy List with Random Pointer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;139&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-break&#34;&gt;Word Break&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle&#34;&gt;Linked List Cycle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;142&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle-ii&#34;&gt;Linked List Cycle II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/lru-cache&#34;&gt;LRU Cache&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-list&#34;&gt;Sort List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;152&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-subarray&#34;&gt;Maximum Product Subarray&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;155&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/min-stack&#34;&gt;Min Stack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-linked-lists&#34;&gt;Intersection of Two Linked Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;169&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/majority-element&#34;&gt;Majority Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;198&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/house-robber&#34;&gt;House Robber&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;199&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-right-side-view&#34;&gt;Binary Tree Right Side View&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-islands&#34;&gt;Number of Islands&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;206&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-linked-list&#34;&gt;Reverse Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;207&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule&#34;&gt;Course Schedule&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;208&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/implement-trie-prefix-tree&#34;&gt;Implement Trie (Prefix Tree)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;215&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array&#34;&gt;Kth Largest Element in an Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;221&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square&#34;&gt;Maximal Square&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;226&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/invert-binary-tree&#34;&gt;Invert Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-bst&#34;&gt;Kth Smallest Element in a BST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-linked-list&#34;&gt;Palindrome Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree&#34;&gt;Lowest Common Ancestor of a Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/product-of-array-except-self&#34;&gt;Product of Array Except Self&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;239&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sliding-window-maximum&#34;&gt;Sliding Window Maximum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;240&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/search-a-2d-matrix-ii&#34;&gt;Search a 2D Matrix II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;253&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/meeting-rooms-ii&#34;&gt;Meeting Rooms II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;279&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares&#34;&gt;Perfect Squares&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;283&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/move-zeroes&#34;&gt;Move Zeroes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;287&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-duplicate-number&#34;&gt;Find the Duplicate Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;295&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-median-from-data-stream&#34;&gt;Find Median from Data Stream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;297&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/serialize-and-deserialize-binary-tree&#34;&gt;Serialize and Deserialize Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;322&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change&#34;&gt;Coin Change&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;337&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/house-robber-iii&#34;&gt;House Robber III&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;338&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/counting-bits&#34;&gt;Counting Bits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;347&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/top-k-frequent-elements&#34;&gt;Top K Frequent Elements&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;394&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-string&#34;&gt;Decode String&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;406&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/queue-reconstruction-by-height&#34;&gt;Queue Reconstruction by Height&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;416&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum&#34;&gt;Partition Equal Subset Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;437&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/path-sum-iii&#34;&gt;Path Sum III&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;438&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-all-anagrams-in-a-string&#34;&gt;Find All Anagrams in a String&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;448&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array&#34;&gt;Find All Numbers Disappeared in an Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;494&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum&#34;&gt;Target Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;543&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/diameter-of-binary-tree&#34;&gt;Diameter of Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/subarray-sum-equals-k&#34;&gt;Subarray Sum Equals K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;581&lt;/td&gt;
&lt;td&gt;Shortest Unsorted Continuous Subarray&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;617&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-two-binary-trees&#34;&gt;Merge Two Binary Trees&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;621&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/task-scheduler&#34;&gt;Task Scheduler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;647&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings&#34;&gt;Palindromic Substrings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;739&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/daily-temperatures&#34;&gt;Daily Temperatures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;763&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-labels&#34;&gt;Partition Labels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1--two-sum&#34;&gt;1  Two Sum&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def twoSum(self, nums, target):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        &amp;quot;&amp;quot;&amp;quot;
        d = {}
        for i, n in enumerate(nums):
            complement = target - n
            if complement in d:
                return [d[complement], i]
            d[n] = i
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2--add-two-numbers&#34;&gt;2  Add Two Numbers&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        &amp;quot;&amp;quot;&amp;quot;
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        dummy_head = ListNode(0)
        curr = dummy_head
        carry = 0
        while (l1 or l2 or carry):
            x = l1.val if l1 else 0
            y = l2.val if l2 else 0
            carry, out = divmod(x + y + carry, 10)
            
            curr.next = ListNode(out)
            curr = curr.next
            
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy_head.next
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3--longest-substring-without-repeating-characters&#34;&gt;3  Longest Substring Without Repeating Characters&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class Solution:
    def lengthOfLongestSubstring(self, s: str) -&amp;gt; int:
        n = len(s)
        ans = 0
        # mp stores the current index of a character
        mp = {}

        i = 0
        # try to extend the range [i, j]
        for j in range(n):
            if s[j] in mp:
                i = max(mp[s[j]], i)

            ans = max(ans, j - i + 1)
            mp[s[j]] = j + 1

        return ans
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4--median-of-two-sorted-arrays&#34;&gt;4  Median of Two Sorted Arrays&lt;/h3&gt;
&lt;h3 id=&#34;5--longest-palindromic-substring&#34;&gt;5  Longest Palindromic Substring&lt;/h3&gt;
&lt;h3 id=&#34;10--regular-expression-matching&#34;&gt;10  Regular Expression Matching&lt;/h3&gt;
&lt;h3 id=&#34;11--container-with-most-water&#34;&gt;11  Container With Most Water&lt;/h3&gt;
&lt;h3 id=&#34;15--3sum&#34;&gt;15  3Sum&lt;/h3&gt;
&lt;h3 id=&#34;17--letter-combinations-of-a-phone-number&#34;&gt;17  Letter Combinations of a Phone Number&lt;/h3&gt;
&lt;h3 id=&#34;19--remove-nth-node-from-end-of-list&#34;&gt;19  Remove Nth Node From End of List&lt;/h3&gt;
&lt;h3 id=&#34;20--valid-parentheses&#34;&gt;20  Valid Parentheses&lt;/h3&gt;
&lt;h3 id=&#34;21--merge-two-sorted-lists&#34;&gt;21  Merge Two Sorted Lists&lt;/h3&gt;
&lt;h3 id=&#34;22--generate-parentheses&#34;&gt;22  Generate Parentheses&lt;/h3&gt;
&lt;h3 id=&#34;23--merge-k-sorted-lists&#34;&gt;23  Merge k Sorted Lists&lt;/h3&gt;
&lt;h3 id=&#34;32--longest-valid-parentheses&#34;&gt;32  Longest Valid Parentheses&lt;/h3&gt;
&lt;h3 id=&#34;33--search-in-rotated-sorted-array&#34;&gt;33  Search in Rotated Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;34--find-first-and-last-position-of-element-in-sorted-array&#34;&gt;34  Find First and Last Position of Element in Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;39--combination-sum&#34;&gt;39  Combination Sum&lt;/h3&gt;
&lt;h3 id=&#34;41--first-missing-positive&#34;&gt;41  First Missing Positive&lt;/h3&gt;
&lt;h3 id=&#34;42--trapping-rain-water&#34;&gt;42  Trapping Rain Water&lt;/h3&gt;
&lt;h3 id=&#34;45--jump-game-ii&#34;&gt;45  Jump Game II&lt;/h3&gt;
&lt;h3 id=&#34;46--permutations&#34;&gt;46  Permutations&lt;/h3&gt;
&lt;h3 id=&#34;48--rotate-image&#34;&gt;48  Rotate Image&lt;/h3&gt;
&lt;h3 id=&#34;49--group-anagrams&#34;&gt;49  Group Anagrams&lt;/h3&gt;
&lt;h3 id=&#34;53--maximum-subarray&#34;&gt;53  Maximum Subarray&lt;/h3&gt;
&lt;h3 id=&#34;55--jump-game&#34;&gt;55  Jump Game&lt;/h3&gt;
&lt;h3 id=&#34;56--merge-intervals&#34;&gt;56  Merge Intervals&lt;/h3&gt;
&lt;h3 id=&#34;62--unique-paths&#34;&gt;62  Unique Paths&lt;/h3&gt;
&lt;h3 id=&#34;64--minimum-path-sum&#34;&gt;64  Minimum Path Sum&lt;/h3&gt;
&lt;h3 id=&#34;70--climbing-stairs&#34;&gt;70  Climbing Stairs&lt;/h3&gt;
&lt;h3 id=&#34;72--edit-distance&#34;&gt;72  Edit Distance&lt;/h3&gt;
&lt;h3 id=&#34;75--sort-colors&#34;&gt;75  Sort Colors&lt;/h3&gt;
&lt;h3 id=&#34;76--minimum-window-substring&#34;&gt;76  Minimum Window Substring&lt;/h3&gt;
&lt;h3 id=&#34;78--subsets&#34;&gt;78  Subsets&lt;/h3&gt;
&lt;h3 id=&#34;79--word-search&#34;&gt;79  Word Search&lt;/h3&gt;
&lt;h3 id=&#34;84--largest-rectangle-in-histogram&#34;&gt;84  Largest Rectangle in Histogram&lt;/h3&gt;
&lt;h3 id=&#34;85--maximal-rectangle&#34;&gt;85  Maximal Rectangle&lt;/h3&gt;
&lt;h3 id=&#34;94--binary-tree-inorder-traversal&#34;&gt;94  Binary Tree Inorder Traversal&lt;/h3&gt;
&lt;h3 id=&#34;96--unique-binary-search-trees&#34;&gt;96  Unique Binary Search Trees&lt;/h3&gt;
&lt;h3 id=&#34;98--validate-binary-search-tree&#34;&gt;98  Validate Binary Search Tree&lt;/h3&gt;
&lt;h3 id=&#34;101--symmetric-tree&#34;&gt;101  Symmetric Tree&lt;/h3&gt;
&lt;h3 id=&#34;102--binary-tree-level-order-traversal&#34;&gt;102  Binary Tree Level Order Traversal&lt;/h3&gt;
&lt;h3 id=&#34;104--maximum-depth-of-binary-tree&#34;&gt;104  Maximum Depth of Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;105--construct-binary-tree-from-preorder-and-inorder-traversal&#34;&gt;105  Construct Binary Tree from Preorder and Inorder Traversal&lt;/h3&gt;
&lt;h3 id=&#34;114--flatten-binary-tree-to-linked-list&#34;&gt;114  Flatten Binary Tree to Linked List&lt;/h3&gt;
&lt;h3 id=&#34;121--best-time-to-buy-and-sell-stock&#34;&gt;121  Best Time to Buy and Sell Stock&lt;/h3&gt;
&lt;h3 id=&#34;124--binary-tree-maximum-path-sum&#34;&gt;124  Binary Tree Maximum Path Sum&lt;/h3&gt;
&lt;h3 id=&#34;128--longest-consecutive-sequence&#34;&gt;128  Longest Consecutive Sequence&lt;/h3&gt;
&lt;h3 id=&#34;136--single-number&#34;&gt;136  Single Number&lt;/h3&gt;
&lt;h3 id=&#34;138--copy-list-with-random-pointer&#34;&gt;138  Copy List with Random Pointer&lt;/h3&gt;
&lt;h3 id=&#34;139--word-break&#34;&gt;139  Word Break&lt;/h3&gt;
&lt;h3 id=&#34;141--linked-list-cycle&#34;&gt;141  Linked List Cycle&lt;/h3&gt;
&lt;h3 id=&#34;142--linked-list-cycle-ii&#34;&gt;142  Linked List Cycle II&lt;/h3&gt;
&lt;h3 id=&#34;146--lru-cache&#34;&gt;146  LRU Cache&lt;/h3&gt;
&lt;h3 id=&#34;148--sort-list&#34;&gt;148  Sort List&lt;/h3&gt;
&lt;h3 id=&#34;152--maximum-product-subarray&#34;&gt;152  Maximum Product Subarray&lt;/h3&gt;
&lt;h3 id=&#34;155--min-stack&#34;&gt;155  Min Stack&lt;/h3&gt;
&lt;h3 id=&#34;160--intersection-of-two-linked-lists&#34;&gt;160  Intersection of Two Linked Lists&lt;/h3&gt;
&lt;h3 id=&#34;169--majority-element&#34;&gt;169  Majority Element&lt;/h3&gt;
&lt;h3 id=&#34;198--house-robber&#34;&gt;198  House Robber&lt;/h3&gt;
&lt;h3 id=&#34;199--binary-tree-right-side-view&#34;&gt;199  Binary Tree Right Side View&lt;/h3&gt;
&lt;h3 id=&#34;200--number-of-islands&#34;&gt;200  Number of Islands&lt;/h3&gt;
&lt;h3 id=&#34;206--reverse-linked-list&#34;&gt;206  Reverse Linked List&lt;/h3&gt;
&lt;h3 id=&#34;207--course-schedule&#34;&gt;207  Course Schedule&lt;/h3&gt;
&lt;h3 id=&#34;208--implement-trie-prefix-tree&#34;&gt;208  Implement Trie (Prefix Tree)&lt;/h3&gt;
&lt;h3 id=&#34;215--kth-largest-element-in-an-array&#34;&gt;215  Kth Largest Element in an Array&lt;/h3&gt;
&lt;h3 id=&#34;221--maximal-square&#34;&gt;221  Maximal Square&lt;/h3&gt;
&lt;h3 id=&#34;226--invert-binary-tree&#34;&gt;226  Invert Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;230--kth-smallest-element-in-a-bst&#34;&gt;230  Kth Smallest Element in a BST&lt;/h3&gt;
&lt;h3 id=&#34;234--palindrome-linked-list&#34;&gt;234  Palindrome Linked List&lt;/h3&gt;
&lt;h3 id=&#34;236--lowest-common-ancestor-of-a-binary-tree&#34;&gt;236  Lowest Common Ancestor of a Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;238--product-of-array-except-self&#34;&gt;238  Product of Array Except Self&lt;/h3&gt;
&lt;h3 id=&#34;239--sliding-window-maximum&#34;&gt;239  Sliding Window Maximum&lt;/h3&gt;
&lt;h3 id=&#34;240--search-a-2d-matrix-ii&#34;&gt;240  Search a 2D Matrix II&lt;/h3&gt;
&lt;h3 id=&#34;253--meeting-rooms-ii&#34;&gt;253  Meeting Rooms II&lt;/h3&gt;
&lt;h3 id=&#34;279--perfect-squares&#34;&gt;279  Perfect Squares&lt;/h3&gt;
&lt;h3 id=&#34;283--move-zeroes&#34;&gt;283  Move Zeroes&lt;/h3&gt;
&lt;h3 id=&#34;287--find-the-duplicate-number&#34;&gt;287  Find the Duplicate Number&lt;/h3&gt;
&lt;h3 id=&#34;295--find-median-from-data-stream&#34;&gt;295  Find Median from Data Stream&lt;/h3&gt;
&lt;h3 id=&#34;297--serialize-and-deserialize-binary-tree&#34;&gt;297  Serialize and Deserialize Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;300--longest-increasing-subsequence&#34;&gt;300  Longest Increasing Subsequence&lt;/h3&gt;
&lt;h3 id=&#34;322--coin-change&#34;&gt;322  Coin Change&lt;/h3&gt;
&lt;h3 id=&#34;337--house-robber-iii&#34;&gt;337  House Robber III&lt;/h3&gt;
&lt;h3 id=&#34;338--counting-bits&#34;&gt;338  Counting Bits&lt;/h3&gt;
&lt;h3 id=&#34;347--top-k-frequent-elements&#34;&gt;347  Top K Frequent Elements&lt;/h3&gt;
&lt;h3 id=&#34;394--decode-string&#34;&gt;394  Decode String&lt;/h3&gt;
&lt;h3 id=&#34;406--queue-reconstruction-by-height&#34;&gt;406  Queue Reconstruction by Height&lt;/h3&gt;
&lt;h3 id=&#34;416--partition-equal-subset-sum&#34;&gt;416  Partition Equal Subset Sum&lt;/h3&gt;
&lt;h3 id=&#34;437--path-sum-iii&#34;&gt;437  Path Sum III&lt;/h3&gt;
&lt;h3 id=&#34;438--find-all-anagrams-in-a-string&#34;&gt;438  Find All Anagrams in a String&lt;/h3&gt;
&lt;h3 id=&#34;448--find-all-numbers-disappeared-in-an-array&#34;&gt;448  Find All Numbers Disappeared in an Array&lt;/h3&gt;
&lt;h3 id=&#34;494--target-sum&#34;&gt;494  Target Sum&lt;/h3&gt;
&lt;h3 id=&#34;543--diameter-of-binary-tree&#34;&gt;543  Diameter of Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;560--subarray-sum-equals-k&#34;&gt;560  Subarray Sum Equals K&lt;/h3&gt;
&lt;h3 id=&#34;581--shortest-unsorted-continuous-subarray&#34;&gt;581  Shortest Unsorted Continuous Subarray&lt;/h3&gt;
&lt;h3 id=&#34;617--merge-two-binary-trees&#34;&gt;617  Merge Two Binary Trees&lt;/h3&gt;
&lt;h3 id=&#34;621--task-scheduler&#34;&gt;621  Task Scheduler&lt;/h3&gt;
&lt;h3 id=&#34;647--palindromic-substrings&#34;&gt;647  Palindromic Substrings&lt;/h3&gt;
&lt;h3 id=&#34;739--daily-temperatures&#34;&gt;739  Daily Temperatures&lt;/h3&gt;
&lt;h3 id=&#34;763--partition-labels&#34;&gt;763  Partition Labels&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>LeetCode Top interview Questions</title>
      <link>http://www.yezheng.pro/post/interview/leetcode-top-interview/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/leetcode-top-interview/</guid>
      
        <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Train of thought&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum&#34;&gt;Two Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/add-two-numbers&#34;&gt;Add Two Numbers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-without-repeating-characters&#34;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/median-of-two-sorted-arrays&#34;&gt;Median of Two Sorted Arrays&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring&#34;&gt;Longest Palindromic Substring&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-integer&#34;&gt;Reverse Integer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/string-to-integer-atoi&#34;&gt;String to Integer (atoi)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/container-with-most-water&#34;&gt;Container With Most Water&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/roman-to-integer&#34;&gt;Roman to Integer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-prefix&#34;&gt;Longest Common Prefix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/3sum&#34;&gt;3Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/letter-combinations-of-a-phone-number&#34;&gt;Letter Combinations of a Phone Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-nth-node-from-end-of-list&#34;&gt;Remove Nth Node From End of List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-parentheses&#34;&gt;Valid Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-two-sorted-lists&#34;&gt;Merge Two Sorted Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/generate-parentheses&#34;&gt;Generate Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-k-sorted-lists&#34;&gt;Merge k Sorted Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-array&#34;&gt;Remove Duplicates from Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/implement-strstr&#34;&gt;Implement strStr()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/divide-two-integers&#34;&gt;Divide Two Integers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/search-in-rotated-sorted-array&#34;&gt;Search in Rotated Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array&#34;&gt;Find First and Last Position of Element in Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-sudoku&#34;&gt;Valid Sudoku&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/count-and-say&#34;&gt;Count and Say&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/first-missing-positive&#34;&gt;First Missing Positive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/trapping-rain-water&#34;&gt;Trapping Rain Water&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/wildcard-matching&#34;&gt;Wildcard Matching&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/permutations&#34;&gt;Permutations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/rotate-image&#34;&gt;Rotate Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/group-anagrams&#34;&gt;Group Anagrams&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/powx-n&#34;&gt;Pow(x, n)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/spiral-matrix&#34;&gt;Spiral Matrix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-intervals&#34;&gt;Merge Intervals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/plus-one&#34;&gt;Plus One&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sqrtx&#34;&gt;Sqrt(x)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/climbing-stairs&#34;&gt;Climbing Stairs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/set-matrix-zeroes&#34;&gt;Set Matrix Zeroes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-colors&#34;&gt;Sort Colors&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-window-substring&#34;&gt;Minimum Window Substring&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/subsets&#34;&gt;Subsets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-search&#34;&gt;Word Search&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-rectangle-in-histogram&#34;&gt;Largest Rectangle in Histogram&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-sorted-array&#34;&gt;Merge Sorted Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-ways&#34;&gt;Decode Ways&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-inorder-traversal&#34;&gt;Binary Tree Inorder Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/validate-binary-search-tree&#34;&gt;Validate Binary Search Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/symmetric-tree&#34;&gt;Symmetric Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-level-order-traversal&#34;&gt;Binary Tree Level Order Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal&#34;&gt;Binary Tree Zigzag Level Order Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-depth-of-binary-tree&#34;&gt;Maximum Depth of Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal&#34;&gt;Construct Binary Tree from Preorder and Inorder Traversal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree&#34;&gt;Convert Sorted Array to Binary Search Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/populating-next-right-pointers-in-each-node&#34;&gt;Populating Next Right Pointers in Each Node&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/pascals-triangle&#34;&gt;Pascal&amp;rsquo;s Triangle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock&#34;&gt;Best Time to Buy and Sell Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii&#34;&gt;Best Time to Buy and Sell Stock II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-maximum-path-sum&#34;&gt;Binary Tree Maximum Path Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-palindrome&#34;&gt;Valid Palindrome&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-ladder&#34;&gt;Word Ladder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-consecutive-sequence&#34;&gt;Longest Consecutive Sequence&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;130&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/surrounded-regions&#34;&gt;Surrounded Regions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;131&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning&#34;&gt;Palindrome Partitioning&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;134&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/gas-station&#34;&gt;Gas Station&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;136&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number&#34;&gt;Single Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/copy-list-with-random-pointer&#34;&gt;Copy List with Random Pointer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;139&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-break&#34;&gt;Word Break&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-break-ii&#34;&gt;Word Break II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle&#34;&gt;Linked List Cycle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/lru-cache&#34;&gt;LRU Cache&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-list&#34;&gt;Sort List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;149&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/max-points-on-a-line&#34;&gt;Max Points on a Line&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/evaluate-reverse-polish-notation&#34;&gt;Evaluate Reverse Polish Notation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;152&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-subarray&#34;&gt;Maximum Product Subarray&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;155&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/min-stack&#34;&gt;Min Stack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-linked-lists&#34;&gt;Intersection of Two Linked Lists&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;162&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-peak-element&#34;&gt;Find Peak Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;163&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/missing-ranges&#34;&gt;Missing Ranges&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;166&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/fraction-to-recurring-decimal&#34;&gt;Fraction to Recurring Decimal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;169&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/majority-element&#34;&gt;Majority Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/excel-sheet-column-number&#34;&gt;Excel Sheet Column Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;172&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/factorial-trailing-zeroes&#34;&gt;Factorial Trailing Zeroes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-number&#34;&gt;Largest Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;189&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/rotate-array&#34;&gt;Rotate Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-bits&#34;&gt;Reverse Bits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;191&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-1-bits&#34;&gt;Number of 1 Bits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;198&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/house-robber&#34;&gt;House Robber&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-islands&#34;&gt;Number of Islands&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/happy-number&#34;&gt;Happy Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;204&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/count-primes&#34;&gt;Count Primes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;206&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-linked-list&#34;&gt;Reverse Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;207&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule&#34;&gt;Course Schedule&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;208&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/implement-trie-prefix-tree&#34;&gt;Implement Trie (Prefix Tree)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii&#34;&gt;Course Schedule II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;212&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/word-search-ii&#34;&gt;Word Search II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;215&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array&#34;&gt;Kth Largest Element in an Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;217&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/contains-duplicate&#34;&gt;Contains Duplicate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;218&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/the-skyline-problem&#34;&gt;The Skyline Problem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;227&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/basic-calculator-ii&#34;&gt;Basic Calculator II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-bst&#34;&gt;Kth Smallest Element in a BST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-linked-list&#34;&gt;Palindrome Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree&#34;&gt;Lowest Common Ancestor of a Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;237&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/delete-node-in-a-linked-list&#34;&gt;Delete Node in a Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/product-of-array-except-self&#34;&gt;Product of Array Except Self&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;239&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sliding-window-maximum&#34;&gt;Sliding Window Maximum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;240&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/search-a-2d-matrix-ii&#34;&gt;Search a 2D Matrix II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-anagram&#34;&gt;Valid Anagram&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;251&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/flatten-2d-vector&#34;&gt;Flatten 2D Vector&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;253&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/meeting-rooms-ii&#34;&gt;Meeting Rooms II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;268&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/missing-number&#34;&gt;Missing Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;269&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/alien-dictionary&#34;&gt;Alien Dictionary&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;277&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-celebrity&#34;&gt;Find the Celebrity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;279&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares&#34;&gt;Perfect Squares&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;283&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/move-zeroes&#34;&gt;Move Zeroes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;285&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/inorder-successor-in-bst&#34;&gt;Inorder Successor in BST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;287&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-duplicate-number&#34;&gt;Find the Duplicate Number&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;289&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/game-of-life&#34;&gt;Game of Life&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;295&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-median-from-data-stream&#34;&gt;Find Median from Data Stream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;297&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/serialize-and-deserialize-binary-tree&#34;&gt;Serialize and Deserialize Binary Tree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;308&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-mutable&#34;&gt;Range Sum Query 2D - Mutable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;315&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/count-of-smaller-numbers-after-self&#34;&gt;Count of Smaller Numbers After Self&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;322&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change&#34;&gt;Coin Change&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;324&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/wiggle-sort-ii&#34;&gt;Wiggle Sort II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/power-of-three&#34;&gt;Power of Three&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;328&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/odd-even-linked-list&#34;&gt;Odd Even Linked List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;329&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-path-in-a-matrix&#34;&gt;Longest Increasing Path in a Matrix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;334&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/increasing-triplet-subsequence&#34;&gt;Increasing Triplet Subsequence&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;340&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters&#34;&gt;Longest Substring with At Most K Distinct Characters&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/flatten-nested-list-iterator&#34;&gt;Flatten Nested List Iterator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;344&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-string&#34;&gt;Reverse String&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;347&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/top-k-frequent-elements&#34;&gt;Top K Frequent Elements&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;348&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/design-tic-tac-toe&#34;&gt;Design Tic-Tac-Toe&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-arrays-ii&#34;&gt;Intersection of Two Arrays II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;371&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sum-of-two-integers&#34;&gt;Sum of Two Integers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;378&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix&#34;&gt;Kth Smallest Element in a Sorted Matrix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/insert-delete-getrandom-o1&#34;&gt;Insert Delete GetRandom O(1)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/shuffle-an-array&#34;&gt;Shuffle an Array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;387&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/first-unique-character-in-a-string&#34;&gt;First Unique Character in a String&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;395&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters&#34;&gt;Longest Substring with At Least K Repeating Characters&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;412&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/fizz-buzz&#34;&gt;Fizz Buzz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;454&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/4sum-ii&#34;&gt;4Sum II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1-two-sum&#34;&gt;1 Two Sum&lt;/h3&gt;
&lt;h3 id=&#34;2-add-two-numbers&#34;&gt;2 Add Two Numbers&lt;/h3&gt;
&lt;h3 id=&#34;3-longest-substring-without-repeating-characters&#34;&gt;3 Longest Substring Without Repeating Characters&lt;/h3&gt;
&lt;h3 id=&#34;4-median-of-two-sorted-arrays&#34;&gt;4 Median of Two Sorted Arrays&lt;/h3&gt;
&lt;h3 id=&#34;5-longest-palindromic-substring&#34;&gt;5 Longest Palindromic Substring&lt;/h3&gt;
&lt;h3 id=&#34;7-reverse-integer&#34;&gt;7 Reverse Integer&lt;/h3&gt;
&lt;h3 id=&#34;8-string-to-integer-atoi&#34;&gt;8 String to Integer (atoi)&lt;/h3&gt;
&lt;h3 id=&#34;10-regular-expression-matching&#34;&gt;10 Regular Expression Matching&lt;/h3&gt;
&lt;h3 id=&#34;11-container-with-most-water&#34;&gt;11 Container With Most Water&lt;/h3&gt;
&lt;h3 id=&#34;13-roman-to-integer&#34;&gt;13 Roman to Integer&lt;/h3&gt;
&lt;h3 id=&#34;14-longest-common-prefix&#34;&gt;14 Longest Common Prefix&lt;/h3&gt;
&lt;h3 id=&#34;15-3sum&#34;&gt;15 3Sum&lt;/h3&gt;
&lt;h3 id=&#34;17-letter-combinations-of-a-phone-number&#34;&gt;17 Letter Combinations of a Phone Number&lt;/h3&gt;
&lt;h3 id=&#34;19-remove-nth-node-from-end-of-list&#34;&gt;19 Remove Nth Node From End of List&lt;/h3&gt;
&lt;h3 id=&#34;20-valid-parentheses&#34;&gt;20 Valid Parentheses&lt;/h3&gt;
&lt;h3 id=&#34;21-merge-two-sorted-lists&#34;&gt;21 Merge Two Sorted Lists&lt;/h3&gt;
&lt;h3 id=&#34;22-generate-parentheses&#34;&gt;22 Generate Parentheses&lt;/h3&gt;
&lt;h3 id=&#34;23-merge-k-sorted-lists&#34;&gt;23 Merge k Sorted Lists&lt;/h3&gt;
&lt;h3 id=&#34;26-remove-duplicates-from-sorted-array&#34;&gt;26 Remove Duplicates from Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;28-implement-strstr&#34;&gt;28 Implement strStr()&lt;/h3&gt;
&lt;h3 id=&#34;29-divide-two-integers&#34;&gt;29 Divide Two Integers&lt;/h3&gt;
&lt;h3 id=&#34;33-search-in-rotated-sorted-array&#34;&gt;33 Search in Rotated Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;34-find-first-and-last-position-of-element-in-sorted-array&#34;&gt;34 Find First and Last Position of Element in Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;36-valid-sudoku&#34;&gt;36 Valid Sudoku&lt;/h3&gt;
&lt;h3 id=&#34;38-count-and-say&#34;&gt;38 Count and Say&lt;/h3&gt;
&lt;h3 id=&#34;41-first-missing-positive&#34;&gt;41 First Missing Positive&lt;/h3&gt;
&lt;h3 id=&#34;42-trapping-rain-water&#34;&gt;42 Trapping Rain Water&lt;/h3&gt;
&lt;h3 id=&#34;44-wildcard-matching&#34;&gt;44 Wildcard Matching&lt;/h3&gt;
&lt;h3 id=&#34;46-permutations&#34;&gt;46 Permutations&lt;/h3&gt;
&lt;h3 id=&#34;48-rotate-image&#34;&gt;48 Rotate Image&lt;/h3&gt;
&lt;h3 id=&#34;49-group-anagrams&#34;&gt;49 Group Anagrams&lt;/h3&gt;
&lt;h3 id=&#34;50-powx-n&#34;&gt;50 Pow(x, n)&lt;/h3&gt;
&lt;h3 id=&#34;53-maximum-subarray&#34;&gt;53 Maximum Subarray&lt;/h3&gt;
&lt;h3 id=&#34;54-spiral-matrix&#34;&gt;54 Spiral Matrix&lt;/h3&gt;
&lt;h3 id=&#34;55-jump-game&#34;&gt;55 Jump Game&lt;/h3&gt;
&lt;h3 id=&#34;56-merge-intervals&#34;&gt;56 Merge Intervals&lt;/h3&gt;
&lt;h3 id=&#34;62-unique-paths&#34;&gt;62 Unique Paths&lt;/h3&gt;
&lt;h3 id=&#34;66-plus-one&#34;&gt;66 Plus One&lt;/h3&gt;
&lt;h3 id=&#34;69-sqrtx&#34;&gt;69 Sqrt(x)&lt;/h3&gt;
&lt;h3 id=&#34;70-climbing-stairs&#34;&gt;70 Climbing Stairs&lt;/h3&gt;
&lt;h3 id=&#34;73-set-matrix-zeroes&#34;&gt;73 Set Matrix Zeroes&lt;/h3&gt;
&lt;h3 id=&#34;75-sort-colors&#34;&gt;75 Sort Colors&lt;/h3&gt;
&lt;h3 id=&#34;76-minimum-window-substring&#34;&gt;76 Minimum Window Substring&lt;/h3&gt;
&lt;h3 id=&#34;78-subsets&#34;&gt;78 Subsets&lt;/h3&gt;
&lt;h3 id=&#34;79-word-search&#34;&gt;79 Word Search&lt;/h3&gt;
&lt;h3 id=&#34;84-largest-rectangle-in-histogram&#34;&gt;84 Largest Rectangle in Histogram&lt;/h3&gt;
&lt;h3 id=&#34;88-merge-sorted-array&#34;&gt;88 Merge Sorted Array&lt;/h3&gt;
&lt;h3 id=&#34;91-decode-ways&#34;&gt;91 Decode Ways&lt;/h3&gt;
&lt;h3 id=&#34;94-binary-tree-inorder-traversal&#34;&gt;94 Binary Tree Inorder Traversal&lt;/h3&gt;
&lt;h3 id=&#34;98-validate-binary-search-tree&#34;&gt;98 Validate Binary Search Tree&lt;/h3&gt;
&lt;h3 id=&#34;101-symmetric-tree&#34;&gt;101 Symmetric Tree&lt;/h3&gt;
&lt;h3 id=&#34;102-binary-tree-level-order-traversal&#34;&gt;102 Binary Tree Level Order Traversal&lt;/h3&gt;
&lt;h3 id=&#34;103-binary-tree-zigzag-level-order-traversal&#34;&gt;103 Binary Tree Zigzag Level Order Traversal&lt;/h3&gt;
&lt;h3 id=&#34;104-maximum-depth-of-binary-tree&#34;&gt;104 Maximum Depth of Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;105-construct-binary-tree-from-preorder-and-inorder-traversal&#34;&gt;105 Construct Binary Tree from Preorder and Inorder Traversal&lt;/h3&gt;
&lt;h3 id=&#34;108-convert-sorted-array-to-binary-search-tree&#34;&gt;108 Convert Sorted Array to Binary Search Tree&lt;/h3&gt;
&lt;h3 id=&#34;116-populating-next-right-pointers-in-each-node&#34;&gt;116 Populating Next Right Pointers in Each Node&lt;/h3&gt;
&lt;h3 id=&#34;118-pascals-triangle&#34;&gt;118 Pascal&amp;rsquo;s Triangle&lt;/h3&gt;
&lt;h3 id=&#34;121-best-time-to-buy-and-sell-stock&#34;&gt;121 Best Time to Buy and Sell Stock&lt;/h3&gt;
&lt;h3 id=&#34;122-best-time-to-buy-and-sell-stock-ii&#34;&gt;122 Best Time to Buy and Sell Stock II&lt;/h3&gt;
&lt;h3 id=&#34;124-binary-tree-maximum-path-sum&#34;&gt;124 Binary Tree Maximum Path Sum&lt;/h3&gt;
&lt;h3 id=&#34;125-valid-palindrome&#34;&gt;125 Valid Palindrome&lt;/h3&gt;
&lt;h3 id=&#34;127-word-ladder&#34;&gt;127 Word Ladder&lt;/h3&gt;
&lt;h3 id=&#34;128-longest-consecutive-sequence&#34;&gt;128 Longest Consecutive Sequence&lt;/h3&gt;
&lt;h3 id=&#34;130-surrounded-regions&#34;&gt;130 Surrounded Regions&lt;/h3&gt;
&lt;h3 id=&#34;131-palindrome-partitioning&#34;&gt;131 Palindrome Partitioning&lt;/h3&gt;
&lt;h3 id=&#34;134-gas-station&#34;&gt;134 Gas Station&lt;/h3&gt;
&lt;h3 id=&#34;136-single-number&#34;&gt;136 Single Number&lt;/h3&gt;
&lt;h3 id=&#34;138-copy-list-with-random-pointer&#34;&gt;138 Copy List with Random Pointer&lt;/h3&gt;
&lt;h3 id=&#34;139-word-break&#34;&gt;139 Word Break&lt;/h3&gt;
&lt;h3 id=&#34;140-word-break-ii&#34;&gt;140 Word Break II&lt;/h3&gt;
&lt;h3 id=&#34;141-linked-list-cycle&#34;&gt;141 Linked List Cycle&lt;/h3&gt;
&lt;h3 id=&#34;146-lru-cache&#34;&gt;146 LRU Cache&lt;/h3&gt;
&lt;h3 id=&#34;148-sort-list&#34;&gt;148 Sort List&lt;/h3&gt;
&lt;h3 id=&#34;149-max-points-on-a-line&#34;&gt;149 Max Points on a Line&lt;/h3&gt;
&lt;h3 id=&#34;150-evaluate-reverse-polish-notation&#34;&gt;150 Evaluate Reverse Polish Notation&lt;/h3&gt;
&lt;h3 id=&#34;152-maximum-product-subarray&#34;&gt;152 Maximum Product Subarray&lt;/h3&gt;
&lt;h3 id=&#34;155-min-stack&#34;&gt;155 Min Stack&lt;/h3&gt;
&lt;h3 id=&#34;160-intersection-of-two-linked-lists&#34;&gt;160 Intersection of Two Linked Lists&lt;/h3&gt;
&lt;h3 id=&#34;162-find-peak-element&#34;&gt;162 Find Peak Element&lt;/h3&gt;
&lt;h3 id=&#34;163-missing-ranges&#34;&gt;163 Missing Ranges&lt;/h3&gt;
&lt;h3 id=&#34;166-fraction-to-recurring-decimal&#34;&gt;166 Fraction to Recurring Decimal&lt;/h3&gt;
&lt;h3 id=&#34;169-majority-element&#34;&gt;169 Majority Element&lt;/h3&gt;
&lt;h3 id=&#34;171-excel-sheet-column-number&#34;&gt;171 Excel Sheet Column Number&lt;/h3&gt;
&lt;h3 id=&#34;172-factorial-trailing-zeroes&#34;&gt;172 Factorial Trailing Zeroes&lt;/h3&gt;
&lt;h3 id=&#34;179-largest-number&#34;&gt;179 Largest Number&lt;/h3&gt;
&lt;h3 id=&#34;189-rotate-array&#34;&gt;189 Rotate Array&lt;/h3&gt;
&lt;h3 id=&#34;190-reverse-bits&#34;&gt;190 Reverse Bits&lt;/h3&gt;
&lt;h3 id=&#34;191-number-of-1-bits&#34;&gt;191 Number of 1 Bits&lt;/h3&gt;
&lt;h3 id=&#34;198-house-robber&#34;&gt;198 House Robber&lt;/h3&gt;
&lt;h3 id=&#34;200-number-of-islands&#34;&gt;200 Number of Islands&lt;/h3&gt;
&lt;h3 id=&#34;202-happy-number&#34;&gt;202 Happy Number&lt;/h3&gt;
&lt;h3 id=&#34;204-count-primes&#34;&gt;204 Count Primes&lt;/h3&gt;
&lt;h3 id=&#34;206-reverse-linked-list&#34;&gt;206 Reverse Linked List&lt;/h3&gt;
&lt;h3 id=&#34;207-course-schedule&#34;&gt;207 Course Schedule&lt;/h3&gt;
&lt;h3 id=&#34;208-implement-trie-prefix-tree&#34;&gt;208 Implement Trie (Prefix Tree)&lt;/h3&gt;
&lt;h3 id=&#34;210-course-schedule-ii&#34;&gt;210 Course Schedule II&lt;/h3&gt;
&lt;h3 id=&#34;212-word-search-ii&#34;&gt;212 Word Search II&lt;/h3&gt;
&lt;h3 id=&#34;215-kth-largest-element-in-an-array&#34;&gt;215 Kth Largest Element in an Array&lt;/h3&gt;
&lt;h3 id=&#34;217-contains-duplicate&#34;&gt;217 Contains Duplicate&lt;/h3&gt;
&lt;h3 id=&#34;218-the-skyline-problem&#34;&gt;218 The Skyline Problem&lt;/h3&gt;
&lt;h3 id=&#34;227-basic-calculator-ii&#34;&gt;227 Basic Calculator II&lt;/h3&gt;
&lt;h3 id=&#34;230-kth-smallest-element-in-a-bst&#34;&gt;230 Kth Smallest Element in a BST&lt;/h3&gt;
&lt;h3 id=&#34;234-palindrome-linked-list&#34;&gt;234 Palindrome Linked List&lt;/h3&gt;
&lt;h3 id=&#34;236-lowest-common-ancestor-of-a-binary-tree&#34;&gt;236 Lowest Common Ancestor of a Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;237-delete-node-in-a-linked-list&#34;&gt;237 Delete Node in a Linked List&lt;/h3&gt;
&lt;h3 id=&#34;238-product-of-array-except-self&#34;&gt;238 Product of Array Except Self&lt;/h3&gt;
&lt;h3 id=&#34;239-sliding-window-maximum&#34;&gt;239 Sliding Window Maximum&lt;/h3&gt;
&lt;h3 id=&#34;240-search-a-2d-matrix-ii&#34;&gt;240 Search a 2D Matrix II&lt;/h3&gt;
&lt;h3 id=&#34;242-valid-anagram&#34;&gt;242 Valid Anagram&lt;/h3&gt;
&lt;h3 id=&#34;251-flatten-2d-vector&#34;&gt;251 Flatten 2D Vector&lt;/h3&gt;
&lt;h3 id=&#34;253-meeting-rooms-ii&#34;&gt;253 Meeting Rooms II&lt;/h3&gt;
&lt;h3 id=&#34;268-missing-number&#34;&gt;268 Missing Number&lt;/h3&gt;
&lt;h3 id=&#34;269-alien-dictionary&#34;&gt;269 Alien Dictionary&lt;/h3&gt;
&lt;h3 id=&#34;277-find-the-celebrity&#34;&gt;277 Find the Celebrity&lt;/h3&gt;
&lt;h3 id=&#34;279-perfect-squares&#34;&gt;279 Perfect Squares&lt;/h3&gt;
&lt;h3 id=&#34;283-move-zeroes&#34;&gt;283 Move Zeroes&lt;/h3&gt;
&lt;h3 id=&#34;285-inorder-successor-in-bst&#34;&gt;285 Inorder Successor in BST&lt;/h3&gt;
&lt;h3 id=&#34;287-find-the-duplicate-number&#34;&gt;287 Find the Duplicate Number&lt;/h3&gt;
&lt;h3 id=&#34;289-game-of-life&#34;&gt;289 Game of Life&lt;/h3&gt;
&lt;h3 id=&#34;295-find-median-from-data-stream&#34;&gt;295 Find Median from Data Stream&lt;/h3&gt;
&lt;h3 id=&#34;297-serialize-and-deserialize-binary-tree&#34;&gt;297 Serialize and Deserialize Binary Tree&lt;/h3&gt;
&lt;h3 id=&#34;300-longest-increasing-subsequence&#34;&gt;300 Longest Increasing Subsequence&lt;/h3&gt;
&lt;h3 id=&#34;308-range-sum-query-2d---mutable&#34;&gt;308 Range Sum Query 2D - Mutable&lt;/h3&gt;
&lt;h3 id=&#34;315-count-of-smaller-numbers-after-self&#34;&gt;315 Count of Smaller Numbers After Self&lt;/h3&gt;
&lt;h3 id=&#34;322-coin-change&#34;&gt;322 Coin Change&lt;/h3&gt;
&lt;h3 id=&#34;324-wiggle-sort-ii&#34;&gt;324 Wiggle Sort II&lt;/h3&gt;
&lt;h3 id=&#34;326-power-of-three&#34;&gt;326 Power of Three&lt;/h3&gt;
&lt;h3 id=&#34;328-odd-even-linked-list&#34;&gt;328 Odd Even Linked List&lt;/h3&gt;
&lt;h3 id=&#34;329-longest-increasing-path-in-a-matrix&#34;&gt;329 Longest Increasing Path in a Matrix&lt;/h3&gt;
&lt;h3 id=&#34;334-increasing-triplet-subsequence&#34;&gt;334 Increasing Triplet Subsequence&lt;/h3&gt;
&lt;h3 id=&#34;340-longest-substring-with-at-most-k-distinct-characters&#34;&gt;340 Longest Substring with At Most K Distinct Characters&lt;/h3&gt;
&lt;h3 id=&#34;341-flatten-nested-list-iterator&#34;&gt;341 Flatten Nested List Iterator&lt;/h3&gt;
&lt;h3 id=&#34;344-reverse-string&#34;&gt;344 Reverse String&lt;/h3&gt;
&lt;h3 id=&#34;347-top-k-frequent-elements&#34;&gt;347 Top K Frequent Elements&lt;/h3&gt;
&lt;h3 id=&#34;348-design-tic-tac-toe&#34;&gt;348 Design Tic-Tac-Toe&lt;/h3&gt;
&lt;h3 id=&#34;350-intersection-of-two-arrays-ii&#34;&gt;350 Intersection of Two Arrays II&lt;/h3&gt;
&lt;h3 id=&#34;371-sum-of-two-integers&#34;&gt;371 Sum of Two Integers&lt;/h3&gt;
&lt;h3 id=&#34;378-kth-smallest-element-in-a-sorted-matrix&#34;&gt;378 Kth Smallest Element in a Sorted Matrix&lt;/h3&gt;
&lt;h3 id=&#34;380-insert-delete-getrandom-o1&#34;&gt;380 Insert Delete GetRandom O(1)&lt;/h3&gt;
&lt;h3 id=&#34;384-shuffle-an-array&#34;&gt;384 Shuffle an Array&lt;/h3&gt;
&lt;h3 id=&#34;387-first-unique-character-in-a-string&#34;&gt;387 First Unique Character in a String&lt;/h3&gt;
&lt;h3 id=&#34;395-longest-substring-with-at-least-k-repeating-characters&#34;&gt;395 Longest Substring with At Least K Repeating Characters&lt;/h3&gt;
&lt;h3 id=&#34;412-fizz-buzz&#34;&gt;412 Fizz Buzz&lt;/h3&gt;
&lt;h3 id=&#34;454-4sum-ii&#34;&gt;454 4Sum II&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>operation systems interview questions</title>
      <link>http://www.yezheng.pro/post/interview/operating-systems/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/operating-systems/</guid>
      
        <description>&lt;h2 id=&#34;1-selectpoll和epoll&#34;&gt;1 select,poll和epoll&lt;/h2&gt;
&lt;p&gt;其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了.&lt;/p&gt;
&lt;p&gt;这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/Anker/p/3265058.html&#34;&gt;selec,poll和epoll区别总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本上select有3个缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接数受限&lt;/li&gt;
&lt;li&gt;查找配对速度慢&lt;/li&gt;
&lt;li&gt;数据由内核拷贝到用户态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;poll改善了第一个缺点&lt;/p&gt;
&lt;p&gt;epoll改了三个缺点.&lt;/p&gt;
&lt;p&gt;关于epoll的: &lt;a href=&#34;http://www.cnblogs.com/my_life/articles/3968782.html&#34;&gt;http://www.cnblogs.com/my_life/articles/3968782.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-调度算法&#34;&gt;2 调度算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先来先服务(FCFS, First Come First Serve)&lt;/li&gt;
&lt;li&gt;短作业优先(SJF, Shortest Job First)&lt;/li&gt;
&lt;li&gt;最高优先权调度(Priority Scheduling)&lt;/li&gt;
&lt;li&gt;时间片轮转(RR, Round Robin)&lt;/li&gt;
&lt;li&gt;多级反馈队列调度(multilevel feedback queue scheduling)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的调度算法总结:http://www.jianshu.com/p/6edf8174c1eb&lt;/p&gt;
&lt;p&gt;实时调度算法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最早截至时间优先 EDF&lt;/li&gt;
&lt;li&gt;最低松弛度优先 LLF&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-死锁&#34;&gt;3 死锁&lt;/h2&gt;
&lt;p&gt;原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;竞争资源&lt;/li&gt;
&lt;li&gt;程序推进顺序不当&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必要条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;请求和保持条件&lt;/li&gt;
&lt;li&gt;不剥夺条件&lt;/li&gt;
&lt;li&gt;环路等待条件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;处理死锁基本方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预防死锁(摒弃除1以外的条件)&lt;/li&gt;
&lt;li&gt;避免死锁(银行家算法)&lt;/li&gt;
&lt;li&gt;检测死锁(资源分配图)&lt;/li&gt;
&lt;li&gt;解除死锁
&lt;ol&gt;
&lt;li&gt;剥夺资源&lt;/li&gt;
&lt;li&gt;撤销进程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;死锁概念处理策略详细介绍:https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html&lt;/p&gt;
&lt;h2 id=&#34;4-程序编译与链接&#34;&gt;4 程序编译与链接&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/11/compiler.html&#34;&gt;http://www.ruanyifeng.com/blog/2014/11/compiler.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking)&lt;/p&gt;
&lt;p&gt;以c语言为例:&lt;/p&gt;
&lt;h3 id=&#34;1-预处理&#34;&gt;1 预处理&lt;/h3&gt;
&lt;p&gt;预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将所有的“#define”删除，并展开所用的宏定义&lt;/li&gt;
&lt;li&gt;处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif”&lt;/li&gt;
&lt;li&gt;处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的&lt;/li&gt;
&lt;li&gt;删除所有注释&lt;/li&gt;
&lt;li&gt;添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号&lt;/li&gt;
&lt;li&gt;保留所有的#pragma编译器指令。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-编译&#34;&gt;2 编译&lt;/h3&gt;
&lt;p&gt;编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。&lt;/p&gt;
&lt;h3 id=&#34;3-汇编&#34;&gt;3 汇编&lt;/h3&gt;
&lt;p&gt;汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File)&lt;/p&gt;
&lt;h3 id=&#34;4-链接&#34;&gt;4 链接&lt;/h3&gt;
&lt;p&gt;链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。 链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。&lt;/p&gt;
&lt;h2 id=&#34;5-静态链接和动态链接&#34;&gt;5 静态链接和动态链接&lt;/h2&gt;
&lt;p&gt;静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来 静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库&lt;/p&gt;
&lt;p&gt;动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序&lt;/p&gt;
&lt;h2 id=&#34;6-虚拟内存技术&#34;&gt;6 虚拟内存技术&lt;/h2&gt;
&lt;p&gt;虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统.&lt;/p&gt;
&lt;h2 id=&#34;7-分页和分段&#34;&gt;7 分页和分段&lt;/h2&gt;
&lt;p&gt;分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。&lt;/p&gt;
&lt;p&gt;分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。&lt;/p&gt;
&lt;h3 id=&#34;分页与分段的主要区别&#34;&gt;分页与分段的主要区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.&lt;/li&gt;
&lt;li&gt;页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.&lt;/li&gt;
&lt;li&gt;分页的作业地址空间是一维的.分段的地址空间是二维的.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-页面置换算法&#34;&gt;8 页面置换算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;最佳置换算法OPT:不可能实现&lt;/li&gt;
&lt;li&gt;先进先出FIFO&lt;/li&gt;
&lt;li&gt;最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换.&lt;/li&gt;
&lt;li&gt;clock算法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-边沿触发和水平触发&#34;&gt;9 边沿触发和水平触发&lt;/h2&gt;
&lt;p&gt;边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件&lt;/p&gt;
&lt;h2 id=&#34;10-unix进程间通信方式ipc&#34;&gt;10 unix进程间通信方式(IPC)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。&lt;/li&gt;
&lt;li&gt;命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。&lt;/li&gt;
&lt;li&gt;信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。&lt;/li&gt;
&lt;li&gt;消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺&lt;/li&gt;
&lt;li&gt;共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。&lt;/li&gt;
&lt;li&gt;内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。&lt;/li&gt;
&lt;li&gt;信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。&lt;/li&gt;
&lt;li&gt;套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>python interview questions</title>
      <link>http://www.yezheng.pro/post/interview/python/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/interview/python/</guid>
      
        <description>&lt;h2 id=&#34;1-python的函数参数传递&#34;&gt;1 Python的函数参数传递&lt;/h2&gt;
&lt;p&gt;看两个例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = 1
def fun(a):
    a = 2
fun(a)
print a  # 1
a = []
def fun(a):
    a.append(1)
fun(a)
print a  # [1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;id&lt;/code&gt;来看引用&lt;code&gt;a&lt;/code&gt;的内存地址可以比较理解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = 1
def fun(a):
    print &amp;quot;func_in&amp;quot;,id(a)   # func_in 41322472
    a = 2
    print &amp;quot;re-point&amp;quot;,id(a), id(2)   # re-point 41322448 41322448
print &amp;quot;func_out&amp;quot;,id(a), id(1)  # func_out 41322472 41322472
fun(a)
print a  # 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：具体的值在不同电脑上运行时可能不同。&lt;/p&gt;
&lt;p&gt;可以看到，在执行完&lt;code&gt;a = 2&lt;/code&gt;之后，&lt;code&gt;a&lt;/code&gt;引用中保存的值，即内存地址发生变化，由原来&lt;code&gt;1&lt;/code&gt;对象的所在的地址变成了&lt;code&gt;2&lt;/code&gt;这个实体对象的内存地址。&lt;/p&gt;
&lt;p&gt;而第2个例子&lt;code&gt;a&lt;/code&gt;引用保存的内存值就不会发生变化：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = []
def fun(a):
    print &amp;quot;func_in&amp;quot;,id(a)  # func_in 53629256
    a.append(1)
print &amp;quot;func_out&amp;quot;,id(a)     # func_out 53629256
fun(a)
print a  # [1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点)&lt;/p&gt;
&lt;p&gt;当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.&lt;/p&gt;
&lt;p&gt;如果还不明白的话,这里有更好的解释: &lt;a href=&#34;http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference&#34;&gt;http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-python中的元类metaclass&#34;&gt;2 Python中的元类(metaclass)&lt;/h2&gt;
&lt;p&gt;这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&lt;/p&gt;
&lt;h2 id=&#34;3-staticmethod和classmethod&#34;&gt;3 @staticmethod和@classmethod&lt;/h2&gt;
&lt;p&gt;Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def foo(x):
    print &amp;quot;executing foo(%s)&amp;quot;%(x)

class A(object):
    def foo(self,x):
        print &amp;quot;executing foo(%s,%s)&amp;quot;%(self,x)

    @classmethod
    def class_foo(cls,x):
        print &amp;quot;executing class_foo(%s,%s)&amp;quot;%(cls,x)

    @staticmethod
    def static_foo(x):
        print &amp;quot;executing static_foo(%s)&amp;quot;%x

a=A()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用&lt;code&gt;foo(x)&lt;/code&gt;,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是&lt;code&gt;foo(self, x)&lt;/code&gt;,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的&lt;code&gt;a.foo(x)&lt;/code&gt;(其实是&lt;code&gt;foo(a, x)&lt;/code&gt;).类方法一样,只不过它传递的是类而不是实例,&lt;code&gt;A.class_foo(x)&lt;/code&gt;.注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.&lt;/p&gt;
&lt;p&gt;对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用&lt;code&gt;a.static_foo(x)&lt;/code&gt;或者&lt;code&gt;A.static_foo(x)&lt;/code&gt;来调用.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\&lt;/th&gt;
&lt;th&gt;实例方法&lt;/th&gt;
&lt;th&gt;类方法&lt;/th&gt;
&lt;th&gt;静态方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a = A()&lt;/td&gt;
&lt;td&gt;a.foo(x)&lt;/td&gt;
&lt;td&gt;a.class_foo(x)&lt;/td&gt;
&lt;td&gt;a.static_foo(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;不可用&lt;/td&gt;
&lt;td&gt;A.class_foo(x)&lt;/td&gt;
&lt;td&gt;A.static_foo(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更多关于这个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python&#34;&gt;http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://realpython.com/blog/python/instance-class-and-static-methods-demystified/&#34;&gt;https://realpython.com/blog/python/instance-class-and-static-methods-demystified/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-类变量和实例变量&#34;&gt;4 类变量和实例变量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;类变量：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;实例变量：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实例化之后，每个实例单独拥有的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class Test(object):  
    num_of_instance = 0  
    def __init__(self, name):  
        self.name = name  
        Test.num_of_instance += 1  
  
if __name__ == &#39;__main__&#39;:  
    print Test.num_of_instance   # 0
    t1 = Test(&#39;jack&#39;)  
    print Test.num_of_instance   # 1
    t2 = Test(&#39;lucy&#39;)  
    print t1.name , t1.num_of_instance  # jack 2
    print t2.name , t2.num_of_instance  # lucy 2
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;补充的例子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class Person:
    name=&amp;quot;aaa&amp;quot;

p1=Person()
p2=Person()
p1.name=&amp;quot;bbb&amp;quot;
print p1.name  # bbb
print p2.name  # aaa
print Person.name  # aaa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里&lt;code&gt;p1.name=&amp;quot;bbb&amp;quot;&lt;/code&gt;是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,&lt;code&gt;p1.name&lt;/code&gt;一开始是指向的类变量&lt;code&gt;name=&amp;quot;aaa&amp;quot;&lt;/code&gt;,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.&lt;/p&gt;
&lt;p&gt;可以看看下面的例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Person:
    name=[]

p1=Person()
p2=Person()
p1.name.append(1)
print p1.name  # [1]
print p2.name  # [1]
print Person.name  # [1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考:http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block&lt;/p&gt;
&lt;h2 id=&#34;5-python自省&#34;&gt;5 Python自省&lt;/h2&gt;
&lt;p&gt;这个也是python彪悍的特性.&lt;/p&gt;
&lt;p&gt;自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = [1,2,3]
b = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3}
c = True
print type(a),type(b),type(c) # &amp;lt;type &#39;list&#39;&amp;gt; &amp;lt;type &#39;dict&#39;&amp;gt; &amp;lt;type &#39;bool&#39;&amp;gt;
print isinstance(a,list)  # True
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6-字典推导式&#34;&gt;6 字典推导式&lt;/h2&gt;
&lt;p&gt;可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d = {key: value for (key, value) in iterable}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;7-python中单下划线和双下划线&#34;&gt;7 Python中单下划线和双下划线&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = &amp;quot;Hello&amp;quot;
...             self._semiprivate = &amp;quot;, world!&amp;quot;
...
&amp;gt;&amp;gt;&amp;gt; mc = MyClass()
&amp;gt;&amp;gt;&amp;gt; print mc.__superprivate
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: myClass instance has no attribute &#39;__superprivate&#39;
&amp;gt;&amp;gt;&amp;gt; print mc._semiprivate
, world!
&amp;gt;&amp;gt;&amp;gt; print mc.__dict__
{&#39;_MyClass__superprivate&#39;: &#39;Hello&#39;, &#39;_semiprivate&#39;: &#39;, world!&#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__foo__&lt;/code&gt;:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如&lt;code&gt;__init__()&lt;/code&gt;,&lt;code&gt;__del__()&lt;/code&gt;,&lt;code&gt;__call__()&lt;/code&gt;这些特殊方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_foo&lt;/code&gt;:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__foo&lt;/code&gt;:这个有真正的意义:解析器用&lt;code&gt;_classname__foo&lt;/code&gt;来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.&lt;/p&gt;
&lt;p&gt;详情见:http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python&lt;/p&gt;
&lt;p&gt;或者: &lt;a href=&#34;http://www.zhihu.com/question/19754941&#34;&gt;http://www.zhihu.com/question/19754941&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;8-字符串格式化和format&#34;&gt;8 字符串格式化:%和.format&lt;/h2&gt;
&lt;p&gt;.format在许多方面看起来更便利.对于&lt;code&gt;%&lt;/code&gt;最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;hi there %s&amp;quot; % name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;hi there %s&amp;quot; % (name,)   # 提供一个单元素的数组而不是一个参数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.&lt;/p&gt;
&lt;p&gt;你为什么不用它?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不知道它(在读这个之前)&lt;/li&gt;
&lt;li&gt;为了和Python2.5兼容(譬如logging库建议使用&lt;code&gt;%&lt;/code&gt;(&lt;a href=&#34;https://github.com/taizilongxu/interview_python/issues/4&#34;&gt;issue #4&lt;/a&gt;))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format&#34;&gt;http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;9-迭代器和生成器&#34;&gt;9 迭代器和生成器&lt;/h2&gt;
&lt;p&gt;这个是stackoverflow里python排名第一的问题,值得一看: &lt;a href=&#34;http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python&#34;&gt;http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是中文版: &lt;a href=&#34;http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html&#34;&gt;http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有个关于生成器的创建问题面试官有考： 问： 将列表生成式中[]改成() 之后数据结构是否改变？ 答案：是，从列表变为生成器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; L = [x*x for x in range(10)]
&amp;gt;&amp;gt;&amp;gt; L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&amp;gt;&amp;gt;&amp;gt; g = (x*x for x in range(10))
&amp;gt;&amp;gt;&amp;gt; g
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000028F8B774200&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&amp;gt;generator&lt;/p&gt;
&lt;h2 id=&#34;10-args-and-kwargs&#34;&gt;10 &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;用&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;只是为了方便并没有强制使用它们.&lt;/p&gt;
&lt;p&gt;当你不确定你的函数里将要传递多少参数时你可以用&lt;code&gt;*args&lt;/code&gt;.例如,它可以传递任意数量的参数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def print_everything(*args):
        for count, thing in enumerate(args):
...         print &#39;{0}. {1}&#39;.format(count, thing)
...
&amp;gt;&amp;gt;&amp;gt; print_everything(&#39;apple&#39;, &#39;banana&#39;, &#39;cabbage&#39;)
0. apple
1. banana
2. cabbage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相似的,&lt;code&gt;**kwargs&lt;/code&gt;允许你使用没有事先定义的参数名:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def table_things(**kwargs):
...     for name, value in kwargs.items():
...         print &#39;{0} = {1}&#39;.format(name, value)
...
&amp;gt;&amp;gt;&amp;gt; table_things(apple = &#39;fruit&#39;, cabbage = &#39;vegetable&#39;)
cabbage = vegetable
apple = fruit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;.命名参数在列表的最前端.例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def table_things(titlestring, **kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;可以同时在函数的定义中,但是&lt;code&gt;*args&lt;/code&gt;必须在&lt;code&gt;**kwargs&lt;/code&gt;前面.&lt;/p&gt;
&lt;p&gt;当调用函数时你也可以用&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;**&lt;/code&gt;语法.例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def print_three_things(a, b, c):
...     print &#39;a = {0}, b = {1}, c = {2}&#39;.format(a,b,c)
...
&amp;gt;&amp;gt;&amp;gt; mylist = [&#39;aardvark&#39;, &#39;baboon&#39;, &#39;cat&#39;]
&amp;gt;&amp;gt;&amp;gt; print_three_things(*mylist)

a = aardvark, b = baboon, c = cat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/3394835/args-and-kwargs&#34;&gt;http://stackoverflow.com/questions/3394835/args-and-kwargs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-面向切面编程aop和装饰器&#34;&gt;11 面向切面编程AOP和装饰器&lt;/h2&gt;
&lt;p&gt;这个AOP一听起来有点懵,同学面阿里的时候就被问懵了&amp;hellip;&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，&lt;strong&gt;装饰器的作用就是为已经存在的对象添加额外的功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题比较大,推荐: &lt;a href=&#34;http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python&#34;&gt;http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文: &lt;a href=&#34;http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html&#34;&gt;http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;12-鸭子类型&#34;&gt;12 鸭子类型&lt;/h2&gt;
&lt;p&gt;“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”&lt;/p&gt;
&lt;p&gt;我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。&lt;/p&gt;
&lt;p&gt;比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。&lt;/p&gt;
&lt;p&gt;又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.&lt;/p&gt;
&lt;p&gt;鸭子类型在动态语言中经常使用，非常灵活，使得python不像java那样专门去弄一大堆的设计模式。&lt;/p&gt;
&lt;h2 id=&#34;13-python中重载&#34;&gt;13 Python中重载&lt;/h2&gt;
&lt;p&gt;引自知乎:http://www.zhihu.com/question/20053359&lt;/p&gt;
&lt;p&gt;函数重载主要是为了解决两个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变参数类型。&lt;/li&gt;
&lt;li&gt;可变参数个数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。&lt;/p&gt;
&lt;p&gt;好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。&lt;/p&gt;
&lt;p&gt;那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。&lt;/p&gt;
&lt;p&gt;好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。&lt;/p&gt;
&lt;h2 id=&#34;14-新式类和旧式类&#34;&gt;14 新式类和旧式类&lt;/h2&gt;
&lt;p&gt;这个面试官问了,我说了老半天,不知道他问的真正意图是什么.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python&#34;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章很好的介绍了新式类的特性: &lt;a href=&#34;http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html&#34;&gt;http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类继承是根据C3算法,旧式类是深度优先),&amp;lt;Python核心编程&amp;gt;里讲的也很多.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个旧式类的深度优先的例子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class A():
    def foo1(self):
        print &amp;quot;A&amp;quot;
class B(A):
    def foo2(self):
        pass
class C(A):
    def foo1(self):
        print &amp;quot;C&amp;quot;
class D(B, C):
    pass

d = D()
d.foo1()

# A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;按照经典类的查找顺序&lt;code&gt;从左到右深度优先&lt;/code&gt;的规则，在访问&lt;code&gt;d.foo1()&lt;/code&gt;的时候,D这个类是没有的..那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;15-__new__和__init__的区别&#34;&gt;15 &lt;code&gt;__new__&lt;/code&gt;和&lt;code&gt;__init__&lt;/code&gt;的区别&lt;/h2&gt;
&lt;p&gt;这个&lt;code&gt;__new__&lt;/code&gt;确实很少见到,先做了解吧.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt;是一个静态方法,而&lt;code&gt;__init__&lt;/code&gt;是一个实例方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt;方法会返回一个创建的实例,而&lt;code&gt;__init__&lt;/code&gt;什么都不返回.&lt;/li&gt;
&lt;li&gt;只有在&lt;code&gt;__new__&lt;/code&gt;返回一个cls的实例时后面的&lt;code&gt;__init__&lt;/code&gt;才能被调用.&lt;/li&gt;
&lt;li&gt;当创建一个新实例时调用&lt;code&gt;__new__&lt;/code&gt;,初始化一个实例时用&lt;code&gt;__init__&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init&#34;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps: &lt;code&gt;__metaclass__&lt;/code&gt;是创建类时起作用.所以我们可以分别使用&lt;code&gt;__metaclass__&lt;/code&gt;,&lt;code&gt;__new__&lt;/code&gt;和&lt;code&gt;__init__&lt;/code&gt;来分别在类创建,实例创建和实例初始化的时候做一些小手脚.&lt;/p&gt;
&lt;h2 id=&#34;16-单例模式&#34;&gt;16 单例模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__new__()&lt;/code&gt;在&lt;code&gt;__init__()&lt;/code&gt;之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例 &lt;strong&gt;这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-使用__new__方法&#34;&gt;1 使用&lt;code&gt;__new__&lt;/code&gt;方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class Singleton(object):
    def __new__(cls, *args, **kw):
        if not hasattr(cls, &#39;_instance&#39;):
            orig = super(Singleton, cls)
            cls._instance = orig.__new__(cls, *args, **kw)
        return cls._instance

class MyClass(Singleton):
    a = 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-共享属性&#34;&gt;2 共享属性&lt;/h3&gt;
&lt;p&gt;创建实例时把所有实例的&lt;code&gt;__dict__&lt;/code&gt;指向同一个字典,这样它们具有相同的属性和方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Borg(object):
    _state = {}
    def __new__(cls, *args, **kw):
        ob = super(Borg, cls).__new__(cls, *args, **kw)
        ob.__dict__ = cls._state
        return ob

class MyClass2(Borg):
    a = 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-装饰器版本&#34;&gt;3 装饰器版本&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def singleton(cls):
    instances = {}
    def getinstance(*args, **kw):
        if cls not in instances:
            instances[cls] = cls(*args, **kw)
        return instances[cls]
    return getinstance

@singleton
class MyClass:
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-import方法&#34;&gt;4 import方法&lt;/h3&gt;
&lt;p&gt;作为python的模块是天然的单例模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysingleton.py
class My_Singleton(object):
    def foo(self):
        pass

my_singleton = My_Singleton()

# to use
from mysingleton import my_singleton

my_singleton.foo()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://python.jobbole.com/87294/&#34;&gt;单例模式伯乐在线详细解释&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;17-python中的作用域&#34;&gt;17 Python中的作用域&lt;/h2&gt;
&lt;p&gt;Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。&lt;/p&gt;
&lt;p&gt;当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：&lt;/p&gt;
&lt;p&gt;本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）&lt;/p&gt;
&lt;h2 id=&#34;18-gil线程全局锁&#34;&gt;18 GIL线程全局锁&lt;/h2&gt;
&lt;p&gt;线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.&lt;strong&gt;对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;见&lt;a href=&#34;http://www.oschina.net/translate/pythons-hardest-problem&#34;&gt;Python 最难的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).&lt;/p&gt;
&lt;h2 id=&#34;19-协程&#34;&gt;19 协程&lt;/h2&gt;
&lt;p&gt;知乎被问到了,呵呵哒,跪了&lt;/p&gt;
&lt;p&gt;简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.&lt;/p&gt;
&lt;p&gt;Python里最常见的yield就是协程的思想!可以查看第九个问题.&lt;/p&gt;
&lt;h2 id=&#34;20-闭包&#34;&gt;20 闭包&lt;/h2&gt;
&lt;p&gt;闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。&lt;/p&gt;
&lt;p&gt;当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须有一个内嵌函数&lt;/li&gt;
&lt;li&gt;内嵌函数必须引用外部函数中的变量&lt;/li&gt;
&lt;li&gt;外部函数的返回值必须是内嵌函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.&lt;/p&gt;
&lt;p&gt;重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.&lt;/p&gt;
&lt;p&gt;闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.&lt;/p&gt;
&lt;h2 id=&#34;21-lambda函数&#34;&gt;21 lambda函数&lt;/h2&gt;
&lt;p&gt;其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.&lt;/p&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.zhihu.com/question/20125256&#34;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;22-python函数式编程&#34;&gt;22 Python函数式编程&lt;/h2&gt;
&lt;p&gt;这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.&lt;/p&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://coolshell.cn/articles/10822.html&#34;&gt;酷壳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python中函数式编程支持:&lt;/p&gt;
&lt;p&gt;filter 函数的功能相当于过滤器。调用一个布尔函数&lt;code&gt;bool_func&lt;/code&gt;来迭代遍历每个seq中的元素；返回一个使&lt;code&gt;bool_seq&lt;/code&gt;返回值为true的元素的序列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;a = [1,2,3,4,5,6,7]
&amp;gt;&amp;gt;&amp;gt;b = filter(lambda x: x &amp;gt; 5, a)
&amp;gt;&amp;gt;&amp;gt;print b
&amp;gt;&amp;gt;&amp;gt;[6,7]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = map(lambda x:x*2,[1,2,3])
&amp;gt;&amp;gt;&amp;gt; list(a)
[2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; reduce(lambda x,y:x*y,range(1,4))
6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;23-python里的拷贝&#34;&gt;23 Python里的拷贝&lt;/h2&gt;
&lt;p&gt;引用和copy(),deepcopy()的区别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import copy
a = [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]  #原始对象

b = a  #赋值，传对象的引用
c = copy.copy(a)  #对象拷贝，浅拷贝
d = copy.deepcopy(a)  #对象拷贝，深拷贝

a.append(5)  #修改对象a
a[4].append(&#39;c&#39;)  #修改对象a中的[&#39;a&#39;, &#39;b&#39;]数组对象

print &#39;a = &#39;, a
print &#39;b = &#39;, b
print &#39;c = &#39;, c
print &#39;d = &#39;, d

输出结果：
a =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
b =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
c =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]
d =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;24-python垃圾回收机制&#34;&gt;24 Python垃圾回收机制&lt;/h2&gt;
&lt;p&gt;Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。&lt;/p&gt;
&lt;h3 id=&#34;1-引用计数&#34;&gt;1 引用计数&lt;/h3&gt;
&lt;p&gt;PyObject是每个对象必有的内容，其中&lt;code&gt;ob_refcnt&lt;/code&gt;就是做为引用计数。当一个对象有新的引用时，它的&lt;code&gt;ob_refcnt&lt;/code&gt;就会增加，当引用它的对象被删除，它的&lt;code&gt;ob_refcnt&lt;/code&gt;就会减少.引用计数为0时，该对象生命就结束了。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;实时性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护引用计数消耗资源&lt;/li&gt;
&lt;li&gt;循环引用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-标记-清除机制&#34;&gt;2 标记-清除机制&lt;/h3&gt;
&lt;p&gt;基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。&lt;/p&gt;
&lt;h3 id=&#34;3-分代技术&#34;&gt;3 分代技术&lt;/h3&gt;
&lt;p&gt;分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。&lt;/p&gt;
&lt;p&gt;Python默认定义了三代对象集合，索引数越大，对象存活时间越长。&lt;/p&gt;
&lt;p&gt;举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。&lt;/p&gt;
&lt;h2 id=&#34;25-python的list&#34;&gt;25 Python的List&lt;/h2&gt;
&lt;p&gt;推荐: &lt;a href=&#34;http://www.jianshu.com/p/J4U6rR&#34;&gt;http://www.jianshu.com/p/J4U6rR&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;26-python的is&#34;&gt;26 Python的is&lt;/h2&gt;
&lt;p&gt;is是对比地址,==是对比值&lt;/p&gt;
&lt;h2 id=&#34;27-readreadline和readlines&#34;&gt;27 read,readline和readlines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;read 读取整个文件&lt;/li&gt;
&lt;li&gt;readline 读取下一行,使用生成器方法&lt;/li&gt;
&lt;li&gt;readlines 读取整个文件到一个迭代器以供我们遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;28-python2和3的区别&#34;&gt;28 Python2和3的区别&lt;/h2&gt;
&lt;p&gt;推荐：&lt;a href=&#34;http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/&#34;&gt;Python 2.7.x 与 Python 3.x 的主要差异&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;29-super-init&#34;&gt;29 super init&lt;/h2&gt;
&lt;p&gt;super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven&amp;rsquo;t already.&lt;/p&gt;
&lt;p&gt;Note that the syntax changed in Python 3.0: you can just say super().&lt;code&gt;__init__&lt;/code&gt;() instead of super(ChildB, self).&lt;code&gt;__init__&lt;/code&gt;() which IMO is quite a bit nicer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods&#34;&gt;http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/mrlevo520/article/details/51712440&#34;&gt;Python2.7中的super方法浅见&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;30-range-and-xrange&#34;&gt;30 range and xrange&lt;/h2&gt;
&lt;p&gt;都在循环时使用，xrange内存性能更好。 for i in range(0, 20): for i in xrange(0, 20): What is the difference between range and xrange functions in Python 2.X? range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements. xrange is a sequence object that evaluates lazily.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&#34;&gt;http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
