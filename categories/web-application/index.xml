<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web-application on Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/categories/web-application/</link>
    <description>Recent content in web-application on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 27 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yezheng.pro/categories/web-application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>distributed systems</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/distribute-systems/distribute-systems/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/distribute-systems/distribute-systems/</guid>
      <description>Java分布式应用如何入门以及有哪些资料？ 怎样才是一个基本水平的java程序员？</description>
    </item>
    
    <item>
      <title>domain-driven design read me</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/domain-driven-design/readme/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/domain-driven-design/readme/</guid>
      <description> https://zhuanlan.zhihu.com/p/32459776 https://www.zhihu.com/question/25089273/answer/233316164 https://zhuanlan.zhihu.com/p/343388831 https://zhuanlan.zhihu.com/p/75931257 https://zhuanlan.zhihu.com/p/348706530 https://zhuanlan.zhihu.com/p/334999899 https://www.zhihu.com/question/31687912/answer/95842364 https://github.com/VaughnVernon/IDDD_Samples </description>
    </item>
    
    <item>
      <title>domain-driven design with python</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/domain-driven-design/python/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/domain-driven-design/python/</guid>
      <description> https://github.com/cosmicpython/code/branches/all Architecture Patterns with Python: Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices </description>
    </item>
    
    <item>
      <title>microservices with python</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/microservices/python/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/microservices/python/</guid>
      <description>Architecture Patterns with Python: Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices Hands-On Microservices with Spring Boot and Spring Cloud: Build and deploy Java microservices using Spring Cloud, Istio, and Kubernetes Hands-On Docker for Microservices with Python: Design, deploy, and operate a complex system with multiple microservices using Docker and Kubernetes</description>
    </item>
    
    <item>
      <title>Developing Lightweight Microservices Using Kubernetes</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-kubernetes/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-kubernetes/</guid>
      <description>Introduction to Kubernetes Deploying Our Microservices in Kubernetes Implementing Kubernetes Features as an Alternative Using a Service Mesh to Improve Observability and Management Centralized Logging with the EFK Stack Monitoring Microservices </description>
    </item>
    
    <item>
      <title>Getting Started with Microservice Development Using Spring Boot</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-spring-boot/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-spring-boot/</guid>
      <description>Introduction to Microservices Benefits Each component in the platform can be delivered and upgraded separately. Each component in the platform can also be scaled out to multiple servers independently Challenges Many small components that use synchronous communication can cause a chain of failure problem, especially under high load. Keeping the configuration consistent and up to date in all the instances Monitoring the state of the platform in terms of latency</description>
    </item>
    
    <item>
      <title>Leveraging Spring Cloud to Manage Microservices</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-spring-cloud/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-spring-cloud/</guid>
      <description>Introduction to Spring Cloud Design pattern Current component Replaced by Software component Service discovery Netflix Eureka &amp;amp; Netflix Ribbon Netflix Eureka and Spring Cloud load balancer Edge server Netflix Zuul Spring Cloud Gateway and Spring Security OAuth Centralized configuration Spring Cloud Configuration Server Circuit breaker Netflix Hystrix Resilience4j Distributed tracing Spring Cloud Sleuth and Zipkin Adding Service Discovery Using Netflix Eureka and Ribbon Using Spring Cloud Gateway to Hide Microservices Behind an Edge Server Securing Access to APIs Centralized Configuration Improving Resilience Using Resilience4j Understanding Distributed Tracing </description>
    </item>
    
    <item>
      <title>SaaS</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/saas/saas/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/saas/saas/</guid>
      <description> https://blog.sentry.io/2018/11/14/how-to-build-saas-application/ https://youtu.be/W1fkGyIcePA </description>
    </item>
    
    <item>
      <title>SaaS with Flask</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/saas/flask/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/saas/flask/</guid>
      <description> https://github.com/nickjj/build-a-saas-app-with-flask </description>
    </item>
    
    <item>
      <title>Spring Config</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/config/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/config/</guid>
      <description>application.properties import org.springframework.beans.factory.annotation.Value; import com.alibaba.fastjson.JSONObject; import org.apache.http.entity.ContentType; class MessageRestController { @Value(&amp;#34;${restService_url: default_url}&amp;#34;) private String url; @RequestMapping(&amp;#34;/message&amp;#34;) String getMessage() { CloseableHttpClient httpClient = HttpClients.createDefault(); String body; if (param instanceof String) { body = (String) param; } else { body = JSONObject.toJSONString(param); } try { // 创建Http Post请求 HttpPost httpPost = new HttpPost(url); // 添加http headers if</description>
    </item>
    
    <item>
      <title>Spring Context</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/mybatis/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/mybatis/</guid>
      <description>applicationContext.xml &amp;lt;context:component-scan base-package=&amp;#34;org.example&amp;#34;/&amp;gt; Classpath scanning and managed components
&amp;lt;bean id=&amp;#34;txManager&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;#34;txManager&amp;#34;/&amp;gt; &amp;lt;tx:advice id=&amp;#34;txAdvice&amp;#34; transaction-manager=&amp;#34;txManager&amp;#34;&amp;gt; &amp;lt;tx:attributes&amp;gt; &amp;lt;tx:method name=&amp;#34;create*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34; timeout=&amp;#34;300&amp;#34; rollback-for=&amp;#34;java.lang.Exception&amp;#34; /&amp;gt; &amp;lt;tx:method name=&amp;#34;delete*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34; timeout=&amp;#34;300&amp;#34; rollback-for=&amp;#34;java.lang.Exception&amp;#34; /&amp;gt; &amp;lt;tx:method name=&amp;#34;update*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34; timeout=&amp;#34;300&amp;#34; rollback-for=&amp;#34;java.lang.Exception&amp;#34; /&amp;gt; &amp;lt;tx:method name=&amp;#34;get*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34; read-only=&amp;#34;true&amp;#34; timeout=&amp;#34;300&amp;#34; /&amp;gt; &amp;lt;tx:method name=&amp;#34;*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34; read-only=&amp;#34;true&amp;#34; timeout=&amp;#34;300&amp;#34; rollback-for=&amp;#34;java.lang.Exception&amp;#34;/&amp;gt; &amp;lt;/tx:attributes&amp;gt; &amp;lt;/tx:advice&amp;gt; &amp;lt;aop:config&amp;gt; &amp;lt;aop:pointcut id=&amp;#34;txPointcut&amp;#34; expression=&amp;#34;execution(* com.mico.emptyspring.service.*ServiceA.*(..))&amp;#34; /&amp;gt; &amp;lt;aop:advisor pointcut-ref=&amp;#34;txPointcut&amp;#34; advice-ref=&amp;#34;txAdvice&amp;#34; /&amp;gt; &amp;lt;/aop:config&amp;gt; Transaction Management
&amp;lt;bean id=&amp;#34;sqlSessionFactory&amp;#34; class=&amp;#34;org.mybatis.spring.SqlSessionFactoryBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;configuration&amp;#34;&amp;gt; &amp;lt;bean class=&amp;#34;org.</description>
    </item>
    
    <item>
      <title>Spring Practice</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/practice/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/practice/</guid>
      <description>vo package com.someapp.vo; public class UserVO { private int id; private String username; private String hashedPassword; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getHashedPassword() { return hashedPassword; } public void setHashedPassword(String hashedPassword) { this.hashedPassword = hashedPassword; } } dao import org.apache.ibatis.annotations.Param; public interface IUserDAO { List&amp;lt;UserVO&amp;gt; selectUsers(@Param(“paramVO”) UserVO paramVO); } xml &amp;lt;resultMap id=&amp;#34;userResultMap&amp;#34; type=&amp;#34;User&amp;#34;&amp;gt; &amp;lt;id property=&amp;#34;id&amp;#34; column=&amp;#34;user_id&amp;#34; /&amp;gt; &amp;lt;result property=&amp;#34;username&amp;#34; column=&amp;#34;user_name&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;password&amp;#34; column=&amp;#34;hashed_password&amp;#34;/&amp;gt; &amp;lt;/resultMap&amp;gt; &amp;lt;select id=&amp;#34;selectUsers&amp;#34; parameterType=&amp;#34;com.</description>
    </item>
    
    <item>
      <title>Mybatis Spring Boot</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/mybatis-spring-boot/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/mybatis-spring-boot/</guid>
      <description>Creating a project spring init -d=web --build=maven mysite Declare Dependencies cd mysite vim pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.liquibase&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;liquibase-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.10.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.20&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; MyBatis-Spring-Boot-Starter will: Autodetect an existing DataSource Will create and register an instance of a SqlSessionFactory passing that DataSource as an input using the SqlSessionFactoryBean Will create and register an instance of a SqlSessionTemplate got out of the SqlSessionFactory Auto-scan your mappers,</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/spring/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/spring/</guid>
      <description>Installation Install JDK Download jdk-8u261-linux-x64.tar.gz from Oracle
sudo pacman -S jdk8-openjdk vim ~/.bashrc export JAVA_HOME=/usr/lib/jvm/java-8-openjdk source ~/.bashrc Install maven sudo pacman -S maven cp /opt/maven/conf/settings.xml ~/.m2/ vim ~/.m2/settings.xml &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; Installing the Spring Boot CLI Download the Spring Boot CLI
wget https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/2.3.3.BUILD-SNAPSHOT/spring-boot-cli-2.3.3.BUILD-SNAPSHOT-bin.zip Extract to a directory that supports file execution.
sudo unzip spring-boot-cli-2.3.3.BUILD-SNAPSHOT-bin.zip -d /opt/ vim ~/.bashrc Add the following line to the file
export PATH=/opt/spring-2.</description>
    </item>
    
    <item>
      <title>Spring Boot CXF JAX-RS Starter</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot-cxf-jax-rs-starter/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot-cxf-jax-rs-starter/</guid>
      <description>Features Registers CXF Servlet with a &amp;ldquo;/services/*&amp;rdquo; URL pattern for serving CXF JAX-RS endpoints.
Optionally auto-discovers JAX-RS root resources and providers and creates a JAX-RS endpoint.
Note the use of CXF JAX-RS Clients in SpringBoot Application is covered in this section.
Databases sudo docker container start mysql-container-id sudo docker exec -it mysql-container-name mysql -u root -p mysql&amp;gt; create database demo; mysql&amp;gt; USE demo; mysql&amp;gt; SET FOREIGN_KEY_CHECKS=0; mysql&amp;gt; DROP TABLE IF EXISTS `student`; mysql&amp;gt; CREATE TABLE `student` ( -&amp;gt; `id` int(10) NOT NULL, -&amp;gt; `name` varchar(100) DEFAULT NULL, -&amp;gt; `sex` char(6) DEFAULT NULL, -&amp;gt; `address` varchar(255) DEFAULT NULL, -&amp;gt; `age` int(10) DEFAULT NULL, -&amp;gt; PRIMARY KEY (`id`) -&amp;gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8; mysql&amp;gt; INSERT INTO `student` VALUES (&amp;#39;1&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;22&amp;#39;); Creating a project spring init -d=web,mybatis,mysql --build=maven mysite dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Search Architecture</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/search-architecture/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/search-architecture/</guid>
      <description>搜索服务使用说明 搜索运营 运营分析 Dashboard TopN dashboard badcase 热搜词统计 用户行为明细 词库管理 同义词 手动新增 自动挖掘 专有名词 听用词 核心词 业务管理 直通车 黑名单 提示次 敏</description>
    </item>
    
    <item>
      <title>Python and Java Service</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/python-and-java-service/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/python-and-java-service/</guid>
      <description>Python和Java服务器通信实现的理解和比较 Python的WSGI和Java的Servlet API Python的WSGI 最近在学习使用Pyt</description>
    </item>
    
    <item>
      <title>Scraping with Scrapy and Django Integration</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/scrapy-with-django/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/scrapy-with-django/</guid>
      <description>Installing Dependencies (Optional) $ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple $ python -m pip install --user virtualenv $ python -m pip install --user virtualenvwrapper $ vim ~/.bashrc export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv source $HOME/.local/bin/virtualenvwrapper.sh $ source ~/.bashrc $ mkvirtualenv stock-screener pip install django djangorestframework markdown django-filter Scrapy scrapyd python-scrapyd-api scrapy-djangoitem proxybroker celery redis django-celery-results django-celery-beat Creating a Django Project $ django-admin startproject stock_screener $ cd stock_screener $ mkdir stock_screener/apps/basic_info $ django-admin startapp basic_info stock_screener/apps/basic_info $ mkdir stock_screener/apps/northbound $ django-admin startapp northbound stock_screener/apps/northbound $ mkdir stock_screener/apps/financial_metrics $ django-admin startapp financial_metrics stock_screener/apps/financial_metrics $ mkdir stock_screener/apps/quotes $ django-admin startapp quotes stock_screener/apps/quotes $ mkdir stock_screener/apps/jobs $ django-admin startapp jobs stock_screener/apps/jobs Cannot add backslash suffix when run startapp command.</description>
    </item>
    
    <item>
      <title>Django oauth2 provider</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/oauth2/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/oauth2/</guid>
      <description>Django oauth2 provider $ pip install django-oauth2-provider # settings.py INSTALLED_APPS = ( # ... &amp;#39;provider&amp;#39;, &amp;#39;provider.oauth2&amp;#39;, ) # urls.py url(r&amp;#39;^oauth2/&amp;#39;, include(&amp;#39;provider.oauth2.urls&amp;#39;, namespace = &amp;#39;oauth2&amp;#39;)), $ python manage.py syncdb $ python manage.py migrate How to request an access token for the first time ? Create a client entry in your database
To find out which type of client you need to create, read Section 2.1.
To create a new entry simply use the Django admin panel.</description>
    </item>
    
    <item>
      <title>Elasticsearch Tutorial</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/elasticsearch/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/elasticsearch/</guid>
      <description>Getting Started Installing and Running Elasticsearch Install Elasticsearch sudo pacman -S elasticsearch systemctl start elasticsearch.service curl http://127.0.0.1:9200 Install Kibana sudo pacman -S kibana sudo vim /etc/kibana/kibana.yml server.port: 5601 server.host: &amp;#34;localhost&amp;#34; elasticsearch.hosts: [&amp;#34;http://localhost:9200&amp;#34;] systemctl start kibana.service To launch the Kibana web interface, point your browser to port 5601. For example, http://127.0.0.1:5601.
Installing Sense Sense is a Kibana app that provides an interactive console for submitting requests to Elasticsearch directly from your browser.</description>
    </item>
    
  </channel>
</rss>
