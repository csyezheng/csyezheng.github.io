<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>artificial-intelligence on Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/categories/artificial-intelligence/</link>
    <description>Recent content in artificial-intelligence on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 27 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yezheng.pro/categories/artificial-intelligence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>summarization</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/summarization/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/summarization/</guid>
      <description> https://github.com/huggingface/transformers/tree/master/examples/seq2seq https://github.com/tensorflow/models/tree/master/research/textsum https://github.com/atulkum/pointer_summarizer https://github.com/vrindav/just-news-it https://github.com/pytorch/fairseq https://github.com/abisee/pointer-generator   </description>
    </item>
    
    <item>
      <title>Tensorflow Docker</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/tensorflow-docker/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/tensorflow-docker/</guid>
      <description>TensorFlow Docker requirements Install Docker
sudo pacman -S docker systemctl enable docker.service systemctl start docker.service For GPU support on Linux,
yay -S nvidia-container-toolkit The official TensorFlow Docker images are located in the tensorflow/tensorflow Docker Hub repository.
Start a TensorFlow Docker container docker run [-it] [--rm] [-p hostPort:containerPort] tensorflow/tensorflow[:tag] [command] Examples using CPU-only images docker pull tensorflow/tensorflow docker run -it --rm tensorflow/tensorflow \ python -c &amp;quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&amp;quot; Start a bash shell session within a TensorFlow-configured container:</description>
    </item>
    
    <item>
      <title>chatbot</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/chatbot/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/chatbot/</guid>
      <description>Building a FAQ Chatbot in Python – The Future of Information Searching 用Rasa NLU构建自己的中文NLU系统 MITIE and Chinese support Chinese_models_for_SpaCy Tuning Your NLU Model Rasa 入坑指南一：初识 Rasa rasa_chatbot_cn diet_classifier Rasa入门教程专栏 rasa文章导</description>
    </item>
    
    <item>
      <title>dialog systems and chatbots</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/dialog-systems-and-chatbots/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/dialog-systems-and-chatbots/</guid>
      <description>Intent matching Matching algorithms two algorithms to match intents: rule-based grammar matching and ML matching. simultaneously attempts both algorithms and chooses the best result. Algorithm Pros Cons Rule-based grammar matching Accurate with a small or large number of training phrase examples.Models are updated quickly. Does not support the automated expansion entity option. ML matching Accurate with a large number of training phrase examples. Matching is fast. Inaccurate with a small</description>
    </item>
    
    <item>
      <title>evaluate the quality of the training phrases in intents</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/evaluate-the-quality-of-the-training-phrases-in-intents/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/evaluate-the-quality-of-the-training-phrases-in-intents/</guid>
      <description>This tutorial shows you how to analyze and evaluate the quality of the training phrases supplied to your Dialogflow agent&amp;rsquo;s intents. The purpose of this analysis is to avoid confusing the agent with phrases irrelevant to the intents supplied to, or more relevant to, other intents.
The approach you take is to generate semantic embeddings of the training phrases by using the TensorFlow Hub (tf.Hub) Universal Sentence Encoder module. You then compute cohesion and separation measurements based on the similarity between embeddings within the same intents and different intents.</description>
    </item>
    
    <item>
      <title>Joint intent and slot classification</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/joint-intent-and-slot-classification/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/chatbot/joint-intent-and-slot-classification/</guid>
      <description>Reference  Joint_Intent_and_Slot_Classification.ipynb  </description>
    </item>
    
    <item>
      <title>Named Entity Recognition using Spacy and Tensorflow</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/named-entity-recognition/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/natural-language-processing/named-entity-recognition/</guid>
      <description>Reference  Named Entity Recognition using Spacy and Tensorflow  </description>
    </item>
    
    <item>
      <title>Building a Recommendation System in TensorFlow</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/building-a-recommendation-system-in-tensorflow/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/building-a-recommendation-system-in-tensorflow/</guid>
      <description>Background theory for recommendations the background theory for matrix factorization-based collaborative filtering as applied to recommendation systems. Collaborative filtering for recommendation systems Collaborative filtering relies only on observed user behavior to make recommendations—no profile data or content access is necessary. The basic assumption is that similar user behavior reflects similar fundamental preferences, allowing</description>
    </item>
    
    <item>
      <title>Machine Learning Models for Predictions in Cloud Dataflow Pipelines</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/ml-model-predictions-in-dataflow-pipelines/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/deep-learning/ml-model-predictions-in-dataflow-pipelines/</guid>
      <description>This solution describes and compares the different design approaches for calling a machine learning model during a Dataflow pipeline, and examines the tradeoffs involved in choosing one approach or another. We present the results of a series of experiments that we ran to explore different approaches and illustrate these tradeoffs, both in batch and stream processing pipelines. This solution is designed for people who integrate trained models into data processing pipelines, rather than for data scientists who want to build machine learning models.</description>
    </item>
    
    <item>
      <title>pytorch recommendation ncf</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/pytorch-recommendation-ncf/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/pytorch-recommendation-ncf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>recommendations</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/product-overview/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/recommendation-system/product-overview/</guid>
      <description>Implementing Recommendations Steps   Set up a project
  Import your product catalog You can add items to your Recommendations AI product catalog individually by using the import Files or API.
  Information of the products sold to customers. This includes the product title, description, in stock availability, pricing, and so on.
Record user events User events track user actions such as clicking on a product, adding an item to a shopping cart, or purchasing an item, and so on.</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/architecture/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/architecture/</guid>
      <description>nginx gateway flask gunicorn microservice elasticsearch * 6 redis * 2 mysql * 3 mongo * 1</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/article/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/article/</guid>
      <description>https://www.6aiq.com/article/1588904027930?m=0&amp;amp;p=1 全面理解搜索 Query https://m.sohu.com/a/341401199_473283/ https://blog.csdn.net/qq_40027052/article/details/78579587</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/es/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/es/</guid>
      <description>https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html#filtered https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-routing-field.html https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html#aliases-routing https://discuss.elastic.co/t/what-is-best-indexing-strategy-for-multitenant-data/4353 多租户 规模 https://www.elastic.co/guide/en/elasticsearch/guide/current/user-based.html https://www.elastic.co/guide/en/elasticsearch/guide/current/shared-index.html https://www.elastic.co/guide/en/elasticsearch/guide/current/faking-it.html https://www.elastic.co/guide/en/elasticsearch/guide/current/one-big-user.html https://www.elastic.co/blog/found-multi-tenancy https://techblog.bozho.net/elasticsearch-multitenancy-with-routing/</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/learn/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/learn/</guid>
      <description> ICS UCI CSE 163 CA106B Search Engine NYU Search Engine Page Rank Overview - Building a Search Engine | Coursera CSC 575 Intelligent Information Retrieval   </description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/ltr/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/ltr/</guid>
      <description>https://en.m.wikipedia.org/wiki/Learning_to_rank
https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/learning-to-rank.html
https://github.com/dmlc/xgboost/tree/master/demo/rank
https://github.com/o19s/
https://github.com/o19s/es-tmdb
https://github.com/o19s/elasticsearch-learning-to-rank
https://github.com/o19s/elasticsearch-ltr-demo
https://github.com/o19s/hello-ltr
https://github.com/ehsangolshani/ranklib-demo
https://github.com/andrew-sn/sltr_demo
https://blog.csdn.net/ctrip_tech/article/details/103519193
https://www.infoq.cn/article/we-are-bringing-learning-to-rank-to-elasticsearch
https://github.com/o19s/rated-ranking-evaluator
https://github.com/o19s/relevant-search-book
https://github.com/o19s/word2vec-experiments
https://github.com/o19s/splainer
https://github.com/o19s/splainer-search
https://github.com/elastic/elasticsearch-dsl-py</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/project/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/project/</guid>
      <description>BaseService init_service 各个应用的模型 字典加载 service 对外暴露接口的统一 SearchService(BaseService) do_es_search 词库加载方案 多租户，每个租户词库隔离，每个租户一个JiebaTokenizer，一个wor</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/python/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/python/</guid>
      <description> https://github.com/django-haystack/django-haystack/blob/master/haystack/backends/elasticsearch_backend.py   self.conn.indices.create( index=self.index_name, body=self.DEFAULT_SETTINGS, ignore=400 ) self.conn.indices.put_mapping( index=self.index_name, doc_type=&amp;quot;modelresult&amp;quot;, body=current_mapping ) </description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/types/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/types/</guid>
      <description>Removal of mapping types
https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</description>
    </item>
    
    <item>
      <title>search engine</title>
      <link>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/%E4%BA%A7%E5%93%81/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/artificial-intelligence/search/%E4%BA%A7%E5%93%81/</guid>
      <description>服务名称 服务UUID APPID 服务Owner 创建时间 修改时间 ABtest 应用特性： 智能纠错 意图识别 槽位填充 搜索 个性化排序 平台特性： 多租户 服务解耦 租户级意图与槽</description>
    </item>
    
  </channel>
</rss>
