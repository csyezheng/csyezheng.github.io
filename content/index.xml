<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contents on Ye Zheng&#39;s Blog</title>
    <link>http://csyezheng.github.io/content/</link>
    <description>Recent content in Contents on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://csyezheng.github.io/content/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://csyezheng.github.io/content/about/</link>
      <pubDate>Mon, 25 Sep 2017 21:38:52 +0800</pubDate>
      
      <guid>http://csyezheng.github.io/content/about/</guid>
      <description>I&#39;m graduated from the Hebei GEO University with a degree in marketing, because I thought computers were cool from an early age, so I chose programmers as my future employment direction in my third year of college. In the third year of college, I learned some front-end knowledge, and in the fourth year of college I learned some C ++ related knowledge. After graduating, I naturally found a job related to programming.</description>
    </item>
    
    <item>
      <title>Scraping with Scrapy and Django Integration</title>
      <link>http://csyezheng.github.io/content/post/back-end/scrapy-with-django/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/back-end/scrapy-with-django/</guid>
      <description>Installing Dependencies (Optional) $ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple $ python -m pip install --user virtualenv $ python -m pip install --user virtualenvwrapper $ vim ~/.bashrc export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv source $HOME/.local/bin/virtualenvwrapper.sh $ source ~/.bashrc $ mkvirtualenv stock-screener pip install django djangorestframework markdown django-filter Scrapy scrapyd python-scrapyd-api scrapy-djangoitem proxybroker celery redis django-celery-results Creating a Django Project $ django-admin startproject stock_screener $ cd stock_screener $ mkdir stock_screener/apps/basic_info $ django-admin startapp basic_info stock_screener/apps/basic_info $ mkdir stock_screener/apps/northbound $ django-admin startapp northbound stock_screener/apps/northbound $ mkdir stock_screener/apps/financial_metrics $ django-admin startapp financial_metrics stock_screener/apps/financial_metrics $ mkdir stock_screener/apps/quotes $ django-admin startapp quotes stock_screener/apps/quotes $ mkdir stock_screener/apps/jobs $ django-admin startapp jobs stock_screener/apps/jobs Cannot add backslash suffix when run startapp command.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Library Management</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/cpp-library-management/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/cpp-library-management/</guid>
      <description>In general, you are going to have to end up with
 Header files in a directory somewhere library files (either static libraries, or DLLs/shared objects). If the library is a header-only library like some of the boost libraries, then you won&#39;t need this.  You get hold of the library files, either by building them on your machine (typical for open source projects, and projects aimed at Linux platforms), or by downloading the pre-compiled binaries (typical for Windows libraries, particularly paid-for).</description>
    </item>
    
    <item>
      <title>libcurl</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/curl/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/curl/</guid>
      <description>#include &amp;lt;curl/curl.h&amp;gt; When using an external library you must link with it:
$ g++ main.cpp -lcurl </description>
    </item>
    
    <item>
      <title>C&#43;&#43; 3rd party libraries</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/3rd-libraries/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/3rd-libraries/</guid>
      <description>grpc/libevent/libev/libasio 实现高性能网络服务器 protobuf 数据结构序列化/反序列化，方便数据交换 LevelDB/RocksDB 嵌入式KV数据库 snappy/zlib/lz4 数据压缩，解压缩 jemalloc/tcmalloc 高效内存分配器，尤其多线程场景 jerasure Reed Sol</description>
    </item>
    
    <item>
      <title>jsoncpp</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/jsoncpp/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/jsoncpp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/cmake/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/cmake/</guid>
      <description>如果工程存在多个目录,需要确保每个要管理的目录都存在一个 CMakeLists.txt． Set a name, version, and enable languages for the entire project. project(&amp;lt;PROJECT-NAME&amp;gt; [LANGUAGES] [&amp;lt;language-name&amp;gt;...]) Sets the name of the project and stores the name in the PROJECT_NAME</description>
    </item>
    
    <item>
      <title>C&#43;&#43; tools</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/cpp/tools/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/cpp/tools/</guid>
      <description>Tools clang-format 格式化c++代码，同类工具还有astyle。保持代码风格统一是个好习惯。 qt creator vs以外我觉得最好用的c++ ide，代码补全质量高（基于li</description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>http://csyezheng.github.io/content/post/devops/devops/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/devops/devops/</guid>
      <description>What is DevOps? DevOps (a clipped compound of &amp;ldquo;development&amp;rdquo; and &amp;ldquo;operations&amp;quot;) is a software engineering culture and practice that aims at unifying software development (Dev) and software operation (Ops). The main characteristic of the DevOps movement is to strongly advocate automation and monitoring at all steps of software construction, from integration, testing, releasing to deployment and infrastructure management. DevOps aims at shorter development cycles, increased deployment frequency, and more dependable</description>
    </item>
    
    <item>
      <title>Kubernetes Basics</title>
      <link>http://csyezheng.github.io/content/post/devops/kubernetes/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/devops/kubernetes/</guid>
      <description>Using Minikube to Create a Cluster Kubernetes Clusters Kubernetes coordinates a highly available cluster of computers that are connected to work as a single unit.
applications need to be packaged in a way that decouples them from individual hosts: they need to be containerized.
Kubernetes automates the distribution and scheduling of application containers across a cluster in a more efficient way.
A Kubernetes cluster consists of two types of resources:</description>
    </item>
    
    <item>
      <title>Django oauth2 provider</title>
      <link>http://csyezheng.github.io/content/post/back-end/oauth2/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/back-end/oauth2/</guid>
      <description>Django oauth2 provider $ pip install django-oauth2-provider # settings.py INSTALLED_APPS = ( # ... &#39;provider&#39;, &#39;provider.oauth2&#39;, ) # urls.py url(r&#39;^oauth2/&#39;, include(&#39;provider.oauth2.urls&#39;, namespace = &#39;oauth2&#39;)), $ python manage.py syncdb $ python manage.py migrate How to request an access token for the first time ?   Create a client entry in your database
To find out which type of client you need to create, read Section 2.1.
To create a new entry simply use the Django admin panel.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://csyezheng.github.io/content/post/devops/docker/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/devops/docker/</guid>
      <description>Set up Docker environment Images and containers  An image is an executable package that includes everything needed to run an application&amp;ndash;the code, a runtime, libraries, environment variables, and configuration files. A container is a runtime instance of an image&amp;ndash;what the image becomes in memory when executed. A container runs natively on Linux and shares the kernel of the host machine with other containers.  Install Docker add your user to the docker group.</description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>http://csyezheng.github.io/content/post/back-end/microservices/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/back-end/microservices/</guid>
      <description>第1章 微服务 1.1 什么是微服务 微服务就是一些协同工作的小而自治的服务 1.1.1 很小，专注于做好一件事 在一个单块系统内，通常会创建一些抽象层或者模块来保证</description>
    </item>
    
    <item>
      <title>A Tour of Go</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/go/a-tour-of-go/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/go/a-tour-of-go/</guid>
      <description>Basics Packages, variables, and functions. Packages Programs start running in package main.
By convention, the package name is the same as the last element of the import path. For instance, the &amp;quot;math/rand&amp;quot; package comprises files that begin with the statement package rand.
Imports It is good style to use the factored import statement.
import ( &amp;quot;fmt&amp;quot; &amp;quot;math/rand&amp;quot; ) Exported names In Go, a name is exported if it begins with a capital letter.</description>
    </item>
    
    <item>
      <title>Debugging JavaScript in Chrome DevTools</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/javascript/debug/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/javascript/debug/</guid>
      <description>Get Started Step 2: Get familiar with the Sources panel UI The Sources panel is where you debug JavaScript.
Open DevTools by pressing Command+Option+I (Mac) or Control+Shift+I (Windows, Linux). This shortcut opens the Consolepanel.
Step 3: Pause the code with a breakpoint Step 4: Step through the code Step 5: Set a line-of-code breakpoint Step 6: Check variable values </description>
    </item>
    
    <item>
      <title>Delve Documentation</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/go/debugging-with-delve/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/go/debugging-with-delve/</guid>
      <description>Installation on Linux $ mkdir -p $GOPATH/src/github.com/myusername/project &amp;amp;&amp;amp; cd &amp;quot;$_&amp;quot; $ go get -u github.com/go-delve/delve/cmd/dlv Usage $ cat $GOPATH/src/github.com/username/proj/main.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;os&amp;quot; ) const port = &amp;quot;8000&amp;quot; func main() { http.HandleFunc(&amp;quot;/hi&amp;quot;, hi) fmt.Println(&amp;quot;runing on port: &amp;quot; + port) log.Fatal(http.ListenAndServe(&amp;quot;:&amp;quot; + port, nil)) } func hi(w http.ResponseWriter, r *http.Request) { hostName, _ := os.Hostname() fmt.Fprintf(w, &amp;quot;HostName: %s&amp;quot;, hostName) } dlv debug Compile and begin debugging main package in current directory, or the package specified.</description>
    </item>
    
    <item>
      <title>generate-model-structs-from-database</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/go/generate-model-structs-from-database/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/go/generate-model-structs-from-database/</guid>
      <description>Generate gorm model structs from database
  https://github.com/smallnest/gen
  https://github.com/wantedly/pq2gorm
  https://github.com/go-xorm/cmd
  </description>
    </item>
    
    <item>
      <title>Getting Started with Scala</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/scala/getting-started/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/scala/getting-started/</guid>
      <description>Create A Scala Project With sbt In The Command Line Installation   Java 8 JDK javac -version 
  install sbt
  Create a project $ mkdir practice &amp;amp;&amp;amp; cd practice $ sbt new scala/hello-world.g8 # pull template from GitHub - hello-world - project (sbt uses this to install manage plugins and dependencies) - build.properties - src - main - scala (All of your scala code goes here) -Main.</description>
    </item>
    
    <item>
      <title>Gin</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/go/gin/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/go/gin/</guid>
      <description>sessions Gin middleware for session management with multi-backend support (currently cookie, Redis, Memcached, MongoDB, memstore).
$ go get github.com/gin-contrib/sessions import &amp;quot;github.com/gin-contrib/sessions&amp;quot; cookie-based Example import ( &amp;quot;github.com/gin-contrib/sessions&amp;quot; &amp;quot;github.com/gin-contrib/sessions/cookie&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; ) func main() { r := gin.Default() store := cookie.NewStore([]byte(&amp;quot;secret&amp;quot;)) r.Use(sessions.Sessions(&amp;quot;mysession&amp;quot;, store)) r.GET(&amp;quot;/incr&amp;quot;, func(c *gin.Context) { session := sessions.Default(c) var count int v := session.Get(&amp;quot;count&amp;quot;) if v == nil { count = 0 } else { count = v.(int) count++ } session.Set(&amp;quot;count&amp;quot;, count) session.</description>
    </item>
    
    <item>
      <title>glide</title>
      <link>http://csyezheng.github.io/content/post/programming-languages/go/glide/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://csyezheng.github.io/content/post/programming-languages/go/glide/</guid>
      <description>使用 glide install 或 glide up 时报 Cannot detect VCS image.png 解决 这个是国内访问golang.org被墙导致的 解决方法如下： glide mirror set https://golang.org/x/crypto https://github.com/golang/crypto 理论上这样后再执行 glide install 或 glide up 就可以了 如果按</description>
    </item>
    
  </channel>
</rss>