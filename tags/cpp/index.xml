<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/tags/cpp/</link>
    <description>Recent content in Cpp on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yezheng.pro/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Library Management</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/cpp-library-management/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/cpp-library-management/</guid>
      <description>In general, you are going to have to end up with
 Header files in a directory somewhere library files (either static libraries, or DLLs/shared objects). If the library is a header-only library like some of the boost libraries, then you won&amp;rsquo;t need this.  You get hold of the library files, either by building them on your machine (typical for open source projects, and projects aimed at Linux platforms), or by downloading the pre-compiled binaries (typical for Windows libraries, particularly paid-for).</description>
    </item>
    
    <item>
      <title>libcurl</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/curl/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/curl/</guid>
      <description>#include &amp;lt;curl/curl.h&amp;gt; When using an external library you must link with it:
$ g++ main.cpp -lcurl </description>
    </item>
    
    <item>
      <title>C&#43;&#43; 3rd party libraries</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/3rd-libraries/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/3rd-libraries/</guid>
      <description>grpc/libevent/libev/libasio 实现高性能网络服务器 protobuf 数据结构序列化/反序列化，方便数据交换 LevelDB/RocksDB 嵌入式KV数据库 snappy/zlib/lz4 数据压缩，解压缩 jemalloc/tcmalloc 高效内存分配器，尤其多线程场景 jerasure Reed Sol</description>
    </item>
    
    <item>
      <title>jsoncpp</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/jsoncpp/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/jsoncpp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/cmake/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/cmake/</guid>
      <description>如果工程存在多个目录,需要确保每个要管理的目录都存在一个 CMakeLists.txt． Set a name, version, and enable languages for the entire project. project(&amp;lt;PROJECT-NAME&amp;gt; [LANGUAGES] [&amp;lt;language-name&amp;gt;...]) Sets the name of the project and stores the name in the PROJECT_NAME</description>
    </item>
    
    <item>
      <title>C&#43;&#43; tools</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/cpp/tools/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/cpp/tools/</guid>
      <description>Tools clang-format 格式化c++代码，同类工具还有astyle。保持代码风格统一是个好习惯。 qt creator vs以外我觉得最好用的c++ ide，代码补全质量高（基于li</description>
    </item>
    
  </channel>
</rss>
