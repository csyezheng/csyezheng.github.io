<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-boot on Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/tags/spring-boot/</link>
    <description>Recent content in Spring-boot on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yezheng.pro/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Developing Lightweight Microservices Using Kubernetes</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-kubernetes/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/microservice-with-kubernetes/</guid>
      <description>Introduction to Kubernetes Deploying Our Microservices in Kubernetes Implementing Kubernetes Features as an Alternative Using a Service Mesh to Improve Observability and Management Centralized Logging with the EFK Stack Monitoring Microservices </description>
    </item>
    
    <item>
      <title>Spring Config</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/config/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/config/</guid>
      <description>application.properties import org.springframework.beans.factory.annotation.Value; import com.alibaba.fastjson.JSONObject; import org.apache.http.entity.ContentType; class MessageRestController { @Value(&amp;quot;${restService_url: default_url}&amp;quot;) private String url; @RequestMapping(&amp;quot;/message&amp;quot;) String getMessage() { CloseableHttpClient httpClient = HttpClients.createDefault(); String body; if (param instanceof String) { body = (String) param; } else { body = JSONObject.toJSONString(param); } try { // 创建Http Post请求 HttpPost httpPost = new HttpPost(url); // 添加http headers if</description>
    </item>
    
    <item>
      <title>Spring Context</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/mybatis/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/mybatis/</guid>
      <description>applicationContext.xml &amp;lt;context:component-scan base-package=&amp;quot;org.example&amp;quot;/&amp;gt; Classpath scanning and managed components
&amp;lt;bean id=&amp;quot;txManager&amp;quot; class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;txManager&amp;quot;/&amp;gt; &amp;lt;tx:advice id=&amp;quot;txAdvice&amp;quot; transaction-manager=&amp;quot;txManager&amp;quot;&amp;gt; &amp;lt;tx:attributes&amp;gt; &amp;lt;tx:method name=&amp;quot;create*&amp;quot; propagation=&amp;quot;REQUIRED&amp;quot; timeout=&amp;quot;300&amp;quot; rollback-for=&amp;quot;java.lang.Exception&amp;quot; /&amp;gt; &amp;lt;tx:method name=&amp;quot;delete*&amp;quot; propagation=&amp;quot;REQUIRED&amp;quot; timeout=&amp;quot;300&amp;quot; rollback-for=&amp;quot;java.lang.Exception&amp;quot; /&amp;gt; &amp;lt;tx:method name=&amp;quot;update*&amp;quot; propagation=&amp;quot;REQUIRED&amp;quot; timeout=&amp;quot;300&amp;quot; rollback-for=&amp;quot;java.lang.Exception&amp;quot; /&amp;gt; &amp;lt;tx:method name=&amp;quot;get*&amp;quot; propagation=&amp;quot;REQUIRED&amp;quot; read-only=&amp;quot;true&amp;quot; timeout=&amp;quot;300&amp;quot; /&amp;gt; &amp;lt;tx:method name=&amp;quot;*&amp;quot; propagation=&amp;quot;REQUIRED&amp;quot; read-only=&amp;quot;true&amp;quot; timeout=&amp;quot;300&amp;quot; rollback-for=&amp;quot;java.lang.Exception&amp;quot;/&amp;gt; &amp;lt;/tx:attributes&amp;gt; &amp;lt;/tx:advice&amp;gt; &amp;lt;aop:config&amp;gt; &amp;lt;aop:pointcut id=&amp;quot;txPointcut&amp;quot; expression=&amp;quot;execution(* com.mico.emptyspring.service.*ServiceA.*(..))&amp;quot; /&amp;gt; &amp;lt;aop:advisor pointcut-ref=&amp;quot;txPointcut&amp;quot; advice-ref=&amp;quot;txAdvice&amp;quot; /&amp;gt; &amp;lt;/aop:config&amp;gt; Transaction Management
&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;configuration&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description>
    </item>
    
    <item>
      <title>Spring Practice</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/spring/practice/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/spring/practice/</guid>
      <description>vo  package com.someapp.vo; public class UserVO { private int id; private String username; private String hashedPassword; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getHashedPassword() { return hashedPassword; } public void setHashedPassword(String hashedPassword) { this.hashedPassword = hashedPassword; } }  dao  import org.</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/spring/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/spring/</guid>
      <description>Installation Install JDK Download jdk-8u261-linux-x64.tar.gz from Oracle
sudo pacman -S jdk8-openjdk vim ~/.bashrc export JAVA_HOME=/usr/lib/jvm/java-8-openjdk source ~/.bashrc Install maven sudo pacman -S maven cp /opt/maven/conf/settings.xml ~/.m2/ vim ~/.m2/settings.xml &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; Installing the Spring Boot CLI Download the Spring Boot CLI
wget https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/2.3.3.BUILD-SNAPSHOT/spring-boot-cli-2.3.3.BUILD-SNAPSHOT-bin.zip Extract to a directory that supports file execution.
sudo unzip spring-boot-cli-2.3.3.BUILD-SNAPSHOT-bin.zip -d /opt/ vim ~/.bashrc Add the following line to the file
export PATH=/opt/spring-2.</description>
    </item>
    
    <item>
      <title>Spring Boot CXF JAX-RS Starter</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot-cxf-jax-rs-starter/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot-cxf-jax-rs-starter/</guid>
      <description>Features Registers CXF Servlet with a &amp;ldquo;/services/*&amp;rdquo; URL pattern for serving CXF JAX-RS endpoints.
Optionally auto-discovers JAX-RS root resources and providers and creates a JAX-RS endpoint.
Note the use of CXF JAX-RS Clients in SpringBoot Application is covered in this section.
Databases sudo docker container start mysql-container-id sudo docker exec -it mysql-container-name mysql -u root -p mysql&amp;gt; create database demo; mysql&amp;gt; USE demo; mysql&amp;gt; SET FOREIGN_KEY_CHECKS=0; mysql&amp;gt; DROP TABLE IF EXISTS `student`; mysql&amp;gt; CREATE TABLE `student` ( -&amp;gt; `id` int(10) NOT NULL, -&amp;gt; `name` varchar(100) DEFAULT NULL, -&amp;gt; `sex` char(6) DEFAULT NULL, -&amp;gt; `address` varchar(255) DEFAULT NULL, -&amp;gt; `age` int(10) DEFAULT NULL, -&amp;gt; PRIMARY KEY (`id`) -&amp;gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8; mysql&amp;gt; INSERT INTO `student` VALUES (&#39;1&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;22&#39;); Creating a project spring init -d=web,mybatis,mysql --build=maven mysite dependency  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Building Java Projects with Maven</title>
      <link>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/specialization/web-application/back-end/spring-boot/</guid>
      <description>Install Maven Maven is downloadable as a zip file at https://maven.apache.org/download.cgi.
Once you have downloaded the zip file, unzip it to your computer. Then add the bin folder to your path.
$ mvn -v Define a simple Maven build Maven projects are defined with an XML file named pom.xml. Create a file named pom.xml at the root of the project (i.e. put it next to the src folder) and give it the following contents:</description>
    </item>
    
  </channel>
</rss>
