<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin on Ye Zheng&#39;s Blog</title>
    <link>http://www.yezheng.pro/tags/gin/</link>
    <description>Recent content in Gin on Ye Zheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yezheng.pro/tags/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin</title>
      <link>http://www.yezheng.pro/post/engineering-fundamentals/go/gin/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.yezheng.pro/post/engineering-fundamentals/go/gin/</guid>
      <description>sessions Gin middleware for session management with multi-backend support (currently cookie, Redis, Memcached, MongoDB, memstore).
$ go get github.com/gin-contrib/sessions import &amp;#34;github.com/gin-contrib/sessions&amp;#34; cookie-based Example import ( &amp;#34;github.com/gin-contrib/sessions&amp;#34; &amp;#34;github.com/gin-contrib/sessions/cookie&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() store := cookie.NewStore([]byte(&amp;#34;secret&amp;#34;)) r.Use(sessions.Sessions(&amp;#34;mysession&amp;#34;, store)) r.GET(&amp;#34;/incr&amp;#34;, func(c *gin.Context) { session := sessions.Default(c) var count int v := session.Get(&amp;#34;count&amp;#34;) if v == nil { count = 0 } else { count = v.(int) count++ } session.Set(&amp;#34;count&amp;#34;, count) session.</description>
    </item>
    
  </channel>
</rss>
